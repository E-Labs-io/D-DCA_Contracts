{
  "metadata": "{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/base/DCAExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\npragma experimental ABIEncoderV2;\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDCAExecutor.sol\\\";\\nimport \\\"../interfaces/IDCAAccount.sol\\\";\\nimport \\\"../security/onlyAdmin.sol\\\";\\nimport \\\"../security/onlyExecutor.sol\\\";\\nimport \\\"../security/onlyActive.sol\\\";\\nimport {Strategies} from \\\"../library/Strategys.sol\\\";\\nimport {Fee} from \\\"../library/Fees.sol\\\";\\nimport {Intervals} from \\\"../library/Intervals.sol\\\";\\n\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\n\\ncontract DCAExecutor is OnlyAdmin, OnlyExecutor, OnlyActive, IDCAExecutor {\\n    using Intervals for Interval;\\n    using Strategies for Strategy;\\n    using Fee for uint16;\\n    using Fee for FeeDistribution;\\n\\n    mapping(Interval => bool) private _activeIntervals;\\n    mapping(Interval => uint256) internal _totalActiveStrategiesByIntervals;\\n\\n    mapping(address => mapping(uint256 => bool)) internal _strategies; // WHY STORE THE STRAT?\\n    mapping(address => mapping(uint256 => uint256)) internal _lastExecution;\\n\\n    FeeDistribution internal _feeData;\\n\\n    uint256 private _totalActiveStrategies;\\n    uint256 private _totalIntervalsExecuted;\\n\\n    /**\\n     * @dev Constructor for the DCAExecutor contract\\n     * @param feeDistrobution_ The fee distribution data\\n     * @param executionEOA_ The address of the execution EOA\\n     */\\n    constructor(\\n        FeeDistribution memory feeDistrobution_,\\n        address executionEOA_\\n    ) OnlyExecutor(msg.sender, executionEOA_) {\\n        setFeeData(feeDistrobution_);\\n    }\\n\\n    /**\\n     * @dev Fallback function for the DCAExecutor contract\\n     */\\n    fallback() external payable {\\n        revert(\\\"DCAExecutor : [fallback]\\\");\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DCAExecutor : [receive]\\\");\\n    }\\n\\n    /**\\n     * @dev Subscribes a strategy to the DCAExecutor\\n     * @param strategy_ The strategy data\\n     */\\n    function Subscribe(\\n        Strategy calldata strategy_\\n    ) external override is_active {\\n        require(\\n            Strategies.isAccountAddress(strategy_, _msgSender()),\\n            \\\"DCAexecutor : [Subscribe] Only Account Contract can unsubscribe\\\"\\n        );\\n        require(\\n            strategy_.isValid(),\\n            \\\"DCAexecutor : [Subscribe] Invalid strategy\\\"\\n        );\\n        require(\\n            isIntervalActive(strategy_.interval),\\n            \\\"DCAexecutor : [Subscribe] Interval Not Active\\\"\\n        );\\n\\n        require(\\n            !_strategies[strategy_.accountAddress][strategy_.strategyId],\\n            \\\"DCAexecutor : [Subscribe] Strategy already subscribed\\\"\\n        );\\n        _subscribeAccount(strategy_);\\n    }\\n\\n    /**\\n     * @dev Unsubscribes a strategy from the DCAExecutor\\n     * @param DCAAccountAddress_ The address of the DCAAccount\\n     * @param strategyId_ The id of the strategy to unsubscribe\\n     * @param interval_ The interval of the strategy to unsubscribe\\n     */\\n    function Unsubscribe(\\n        address DCAAccountAddress_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external override {\\n        require(\\n            _msgSender() == DCAAccountAddress_,\\n            \\\"DCAexecutor : [Unsubscribe] Only Account Contract can unsubscribe\\\"\\n        );\\n        require(\\n            _strategies[DCAAccountAddress_][strategyId_],\\n            \\\"DCAexecutor : [Subscribe] Strategy already unsubscribed\\\"\\n        );\\n\\n        _unSubscribeAccount(DCAAccountAddress_, strategyId_, interval_);\\n    }\\n\\n    /**\\n     * @dev Executes a single strategy\\n     * @param DCAAccount_ The address of the DCAAccount\\n     * @param strategyId_ The id of the strategy to execute\\n     * @param interval_ The interval of the strategy to execute\\n     */\\n    function Execute(\\n        address DCAAccount_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external override onlyExecutor is_active {\\n        require(\\n            _strategies[DCAAccount_][strategyId_],\\n            \\\"DCAexecutor : [Execute] Strategy not subscribed\\\"\\n        );\\n\\n        require(\\n            isIntervalActive(interval_),\\n            \\\"DCAexecutor : [Execute] Interval Not Active\\\"\\n        );\\n\\n        require(\\n            Intervals.isInWindow(\\n                interval_,\\n                _lastExecution[DCAAccount_][strategyId_]\\n            ),\\n            \\\"DCAexecutor : [Execute] Not in execution window\\\"\\n        );\\n\\n        _executeStrategy(DCAAccount_, strategyId_);\\n    }\\n\\n    /**\\n     * @dev Distributes the fees for the given token\\n     * @param tokenAddress_ The address of the token to distribute fees for\\n     */\\n    function DistributeFees(\\n        address tokenAddress_\\n    ) external override onlyAdmins {\\n        IERC20 token = IERC20(tokenAddress_);\\n        uint256 balance = token.balanceOf(address(this));\\n        if (balance > 0) {\\n            (\\n                uint256 executorFee,\\n                uint256 computingFee,\\n                uint256 adminFee\\n            ) = _feeData.getFeeSplit(balance);\\n            _transferFee(_feeData.executionAddress, executorFee, token);\\n            _transferFee(_feeData.computingAddress, computingFee, token);\\n            _transferFee(_feeData.adminAddress, adminFee, token);\\n            emit FeesDistributed(tokenAddress_, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Forces the unsubscription of a strategy\\n     * @param DCAAccount_ The address of the DCAAccount\\n     * @param strategyId_ The id of the strategy to unsubscribe\\n     * @param interval_ The interval of the strategy to unsubscribe\\n     */\\n    function ForceUnsubscribe(\\n        address DCAAccount_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external onlyExecutor {\\n        require(\\n            _strategies[DCAAccount_][strategyId_],\\n            \\\"DCAExecutor: [ForceUnsubscribe] Account already unsubscribed\\\"\\n        );\\n\\n        _strategies[DCAAccount_][strategyId_] = false;\\n        IDCAAccount(DCAAccount_).ExecutorDeactivate(strategyId_);\\n        _totalActiveStrategies--;\\n        emit StrategySubscription(DCAAccount_, strategyId_, interval_, false);\\n    }\\n\\n    /**\\n     * @dev Sets the fee data for the DCAExecutor\\n     * @param fee_ The fee distribution data\\n     */\\n    function setFeeData(\\n        IDCADataStructures.FeeDistribution memory fee_\\n    ) public onlyOwner {\\n        require(\\n            fee_.checkPercentTotal(),\\n            \\\"DCAExecutor : [setFeeData] Total split percents don't equal 100%\\\"\\n        );\\n        _feeData = fee_;\\n        emit FeeDataChanged();\\n    }\\n\\n    /**\\n     * @dev Sets the active state of the DCAExecutor\\n     * @param newFlag_ The new active state\\n     */\\n    function setActiveState(bool newFlag_) public onlyAdmins {\\n        _setActiveState(newFlag_);\\n    }\\n\\n    /**\\n     * @dev Returns the total number of executions\\n     * @return The total number of executions\\n     */\\n    function getTotalExecutions() public view returns (uint256) {\\n        return _totalIntervalsExecuted;\\n    }\\n\\n    /**\\n     * @dev Returns the active executor address\\n     * @return The active executor address\\n     */\\n    function getExecutorAddress() public view override returns (address) {\\n        return _executor();\\n    }\\n\\n    /**\\n     * @dev Returns the fee data for the DCAExecutor\\n     * @return The fee data\\n     */\\n    function getFeeData() public view returns (FeeDistribution memory) {\\n        return _feeData;\\n    }\\n\\n    /**\\n     * @dev Returns the time till window for the given DCAAccount and strategy id\\n     * @param account_ The address of the DCAAccount\\n     * @param strategyId_ The id of the strategy\\n     * @return lastEx The last execution block number\\n     * @return secondsLeft The seconds left till window\\n     * @return checkReturn The check return\\n     */\\n    function getTimeTillWindow(\\n        address account_,\\n        uint256 strategyId_\\n    )\\n        external\\n        view\\n        returns (uint256 lastEx, uint256 secondsLeft, bool checkReturn)\\n    {\\n        return IDCAAccount(account_).getTimeTillWindow(strategyId_);\\n    }\\n\\n    /**\\n     * @dev Sets the active state of the given interval\\n     * @param interval_ The interval to set the active state for\\n     * @param status_ The new active state\\n     */\\n    function setIntervalActive(\\n        Interval interval_,\\n        bool status_\\n    ) external onlyAdmins {\\n        _activeIntervals[interval_] = status_;\\n    }\\n\\n    /**\\n     * @dev Returns the active state of the given interval\\n     * @param interval_ The interval to get the active state for\\n     * @return The active state of the given interval\\n     */\\n    function isIntervalActive(Interval interval_) public view returns (bool) {\\n        return _activeIntervals[interval_];\\n    }\\n\\n    /**\\n     *\\n     * @notice Internal & Private Functions\\n     */\\n\\n    function _subscribeAccount(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal {\\n        _strategies[strategy_.accountAddress][strategy_.strategyId] = true;\\n        _totalActiveStrategies++;\\n        _totalActiveStrategiesByIntervals[strategy_.interval]++;\\n\\n        emit StrategySubscription(\\n            strategy_.accountAddress,\\n            strategy_.strategyId,\\n            strategy_.interval,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @dev Unsubscribes a strategy from the DCAExecutor\\n     * @param DCAAccountAddress_ The address of the DCAAccount\\n     * @param strategyId_ The id of the strategy to unsubscribe\\n     */\\n    function _unSubscribeAccount(\\n        address DCAAccountAddress_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) private {\\n        _totalActiveStrategies--;\\n        _strategies[DCAAccountAddress_][strategyId_] = false;\\n        _totalActiveStrategiesByIntervals[interval_]--;\\n\\n        emit StrategySubscription(\\n            DCAAccountAddress_,\\n            strategyId_,\\n            interval_,\\n            false\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the execution address for the DCAExecutor\\n     * @param newExecutionEOA_ The new execution EOA address\\n     */\\n    function _setExecutionAddress(address newExecutionEOA_) internal {\\n        _changeExecutorAddress(newExecutionEOA_);\\n    }\\n\\n    function _executeStrategy(\\n        address accountAddress_,\\n        uint256 strategyId_\\n    ) internal returns (bool) {\\n        bool success = IDCAAccount(accountAddress_).Execute(\\n            strategyId_,\\n            _feeData.feeAmount\\n        );\\n        if (success) {\\n            _lastExecution[accountAddress_][strategyId_] = block.timestamp;\\n            _totalIntervalsExecuted++;\\n            emit ExecutedStrategy(accountAddress_, strategyId_);\\n        }\\n        return success;\\n    }\\n\\n    /**\\n     * @dev Transfers the fee to the given address\\n     * @param to_ The address to transfer the fee to\\n     * @param amount_ The amount of the fee to transfer\\n     * @param token_ The token to transfer the fee in\\n     */\\n    function _transferFee(\\n        address to_,\\n        uint256 amount_,\\n        IERC20 token_\\n    ) internal {\\n        token_.transfer(to_, amount_);\\n    }\\n\\n    /** Stats Getters */\\n\\n    /**\\n     * @dev Returns the total number of active strategies\\n     * @return The total number of active strategies\\n     */\\n    function getTotalActiveStrategys() public view returns (uint256) {\\n        return _totalActiveStrategies;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of active strategies for the given interval\\n     * @param interval_ The interval to get the total number of active strategies for\\n     * @return The total number of active strategies for the given interval\\n     */\\n    function getIntervalTotalActiveStrategys(\\n        Interval interval_\\n    ) public view returns (uint256) {\\n        return _totalActiveStrategiesByIntervals[interval_];\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCADataStructures.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCADataStructures {\\n    /**\\n     * @notice List of available intervals for executions\\n     * @notice Timing will be in seconds\\n     * @dev Check agenst Executor if the strategy interval is active\\n     */\\n    enum Interval {\\n        TestIntervalOneMin, //Only for development\\n        TestIntervalFiveMins, //Only for development\\n        OneDay,\\n        TwoDays,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    /**\\n     * @notice The fee distribution struct\\n     * @dev Working by a factor of 100 (100% = 10000)\\n     * @dev Executor, Computing and Admin fees should add up to 100%\\n     * @param amountToExecutor Percent of the FEE going to Executor EOA\\n     * @param amountToComputing Percent of the FEE going to Executor Computing costs\\n     * @param amountToAdmin Percent of the FEE going to admin\\n     * @param feeAmount Total amount of the pre-execution to be taken as fee\\n     * @param executionAddress The address of the executor\\n     * @param computingAddress The address of the computing\\n     * @param adminAddress The address of the admin\\n     */\\n    struct FeeDistribution {\\n        uint16 amountToExecutor; //In percent (where 10000 = 100%, 100 = 1%, etc.)\\n        uint16 amountToComputing; //In percent (where 10000 = 100%, 100 = 1%, etc.)\\n        uint16 amountToAdmin; //In percent (where 10000 = 100%, 100 = 1%, etc.)\\n        uint16 feeAmount; //In percent\\n        address executionAddress;\\n        address computingAddress; //need to look into how distributed computing payments work\\n        address adminAddress;\\n    }\\n\\n    /**\\n     * @notice The data struct defining the DCA Strategy\\n     * @param accountAddress Address of the account the strategy belongs to\\n     * @param baseToken The base token data\\n     * @param targetToken The target token data\\n     * @param interval The interval for the strategy\\n     * @param amount The amount of the base token to invest each interval\\n     * @param strategyId The ID of the strategy\\n     * @param active Whether the strategy is active\\n     * @param reinvest The reinvest data\\n     *\\n     * @dev strategyId is assigned by the account contract\\n     *\\n     */\\n    struct Strategy {\\n        address accountAddress;\\n        TokenData baseToken;\\n        TokenData targetToken; //use 0x0 for ETH\\n        Interval interval;\\n        uint256 amount;\\n        uint256 strategyId;\\n        bool active;\\n        Reinvest reinvest;\\n    }\\n\\n    /**\\n     *  @notice Token Data struct\\n     * @param tokenAddress The address of the token (i using native token use zero address address(0x0))\\n     * @param decimals The amount of decimals the token uses\\n     * @param ticker Of the token\\n     */\\n    struct TokenData {\\n        address tokenAddress;\\n        uint8 decimals;\\n        string ticker;\\n    }\\n\\n    /**\\n     * @notice Reinvest strategy struct.\\n     * If no reinvest set active to false and zero-out other fields\\n     * If using predefined reinvest strategy zero-out the bytes fields\\n     * Check code agents the Reinvest Codes library\\n     *\\n     * @notice deposit & withdraw reinvest methods only needed IF using custom reinvest strategy\\n     *\\n     * @param reinvestData Reinvest strategy specific data (encoded to bytes)\\n     * @param active If the reinvest is active\\n     * @param investCode Reinvest strategy code\\n     * @param dcaAccountAddress address of the account contract\\n     */\\n\\n    struct Reinvest {\\n        bytes reinvestData;\\n        bool active;\\n        uint8 investCode;\\n        address dcaAccountAddress;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCAExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCAExecutor is IDCADataStructures {\\n    /**\\n     * @notice Emitted once a strategy has finished executing successfully\\n     * @param account_ Address of the DCAAccount\\n     * @param strategyId_  ID of the strategy executed\\n     */\\n    event ExecutedStrategy(\\n        address indexed account_,\\n        uint256 indexed strategyId_\\n    );\\n\\n    /**\\n     * @notice Emitted when a new strategy subscribes or unsubscribes to the executor\\n     * @param DCAAccountAddress_  address of the DCAAccount subscribing\\n     * @param strategyId_  ID of the strategy to (un-)subscribe\\n     * @param strategyInterval_  Interval state of how ofter to be executed\\n     * @param active_ wether the strategy is being subscribed (true) or unsubscribed (false)\\n     */\\n    event StrategySubscription(\\n        address indexed DCAAccountAddress_,\\n        uint256 indexed strategyId_,\\n        Interval strategyInterval_,\\n        bool indexed active_\\n    );\\n\\n    /**\\n     * @notice Emitted each time the protocol fees are distributed\\n     * @param token_ address of the token being distributed\\n     * @param amount_ amount of the total token distributed\\n     */\\n    event FeesDistributed(address indexed token_, uint256 indexed amount_);\\n\\n    event FeeDataChanged();\\n\\n    /**\\n     * @notice Called by a DCAAccount to subscribe a strategy to the DCAExecutor\\n     * @param strategy_ The full strategy data of the subscribing strategy\\n     */\\n    function Subscribe(Strategy calldata strategy_) external;\\n\\n    /**\\n     * @notice Called by the DCAAccount to remove itself from the executor\\n     * @param DCAAccountAddress_ Address of the unsubscribing DCAAccount\\n     * @param strategyId_ ID of the strategy being unsubscribed\\n     */\\n    function Unsubscribe(\\n        address DCAAccountAddress_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external;\\n\\n    /**\\n     * @notice Called by the external Executor service wallet only, triggers the specified strategy\\n     * @param DCAAccount_ {address} Address of the DCAAccount holding the strategy to execute\\n     * @param strategyId_ {uint256} ID of the strategy to execute\\n     * @param interval_ {Interval} Interval of the strategy to execute\\n     */\\n    function Execute(\\n        address DCAAccount_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external;\\n\\n    /**\\n     * @notice Distributes the acuminated fee's from the DCAExecutor\\n     * @dev will use the in-contract fee's data to split the funds and transfer to needed wallets.\\n     * @param tokenAddress {address} Address of the token in the fee's pool to be distributed\\n     */\\n    function DistributeFees(address tokenAddress) external;\\n\\n    /**\\n     * @notice Used by the Executor service to remove a strategy from the DCAExecutor\\n     * Used mostly for unfunded and failing accounts.\\n     * @param DCAAccount_ {address} Address of the DCAAccount to be unsubscribed\\n     * @param strategyId_ {uint256} ID of the strategy to be unsubscribed\\n     */\\n    function ForceUnsubscribe(\\n        address DCAAccount_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external;\\n\\n    function getTimeTillWindow(\\n        address account_,\\n        uint256 strategyId_\\n    )\\n        external\\n        view\\n        returns (uint256 lastEx, uint256 secondsLeft, bool checkReturn);\\n\\n    /**\\n     * @notice Allows the admin to turn Strategy timings on & off\\n     * @param interval_ The strategy interval\\n     * @param status_ if the interval is active or not\\n     */\\n    function setIntervalActive(Interval interval_, bool status_) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCAAccount.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\nimport \\\"./IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCAAccount is IDCADataStructures {\\n    /**\\n     * @notice Emitted when a strategy has been executed\\n     * @param strategyId_ the id for the executed strategy\\n     * @param amountIn_ amount received from the swap\\n     * @param reInvested_  wether the strategy reinvested or not\\n     */\\n    event StrategyExecuted(\\n        uint256 indexed strategyId_,\\n        uint256 indexed amountIn_,\\n        bool reInvested_\\n    );\\n    /**\\n     * @notice Emitted when the Strategy is confirmed to be subscribed to an Executor\\n     * @param strategyId_ ID of the strategy that has been subscribed\\n     * @param executor_ Address of the Executor contract subscribed to\\n     * @param subscribed_ Wether the strategy is subscribed/unsubscribed to the executor\\n     */\\n    event StrategySubscription(\\n        uint256 indexed strategyId_,\\n        address indexed executor_,\\n        bool indexed subscribed_\\n    );\\n    /**\\n     * @notice Emitted when a new strategy has been created\\n     * @param strategyId_ Id of the newly created strategy\\n     */\\n    event StrategyCreated(uint256 indexed strategyId_);\\n    /**\\n     * @notice Emits when the reinvest address has been changed\\n     * @param newLibraryAddress The address for the Library contract\\n     */\\n    event ReinvestLibraryChanged(address indexed newLibraryAddress);\\n\\n    /**\\n     * @notice Emits when a Reinvest modula has been executed\\n     * @param strategyId_ the ID of the strategy executed\\n     * @param success Wether the reinvest was successful\\n     * @param amountReturned The amount returned by the Reinvest\\n     */\\n    event ReinvestExecuted(\\n        uint256 indexed strategyId_,\\n        bool indexed success,\\n        uint256 amountReturned\\n    );\\n\\n    /**\\n     * @notice Emited when a Reinvest is unwound\\n     * @param strategyId The ID of the strategy\\n     * @param amount The amount unwond and returned to the account\\n     * @param success If the unwind was successful\\n     */\\n    event ReinvestUnwound(\\n        uint256 indexed strategyId,\\n        uint256 amount,\\n        bool indexed success\\n    );\\n\\n    /**\\n     * @notice Triggered by the assigned executor to execute the given strategy\\n     * @param strategyId_  Id for the Strategy to be executed\\n     * @param feeAmount_ amount of the strategy amount to be paid via fee (percent)\\n     * @return If the function was successful\\n     */\\n    function Execute(\\n        uint256 strategyId_,\\n        uint16 feeAmount_\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Used by the account owner to setup a new strategy\\n     * @param newStrategy_  Strategy data for the new strategy to be created from\\n     * @param seedFunds_ amount of the base token to fund the strategy with now (optional)\\n     * @dev if no seed fund set to 0.  Any seed funds will need to be approved before this function is called\\n     * @param subscribeToExecutor_  wether to auto subscribe to the default executor\\n     * @dev the Account needs to have 5 executions worth of funds to be subscribed\\n     */\\n    function SetupStrategy(\\n        IDCADataStructures.Strategy calldata newStrategy_,\\n        uint256 seedFunds_,\\n        bool subscribeToExecutor_\\n    ) external;\\n\\n    /**\\n     * @notice Used by the account owner to subscribe the strategy to the executor\\n     * @param strategyId_ The Id of the strategy to subscribe to the executor\\n     * @dev the Account needs to have 5 executions worth of funds to be subscribed\\n     */\\n    function SubscribeStrategy(uint256 strategyId_) external;\\n\\n    /**\\n     * @notice Used by the account owner to unsubscribe the strategy to the executor\\n     * @param strategyId_ ID of the strategy to unsubscribe\\n     */\\n    function UnsubscribeStrategy(uint256 strategyId_) external;\\n\\n    /**\\n     * @notice Allows the account owner to fund the account for strategy's\\n     * @dev the funds are not strategy specific\\n     * @param token_ Address for the base token being funded\\n     * @param amount_ Amount of the token to be deposited\\n     * @dev Must approve the spend before calling this function\\n     */\\n\\n    function AddFunds(address token_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Removes a given amount from the Address of the given base token\\n     * @param token_ Address of the base token to remove from the contract\\n     * @param amount_ Amount of the base token to remove from the address\\n     */\\n    function WithdrawFunds(address token_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Removes a given amount from the Address of the given target token\\n     * @param token_ Address of the target token to remove from the account\\n     * @param amount_ Amount of the target token to remove from the account\\n     */\\n    function WithdrawSavings(address token_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Ony callable by the DCAExecutor contract to remove the strategy from the executor\\n     * @dev used when a strategy runs out of funds to execute\\n     * @param strategyId_ Id of the strategy to remove\\n     */\\n    function ExecutorDeactivate(uint256 strategyId_) external;\\n\\n    /**\\n     * @notice Allows the account owner to set, remove and update a strategy reinvest\\n     * @param strategyId_ Id of the strategy\\n     * @param reinvest_ Reinvest data to amend\\n     */\\n    function setStrategyReinvest(\\n        uint256 strategyId_,\\n        Reinvest memory reinvest_\\n    ) external;\\n\\n    /**\\n     * @notice Gets Account balance of the provided base token\\n     * @param token_ Address for the token to check\\n     * @return Amount of that token in the account\\n     */\\n    function getBaseBalance(address token_) external returns (uint256);\\n\\n    /**\\n     * @notice Gets Account balance of the provided target token\\n     * @param token_ Address for the token to check\\n     * @return Amount of that token in the account\\n     */\\n    function getTargetBalance(address token_) external returns (uint256);\\n\\n    /**\\n     *\\n     * @param strategyId_ The ID of the strategy to check\\n     * @return lastEx Timestamp of the last execution of the given strategy\\n     * @return secondsLeft Seconds left till the window for the strategys next execution\\n     * @return checkReturn\\n     */\\n    function getTimeTillWindow(\\n        uint256 strategyId_\\n    )\\n        external\\n        view\\n        returns (uint256 lastEx, uint256 secondsLeft, bool checkReturn);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/security/onlyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *       Dollar Cost Average Contracts\\n ************************************************\\n *                  V0.6\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nabstract contract OnlyAdmin is Ownable {\\n    /**\\n     * @notice Mapping of admin access addresses\\n     */\\n    mapping(address => bool) private _admins;\\n\\n    /**\\n     * @notice Modifier to check if the caller is an admin\\n     */\\n    modifier onlyAdmins() {\\n        require(\\n            _admins[_msgSender()] || (_msgSender() == owner()),\\n            \\\"OnlyAdmin : [onlyAdmins] Address is not an admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Adds an admin to the contract\\n     * @param newAdmin_ The address to add as an admin\\n     */\\n    function addAdmin(address newAdmin_) public onlyOwner {\\n        _admins[newAdmin_] = true;\\n    }\\n\\n    /**\\n     * @notice Removes an admin from the contract\\n     * @param oldAdmin_ The address to remove as an admin\\n     */\\n    function removeAdmin(address oldAdmin_) public onlyOwner {\\n        _admins[oldAdmin_] = false;\\n    }\\n\\n    /**\\n     * @notice Checks if an address is an admin\\n     * @param addressToCheck_ The address to check\\n     * @return True if the address is an admin, false otherwise\\n     */\\n    function checkIfAdmin(address addressToCheck_) public view returns (bool) {\\n        return _admins[addressToCheck_];\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/security/onlyExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *       Dollar Cost Average Contracts\\n ************************************************\\n *                  V0.6\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nabstract contract OnlyExecutor is Ownable {\\n    /**\\n     * @notice The address of the executor\\n     */\\n    address private _executorAddress;\\n\\n    /**\\n     * @notice Emitted when the executor address is changed\\n     * @param newAddress_ The new executor address\\n     */\\n    event ExecutorAddressChange(address indexed newAddress_);\\n\\n    /**\\n     * @notice Modifier to check if the caller is the executor\\n     */\\n    modifier onlyExecutor() {\\n        require(\\n            _executorAddress == msg.sender,\\n            \\\"OnlyExecutor : [onlyExecutor] Address is not an executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor for the OnlyExecutor contract\\n     * @param owner_ The owner of the contract\\n     * @param executorAddress_ The address of the executor\\n     */\\n    constructor(address owner_, address executorAddress_) Ownable(owner_) {\\n        _changeExecutorAddress(executorAddress_);\\n    }\\n\\n    /**\\n     * @notice Returns the executor address\\n     * @return The executor address\\n     */\\n    function _executor() internal view returns (address) {\\n        return _executorAddress;\\n    }\\n\\n    /**\\n     * @notice Changes the executor address\\n     * @param executorAddress_ The new executor address\\n     */\\n    function _changeExecutorAddress(address executorAddress_) internal {\\n        _executorAddress = executorAddress_;\\n        emit ExecutorAddressChange(executorAddress_);\\n    }\\n\\n    /**\\n     * @notice Removes the executor address\\n     */\\n    function removeExecutor() public onlyOwner {\\n        _changeExecutorAddress(address(0x0));\\n    }\\n\\n    function changeExecutor(address executorAddress_) public onlyOwner {\\n        _changeExecutorAddress(executorAddress_);\\n    }\\n\\n    /**\\n     * @notice Returns the executor address\\n     * @return The executor address\\n     */\\n    function getExecutorAddress() external view virtual returns (address) {\\n        return _executorAddress;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/security/onlyActive.sol\":{\"content\":\"pragma solidity ^0.8.20;\\n\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *       Dollar Cost Average Contracts\\n ************************************************\\n *                  V0.6\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nabstract contract OnlyActive {\\n    /**\\n     * @notice The active state of the contract\\n     */\\n    bool private _active = true;\\n\\n    /**\\n     * @notice Emitted when the active state of the contract is changed\\n     * @param active_ The new active state\\n     */\\n    event ContractActiveStateChange(bool indexed active_);\\n\\n    /**\\n     * @notice Error thrown when the contract is paused\\n     */\\n    error ContractIsPaused();\\n\\n    /**\\n     * @notice Modifier to check if the contract is active\\n     */\\n    modifier is_active() {\\n        if (!_active) revert ContractIsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the active state of the contract\\n     * @return isActive True if the contract is active, false otherwise\\n     */\\n    function isActive() external view virtual returns (bool) {\\n        return _active;\\n    }\\n\\n    /**\\n     * @notice Sets the active state of the contract\\n     * @param active_ The new active state\\n     */\\n    function _setActiveState(bool active_) internal {\\n        _active = active_;\\n        emit ContractActiveStateChange(active_);\\n    }\\n\\n    /**\\n     * @notice Returns the active state of the contract\\n     * @return True if the contract is active, false otherwise\\n     */\\n    function _getActiveState() internal view returns (bool) {\\n        return _active;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/library/Intervals.sol\":{\"content\":\"pragma solidity ^0.8.20;\\n\\nimport {IDCADataStructures} from \\\"../interfaces/IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nlibrary Intervals {\\n    // Constants for interval block amounts\\n    uint256 constant ONEMINUTE = 1 minutes; // ONLY FOR TESTING\\n    uint256 constant ONEHOUR = 1 hours;\\n    uint256 constant ONEDAY = 1 days;\\n    uint256 constant TWODAYS = 2 * ONEDAY;\\n    uint256 constant THREEDAYS = 3 * ONEDAY;\\n    uint256 constant ONEWEEK = 1 weeks;\\n    uint256 constant ONEMONTH = 4 weeks;\\n\\n    /**\\n     * @notice Checks if the interval is in the current execution window\\n     * @param interval_ The interval to check\\n     * @param lastExecution_ The last execution block number\\n     * @return True if the interval is in the current execution window, false otherwise\\n     */\\n    function isInWindow(\\n        IDCADataStructures.Interval interval_,\\n        uint256 lastExecution_\\n    ) internal view returns (bool) {\\n        return secondsLeftTillWindow(interval_, lastExecution_) == 0;\\n    }\\n\\n    /**\\n     * @notice Function to retrieve the block amount for a given interval\\n     * @param interval_ {Interval} The interval key\\n     * @return Amount of blocks to interval\\n     */\\n    function getIntervalLength(\\n        IDCADataStructures.Interval interval_\\n    ) internal pure returns (uint256) {\\n        if (interval_ == IDCADataStructures.Interval.TestIntervalOneMin)\\n            return ONEMINUTE;\\n        if (interval_ == IDCADataStructures.Interval.TestIntervalFiveMins)\\n            return ONEMINUTE * 5;\\n        if (interval_ == IDCADataStructures.Interval.OneDay) return ONEDAY;\\n        if (interval_ == IDCADataStructures.Interval.TwoDays) return TWODAYS;\\n        if (interval_ == IDCADataStructures.Interval.ThreeDays)\\n            return THREEDAYS;\\n        if (interval_ == IDCADataStructures.Interval.OneWeek) return ONEWEEK;\\n        if (interval_ == IDCADataStructures.Interval.TwoWeeks)\\n            return ONEWEEK * 2;\\n\\n        if (interval_ == IDCADataStructures.Interval.OneMonth) return ONEMONTH;\\n        revert(\\\"DCAStrategy : Invalid interval\\\");\\n    }\\n\\n    /**\\n     * @notice check how many seconds are left till execution window\\n     * @param lastExecution_ {uint256} last block the strategy was executed on\\n     * @param interval_ {Interval} Interval key to work from\\n     * @return {uint256} time left till window is open in seconds\\n     */\\n    function secondsLeftTillWindow(\\n        IDCADataStructures.Interval interval_,\\n        uint256 lastExecution_\\n    ) internal view returns (uint256) {\\n        uint256 intervalEnd = lastExecution_ + getIntervalLength(interval_);\\n        return\\n            block.timestamp > intervalEnd ? 0 : intervalEnd - block.timestamp;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/library/Strategys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IDCADataStructures.sol\\\";\\nimport {Intervals} from \\\"./Intervals.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nlibrary Strategies {\\n    using Intervals for uint8;\\n    /**\\n     *\\n     * @param strategy the strategy object to check\\n     * @return {bool} if the Strategy data is valid\\n     */\\n    function isValid(\\n        IDCADataStructures.Strategy memory strategy\\n    ) internal pure returns (bool) {\\n        // Define the maximum valid enum value\\n        uint maxIntervalValue = uint(IDCADataStructures.Interval.OneMonth); // Assuming 'OneMonth' is the last in your enum\\n\\n        // Check interval is within the range of defined enum values\\n        bool isValidInterval = uint(strategy.interval) <= maxIntervalValue;\\n\\n        return (strategy.accountAddress != address(0) &&\\n            strategy.baseToken.tokenAddress != address(0) &&\\n            strategy.amount > 0 &&\\n            isValidInterval);\\n    }\\n\\n    function isAccountAddress(\\n        IDCADataStructures.Strategy memory strategy_,\\n        address accountAddress_\\n    ) internal pure returns (bool) {\\n        return strategy_.accountAddress == accountAddress_;\\n    }\\n\\n    function isActive(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (bool) {\\n        return strategy_.active;\\n    }\\n\\n    function baseAddress(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (address) {\\n        return strategy_.baseToken.tokenAddress;\\n    }\\n\\n    function targetAddress(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (address) {\\n        return strategy_.targetToken.tokenAddress;\\n    }\\n\\n    function getTokenAddresses(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (address, address) {\\n        return (\\n            strategy_.baseToken.tokenAddress,\\n            strategy_.targetToken.tokenAddress\\n        );\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"versionPragma\":\">=0.4.22 <0.9.0\"},\"contracts/library/Fees.sol\":{\"content\":\"pragma solidity ^0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {IDCADataStructures} from \\\"../interfaces/IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nlibrary Fee {\\n    /**\\n     * @notice Function to calculate fee based on total fee percentage\\n     * @param feeAmount_ Total fee percentage (100% represented as 10000)\\n     * @param amount_ Total amount from which to calculate the fee\\n     * @return {uint256} Fee amount to be deducted from the total amount\\n     */\\n    function getFee(\\n        uint16 feeAmount_,\\n        uint256 amount_\\n    ) internal pure returns (uint256) {\\n        return calculatePercentage(feeAmount_, amount_);\\n    }\\n    /**\\n     * @dev\\n     * @param total_ total amount of base token being executed\\n     * @param fee_ the fee structure\\n     * @return executorFee\\n     * @return computingFee\\n     * @return adminFee\\n     */\\n    function getFeeSplit(\\n        IDCADataStructures.FeeDistribution storage fee_,\\n        uint256 amount_\\n    )\\n        internal\\n        view\\n        returns (uint256 executorFee, uint256 computingFee, uint256 adminFee)\\n    {\\n        executorFee = calculatePercentage(fee_.amountToExecutor, amount_);\\n        computingFee = calculatePercentage(fee_.amountToComputing, amount_);\\n        adminFee = calculatePercentage(fee_.amountToAdmin, amount_);\\n    }\\n\\n    /**\\n     * @notice Function to c alculate the percentage of an amount\\n     * @param percent_ Percentage to calculate (1% represented as 100, 0.01% as 1, and 100% as 10000)\\n     * @param amount_ Total amount from which to calculate the percentage\\n     * @return {uint256} The calculated percentage of the amount\\n     */\\n    function calculatePercentage(\\n        uint16 percent_,\\n        uint256 amount_\\n    ) internal pure returns (uint256) {\\n        if (percent_ < 1) return 0;\\n        uint256 percentageAmount = (amount_ * percent_) / 10000;\\n        return percentageAmount;\\n    }\\n\\n    /**\\n     * @dev gets the percent of each fee amount in the active fee structure\\n     * @param fee_ tettheheh fee strucutre\\n     * @return totalFee\\n     * @return executorFee\\n     * @return computingFee\\n     * @return adminFee\\n     */\\n    function getFeeAmounts(\\n        IDCADataStructures.FeeDistribution calldata fee_\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint16 totalFee,\\n            uint16 executorFee,\\n            uint16 computingFee,\\n            uint16 adminFee\\n        )\\n    {\\n        return (\\n            fee_.feeAmount,\\n            fee_.amountToExecutor,\\n            fee_.amountToComputing,\\n            fee_.amountToAdmin\\n        );\\n    }\\n    /**\\n     * @dev Check that the split percentages add upto 100% (10,000)\\n     * @param fee_ fee data set to check\\n     * @return {bool}\\n     */\\n\\n    function checkPercentTotal(\\n        IDCADataStructures.FeeDistribution memory fee_\\n    ) internal pure returns (bool) {\\n        return\\n            fee_.amountToAdmin +\\n                fee_.amountToExecutor +\\n                fee_.amountToComputing ==\\n            10000;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}",
  "address": "0x77A7C33BA2EffC18863e400A23E44f6D360C4d47",
  "bytecode": "0x60806040526002805460ff60a01b1916600160a01b1790553480156200002457600080fd5b5060405162002c3938038062002c3983398101604081905262000047916200034b565b338181806200007157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200007c816200009e565b506200008881620000ee565b506200009690508262000138565b50506200046e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f7d5b70f43ce014e6429a5a008d4a39b49e0d74afc4eec87d6ecf23bee44a6f5090600090a250565b62000142620002b4565b6200014d81620002e5565b620001c3576040805162461bcd60e51b81526020600482015260248101919091527f4443414578656375746f72203a205b736574466565446174615d20546f74616c60448201527f2073706c69742070657263656e747320646f6e277420657175616c2031303025606482015260840162000068565b80516007805460208401516040808601516060870151608088015161ffff97881663ffffffff199096169590951762010000948816949094029390931763ffffffff60201b19166401000000009187169190910261ffff60301b1916176601000000000000959092169490940217600160401b600160e01b031916680100000000000000006001600160a01b03928316021790915560a0830151600880546001600160a01b031990811692841692909217905560c0840151600980549092169216919091179055517f79191c2cedeb094d0c40d3af7d049180bc97b30d8d9b937628db6632e013251b90600090a150565b6000546001600160a01b03163314620002e35760405163118cdaa760e01b815233600482015260240162000068565b565b6020810151815160408301516000929162000300916200043d565b6200030c91906200043d565b61ffff16612710149050919050565b805161ffff811681146200032e57600080fd5b919050565b80516001600160a01b03811681146200032e57600080fd5b6000808284036101008112156200036157600080fd5b60e08112156200037057600080fd5b5060405160e081016001600160401b0381118282101715620003a257634e487b7160e01b600052604160045260246000fd5b604052620003b0846200031b565b8152620003c0602085016200031b565b6020820152620003d3604085016200031b565b6040820152620003e6606085016200031b565b6060820152620003f96080850162000333565b60808201526200040c60a0850162000333565b60a08201526200041f60c0850162000333565b60c082015291506200043460e0840162000333565b90509250929050565b61ffff8181168382160190808211156200046757634e487b7160e01b600052601160045260246000fd5b5092915050565b6127bb806200047e6000396000f3fe60806040526004361061018f5760003560e01c80637b260087116100d6578063bfe22a011161007f578063c7ba6a0011610059578063c7ba6a001461063f578063d9fa9c1a1461065f578063f2fde38b146106a5576101e1565b8063bfe22a01146105c2578063c4cf87f0146105e2578063c55cfc7414610602576101e1565b80639665b658116100b05780639665b65814610562578063a8c2ec0314610582578063ab6319b5146105a2576101e1565b80637b260087146104f757806389c8c5c9146105175780638da5cb5b14610537576101e1565b80633adee794116101385780636745b3e1116101125780636745b3e1146104a257806370480275146104c2578063715018a6146104e2576101e1565b80633adee7941461044e5780633c7c46dc1461046d5780634357274714610482576101e1565b806322f3e2d41161016957806322f3e2d414610295578063256a4935146102c5578063350157a814610414576101e1565b80630853ac1c146102295780631785f53c146102405780631b29b4fc14610260576101e1565b366101e15760405162461bcd60e51b815260206004820152601760248201527f4443414578656375746f72203a205b726563656976655d00000000000000000060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601860248201527f4443414578656375746f72203a205b66616c6c6261636b5d000000000000000060448201526064016101d8565b34801561023557600080fd5b5061023e6106c5565b005b34801561024c57600080fd5b5061023e61025b366004612042565b6106d9565b34801561026c57600080fd5b5061028061027b36600461206c565b61070f565b60405190151581526020015b60405180910390f35b3480156102a157600080fd5b5060025474010000000000000000000000000000000000000000900460ff16610280565b3480156102d157600080fd5b506103946040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260075461ffff80821683526201000082048116602084015264010000000082048116938301939093526601000000000000810490921660608201526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166080830152600854811660a08301526009541660c082015290565b60405161028c9190600060e08201905061ffff80845116835280602085015116602084015280604085015116604084015280606085015116606084015250608083015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b34801561042057600080fd5b50610429610752565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028c565b34801561045a57600080fd5b50600b545b60405190815260200161028c565b34801561047957600080fd5b50600a5461045f565b34801561048e57600080fd5b5061023e61049d366004612087565b610778565b3480156104ae57600080fd5b5061023e6104bd366004612087565b6109b9565b3480156104ce57600080fd5b5061023e6104dd366004612042565b610b20565b3480156104ee57600080fd5b5061023e610b5c565b34801561050357600080fd5b5061023e610512366004612125565b610b6e565b34801561052357600080fd5b5061045f61053236600461206c565b610d6b565b34801561054357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610429565b34801561056e57600080fd5b5061023e61057d366004612042565b610daa565b34801561058e57600080fd5b5061023e61059d366004612042565b610dbe565b3480156105ae57600080fd5b5061023e6105bd3660046121d5565b610fda565b3480156105ce57600080fd5b5061023e6105dd36600461222a565b61128a565b3480156105ee57600080fd5b5061023e6105fd366004612247565b61133a565b34801561060e57600080fd5b5061062261061d36600461227e565b61142c565b60408051938452602084019290925215159082015260600161028c565b34801561064b57600080fd5b5061023e61065a366004612087565b6114ba565b34801561066b57600080fd5b5061028061067a366004612042565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b3480156106b157600080fd5b5061023e6106c0366004612042565b61177a565b6106cd6117db565b6106d7600061182e565b565b6106e16117db565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020805460ff19169055565b600060036000836007811115610727576107276122a8565b6007811115610738576107386122a8565b815260208101919091526040016000205460ff1692915050565b600061077360025473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60025473ffffffffffffffffffffffffffffffffffffffff1633146108055760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff166108ab5760405162461bcd60e51b815260206004820152603c60248201527f4443414578656375746f723a205b466f726365556e7375627363726962655d2060448201527f4163636f756e7420616c726561647920756e737562736372696265640000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260056020908152604080832086845290915290819020805460ff19169055517f0283e5fa00000000000000000000000000000000000000000000000000000000815260048101849052630283e5fa90602401600060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b5050600a805492509050600061095c83612306565b919050555060001515828473ffffffffffffffffffffffffffffffffffffffff167f819287b2b7cff41aee38a60c1c803e9ced77b974378cf876e7a3451c1a56a921846040516109ac919061233b565b60405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff841614610a6a5760405162461bcd60e51b815260206004820152604160248201527f4443416578656375746f72203a205b556e7375627363726962655d204f6e6c7960448201527f204163636f756e7420436f6e74726163742063616e20756e737562736372696260648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff16610b105760405162461bcd60e51b815260206004820152603760248201527f4443416578656375746f72203a205b5375627363726962655d2053747261746560448201527f677920616c726561647920756e7375627363726962656400000000000000000060648201526084016101d8565b610b1b83838361189d565b505050565b610b286117db565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208190526040909120805460ff19169091179055565b610b646117db565b6106d7600061192f565b610b766117db565b610b7f816119a4565b610bf3576040805162461bcd60e51b81526020600482015260248101919091527f4443414578656375746f72203a205b736574466565446174615d20546f74616c60448201527f2073706c69742070657263656e747320646f6e277420657175616c203130302560648201526084016101d8565b80516007805460208401516040808601516060870151608088015161ffff9788167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909616959095176201000094881694909402939093177fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff16640100000000918716919091027fffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffff161766010000000000009590921694909402177fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff928316021790915560a0830151600880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811692841692909217905560c0840151600980549092169216919091179055517f79191c2cedeb094d0c40d3af7d049180bc97b30d8d9b937628db6632e013251b90600090a150565b600060046000836007811115610d8357610d836122a8565b6007811115610d9457610d946122a8565b8152602001908152602001600020549050919050565b610db26117db565b610dbb8161182e565b50565b3360009081526001602052604090205460ff1680610df3575060005473ffffffffffffffffffffffffffffffffffffffff1633145b610e655760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef8919061237c565b90508015610b1b5760008080610f0f6007856119d6565b6007549295509093509150610f479068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff168487611a2a565b600854610f6b9073ffffffffffffffffffffffffffffffffffffffff168387611a2a565b600954610f8f9073ffffffffffffffffffffffffffffffffffffffff168287611a2a565b604051849073ffffffffffffffffffffffffffffffffffffffff8816907f63be20cc905d5ba0cf65db405c4999f99f2575e521875f13a8009d6eed7a09d990600090a3505050505050565b60025474010000000000000000000000000000000000000000900460ff1661102e576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61104061103a82612583565b33611ac3565b6110b25760405162461bcd60e51b815260206004820152603f60248201527f4443416578656375746f72203a205b5375627363726962655d204f6e6c79204160448201527f63636f756e7420436f6e74726163742063616e20756e7375627363726962650060648201526084016101d8565b6110c36110be82612583565b611ae7565b6111355760405162461bcd60e51b815260206004820152602a60248201527f4443416578656375746f72203a205b5375627363726962655d20496e76616c6960448201527f642073747261746567790000000000000000000000000000000000000000000060648201526084016101d8565b61114861027b608083016060840161206c565b6111ba5760405162461bcd60e51b815260206004820152602d60248201527f4443416578656375746f72203a205b5375627363726962655d20496e7465727660448201527f616c204e6f74204163746976650000000000000000000000000000000000000060648201526084016101d8565b600560006111cb6020840184612042565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812060a0850135825290925290205460ff16156112795760405162461bcd60e51b815260206004820152603560248201527f4443416578656375746f72203a205b5375627363726962655d2053747261746560448201527f677920616c72656164792073756273637269626564000000000000000000000060648201526084016101d8565b610dbb61128582612583565b611b6d565b3360009081526001602052604090205460ff16806112bf575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6113315760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b610dbb81611c71565b3360009081526001602052604090205460ff168061136f575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6113e15760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b80600360008460078111156113f8576113f86122a8565b6007811115611409576114096122a8565b81526020810191909152604001600020805460ff19169115159190911790555050565b60008060008473ffffffffffffffffffffffffffffffffffffffff16633887d28b856040518263ffffffff1660e01b815260040161146c91815260200190565b606060405180830381865afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad919061265d565b9250925092509250925092565b60025473ffffffffffffffffffffffffffffffffffffffff1633146115475760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016101d8565b60025474010000000000000000000000000000000000000000900460ff1661159b576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff166116415760405162461bcd60e51b815260206004820152602f60248201527f4443416578656375746f72203a205b457865637574655d20537472617465677960448201527f206e6f742073756273637269626564000000000000000000000000000000000060648201526084016101d8565b61164a8161070f565b6116bc5760405162461bcd60e51b815260206004820152602b60248201527f4443416578656375746f72203a205b457865637574655d20496e74657276616c60448201527f204e6f742041637469766500000000000000000000000000000000000000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083208584529091529020546116f8908290611ce6565b61176a5760405162461bcd60e51b815260206004820152602f60248201527f4443416578656375746f72203a205b457865637574655d204e6f7420696e206560448201527f7865637574696f6e2077696e646f77000000000000000000000000000000000060648201526084016101d8565b6117748383611cfa565b50505050565b6117826117db565b73ffffffffffffffffffffffffffffffffffffffff81166117d2576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016101d8565b610dbb8161192f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d7576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016101d8565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f7d5b70f43ce014e6429a5a008d4a39b49e0d74afc4eec87d6ecf23bee44a6f5090600090a250565b600a80549060006118ad83612306565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526005602090815260408083208584529091528120805460ff191690556004908260078111156118ff576118ff6122a8565b6007811115611910576119106122a8565b8152602001908152602001600020600081548092919061095c90612306565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602081015181516040830151600092916119bd91612696565b6119c79190612696565b61ffff16612710149050919050565b8154600090819081906119ed9061ffff1685611e40565b8554909350611a069062010000900461ffff1685611e40565b8554909250611a2190640100000000900461ffff1685611e40565b90509250925092565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af1158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177491906126b8565b815173ffffffffffffffffffffffffffffffffffffffff8281169116145b92915050565b6000806007905060008184606001516007811115611b0757611b076122a8565b8551911015915073ffffffffffffffffffffffffffffffffffffffff1615801590611b4c575060208401515173ffffffffffffffffffffffffffffffffffffffff1615155b8015611b5c575060008460800151115b8015611b655750805b949350505050565b805173ffffffffffffffffffffffffffffffffffffffff16600090815260056020908152604080832060a085015184529091528120805460ff19166001179055600a805491611bbb836126d5565b91905055506004600082606001516007811115611bda57611bda6122a8565b6007811115611beb57611beb6122a8565b81526020019081526020016000206000815480929190611c0a906126d5565b9190505550600115158160a00151826000015173ffffffffffffffffffffffffffffffffffffffff167f819287b2b7cff41aee38a60c1c803e9ced77b974378cf876e7a3451c1a56a9218460600151604051611c66919061233b565b60405180910390a450565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000831515908102919091179091556040517fbdf1a3ee1d5eb15aa60ae1a81488107759732ead44999c8c807575100def058b90600090a250565b6000611cf28383611e74565b159392505050565b6007546040517fca4c8b3100000000000000000000000000000000000000000000000000000000815260048101839052660100000000000090910461ffff166024820152600090819073ffffffffffffffffffffffffffffffffffffffff85169063ca4c8b31906044016020604051808303816000875af1158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da791906126b8565b90508015611e395773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208684529091528120429055600b805491611df0836126d5565b9091555050604051839073ffffffffffffffffffffffffffffffffffffffff8616907fb89af9bc8aa44a0bb15ecf17cc88021e8a65196963bed8e33aa51c08b1eca0ef90600090a35b9392505050565b600060018361ffff161015611e5757506000611ae1565b6000612710611e6a61ffff86168561270d565b611b659190612724565b600080611e8084611eac565b611e8a908461275f565b9050804211611ea257611e9d4282612772565b611b65565b6000949350505050565b600080826007811115611ec157611ec16122a8565b03611ece5750603c919050565b6001826007811115611ee257611ee26122a8565b03611ef357611ae1603c600561270d565b6002826007811115611f0757611f076122a8565b03611f16575062015180919050565b6003826007811115611f2a57611f2a6122a8565b03611f3d57611ae162015180600261270d565b6004826007811115611f5157611f516122a8565b03611f6457611ae162015180600361270d565b6005826007811115611f7857611f786122a8565b03611f87575062093a80919050565b6006826007811115611f9b57611f9b6122a8565b03611fae57611ae162093a80600261270d565b6007826007811115611fc257611fc26122a8565b03611fd157506224ea00919050565b60405162461bcd60e51b815260206004820152601e60248201527f4443415374726174656779203a20496e76616c696420696e74657276616c000060448201526064016101d8565b803573ffffffffffffffffffffffffffffffffffffffff8116811461203d57600080fd5b919050565b60006020828403121561205457600080fd5b611e3982612019565b80356008811061203d57600080fd5b60006020828403121561207e57600080fd5b611e398261205d565b60008060006060848603121561209c57600080fd5b6120a584612019565b925060208401359150611a216040850161205d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561210d5761210d6120ba565b60405290565b803561ffff8116811461203d57600080fd5b600060e0828403121561213757600080fd5b60405160e0810181811067ffffffffffffffff8211171561215a5761215a6120ba565b60405261216683612113565b815261217460208401612113565b602082015261218560408401612113565b604082015261219660608401612113565b60608201526121a760808401612019565b60808201526121b860a08401612019565b60a08201526121c960c08401612019565b60c08201529392505050565b6000602082840312156121e757600080fd5b813567ffffffffffffffff8111156121fe57600080fd5b82016101008185031215611e3957600080fd5b8015158114610dbb57600080fd5b803561203d81612211565b60006020828403121561223c57600080fd5b8135611e3981612211565b6000806040838503121561225a57600080fd5b6122638361205d565b9150602083013561227381612211565b809150509250929050565b6000806040838503121561229157600080fd5b61229a83612019565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600081612315576123156122d7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6020810160088310612376577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60006020828403121561238e57600080fd5b5051919050565b803560ff8116811461203d57600080fd5b600067ffffffffffffffff808411156123c1576123c16120ba565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612407576124076120ba565b8160405280935085815286868601111561242057600080fd5b858560208301376000602087830101525050509392505050565b60006060828403121561244c57600080fd5b6040516060810167ffffffffffffffff8282108183111715612470576124706120ba565b8160405282935061248085612019565b835261248e60208601612395565b602084015260408501359150808211156124a757600080fd5b508301601f810185136124b957600080fd5b6124c8858235602084016123a6565b6040830152505092915050565b6000608082840312156124e757600080fd5b6040516080810167ffffffffffffffff828210818311171561250b5761250b6120ba565b81604052829350843591508082111561252357600080fd5b508301601f8101851361253557600080fd5b612544858235602084016123a6565b825250602083013561255581612211565b602082015261256660408401612395565b604082015261257760608401612019565b60608201525092915050565b6000610100823603121561259657600080fd5b61259e6120e9565b6125a783612019565b8152602083013567ffffffffffffffff808211156125c457600080fd5b6125d03683870161243a565b602084015260408501359150808211156125e957600080fd5b6125f53683870161243a565b60408401526126066060860161205d565b60608401526080850135608084015260a085013560a084015261262b60c0860161221f565b60c084015260e085013591508082111561264457600080fd5b50612651368286016124d5565b60e08301525092915050565b60008060006060848603121561267257600080fd5b8351925060208401519150604084015161268b81612211565b809150509250925092565b61ffff8181168382160190808211156126b1576126b16122d7565b5092915050565b6000602082840312156126ca57600080fd5b8151611e3981612211565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612706576127066122d7565b5060010190565b8082028115828204841417611ae157611ae16122d7565b60008261275a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820180821115611ae157611ae16122d7565b81810381811115611ae157611ae16122d756fea2646970667358221220be5b825fe7cd3e2a99f6de87bc7623faa8152be31eeb466482fd14135207182a64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80637b260087116100d6578063bfe22a011161007f578063c7ba6a0011610059578063c7ba6a001461063f578063d9fa9c1a1461065f578063f2fde38b146106a5576101e1565b8063bfe22a01146105c2578063c4cf87f0146105e2578063c55cfc7414610602576101e1565b80639665b658116100b05780639665b65814610562578063a8c2ec0314610582578063ab6319b5146105a2576101e1565b80637b260087146104f757806389c8c5c9146105175780638da5cb5b14610537576101e1565b80633adee794116101385780636745b3e1116101125780636745b3e1146104a257806370480275146104c2578063715018a6146104e2576101e1565b80633adee7941461044e5780633c7c46dc1461046d5780634357274714610482576101e1565b806322f3e2d41161016957806322f3e2d414610295578063256a4935146102c5578063350157a814610414576101e1565b80630853ac1c146102295780631785f53c146102405780631b29b4fc14610260576101e1565b366101e15760405162461bcd60e51b815260206004820152601760248201527f4443414578656375746f72203a205b726563656976655d00000000000000000060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601860248201527f4443414578656375746f72203a205b66616c6c6261636b5d000000000000000060448201526064016101d8565b34801561023557600080fd5b5061023e6106c5565b005b34801561024c57600080fd5b5061023e61025b366004612042565b6106d9565b34801561026c57600080fd5b5061028061027b36600461206c565b61070f565b60405190151581526020015b60405180910390f35b3480156102a157600080fd5b5060025474010000000000000000000000000000000000000000900460ff16610280565b3480156102d157600080fd5b506103946040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260075461ffff80821683526201000082048116602084015264010000000082048116938301939093526601000000000000810490921660608201526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166080830152600854811660a08301526009541660c082015290565b60405161028c9190600060e08201905061ffff80845116835280602085015116602084015280604085015116604084015280606085015116606084015250608083015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b34801561042057600080fd5b50610429610752565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028c565b34801561045a57600080fd5b50600b545b60405190815260200161028c565b34801561047957600080fd5b50600a5461045f565b34801561048e57600080fd5b5061023e61049d366004612087565b610778565b3480156104ae57600080fd5b5061023e6104bd366004612087565b6109b9565b3480156104ce57600080fd5b5061023e6104dd366004612042565b610b20565b3480156104ee57600080fd5b5061023e610b5c565b34801561050357600080fd5b5061023e610512366004612125565b610b6e565b34801561052357600080fd5b5061045f61053236600461206c565b610d6b565b34801561054357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610429565b34801561056e57600080fd5b5061023e61057d366004612042565b610daa565b34801561058e57600080fd5b5061023e61059d366004612042565b610dbe565b3480156105ae57600080fd5b5061023e6105bd3660046121d5565b610fda565b3480156105ce57600080fd5b5061023e6105dd36600461222a565b61128a565b3480156105ee57600080fd5b5061023e6105fd366004612247565b61133a565b34801561060e57600080fd5b5061062261061d36600461227e565b61142c565b60408051938452602084019290925215159082015260600161028c565b34801561064b57600080fd5b5061023e61065a366004612087565b6114ba565b34801561066b57600080fd5b5061028061067a366004612042565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b3480156106b157600080fd5b5061023e6106c0366004612042565b61177a565b6106cd6117db565b6106d7600061182e565b565b6106e16117db565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020805460ff19169055565b600060036000836007811115610727576107276122a8565b6007811115610738576107386122a8565b815260208101919091526040016000205460ff1692915050565b600061077360025473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60025473ffffffffffffffffffffffffffffffffffffffff1633146108055760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff166108ab5760405162461bcd60e51b815260206004820152603c60248201527f4443414578656375746f723a205b466f726365556e7375627363726962655d2060448201527f4163636f756e7420616c726561647920756e737562736372696265640000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260056020908152604080832086845290915290819020805460ff19169055517f0283e5fa00000000000000000000000000000000000000000000000000000000815260048101849052630283e5fa90602401600060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b5050600a805492509050600061095c83612306565b919050555060001515828473ffffffffffffffffffffffffffffffffffffffff167f819287b2b7cff41aee38a60c1c803e9ced77b974378cf876e7a3451c1a56a921846040516109ac919061233b565b60405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff841614610a6a5760405162461bcd60e51b815260206004820152604160248201527f4443416578656375746f72203a205b556e7375627363726962655d204f6e6c7960448201527f204163636f756e7420436f6e74726163742063616e20756e737562736372696260648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff16610b105760405162461bcd60e51b815260206004820152603760248201527f4443416578656375746f72203a205b5375627363726962655d2053747261746560448201527f677920616c726561647920756e7375627363726962656400000000000000000060648201526084016101d8565b610b1b83838361189d565b505050565b610b286117db565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208190526040909120805460ff19169091179055565b610b646117db565b6106d7600061192f565b610b766117db565b610b7f816119a4565b610bf3576040805162461bcd60e51b81526020600482015260248101919091527f4443414578656375746f72203a205b736574466565446174615d20546f74616c60448201527f2073706c69742070657263656e747320646f6e277420657175616c203130302560648201526084016101d8565b80516007805460208401516040808601516060870151608088015161ffff9788167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909616959095176201000094881694909402939093177fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff16640100000000918716919091027fffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffff161766010000000000009590921694909402177fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff928316021790915560a0830151600880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811692841692909217905560c0840151600980549092169216919091179055517f79191c2cedeb094d0c40d3af7d049180bc97b30d8d9b937628db6632e013251b90600090a150565b600060046000836007811115610d8357610d836122a8565b6007811115610d9457610d946122a8565b8152602001908152602001600020549050919050565b610db26117db565b610dbb8161182e565b50565b3360009081526001602052604090205460ff1680610df3575060005473ffffffffffffffffffffffffffffffffffffffff1633145b610e655760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef8919061237c565b90508015610b1b5760008080610f0f6007856119d6565b6007549295509093509150610f479068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff168487611a2a565b600854610f6b9073ffffffffffffffffffffffffffffffffffffffff168387611a2a565b600954610f8f9073ffffffffffffffffffffffffffffffffffffffff168287611a2a565b604051849073ffffffffffffffffffffffffffffffffffffffff8816907f63be20cc905d5ba0cf65db405c4999f99f2575e521875f13a8009d6eed7a09d990600090a3505050505050565b60025474010000000000000000000000000000000000000000900460ff1661102e576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61104061103a82612583565b33611ac3565b6110b25760405162461bcd60e51b815260206004820152603f60248201527f4443416578656375746f72203a205b5375627363726962655d204f6e6c79204160448201527f63636f756e7420436f6e74726163742063616e20756e7375627363726962650060648201526084016101d8565b6110c36110be82612583565b611ae7565b6111355760405162461bcd60e51b815260206004820152602a60248201527f4443416578656375746f72203a205b5375627363726962655d20496e76616c6960448201527f642073747261746567790000000000000000000000000000000000000000000060648201526084016101d8565b61114861027b608083016060840161206c565b6111ba5760405162461bcd60e51b815260206004820152602d60248201527f4443416578656375746f72203a205b5375627363726962655d20496e7465727660448201527f616c204e6f74204163746976650000000000000000000000000000000000000060648201526084016101d8565b600560006111cb6020840184612042565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812060a0850135825290925290205460ff16156112795760405162461bcd60e51b815260206004820152603560248201527f4443416578656375746f72203a205b5375627363726962655d2053747261746560448201527f677920616c72656164792073756273637269626564000000000000000000000060648201526084016101d8565b610dbb61128582612583565b611b6d565b3360009081526001602052604090205460ff16806112bf575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6113315760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b610dbb81611c71565b3360009081526001602052604090205460ff168061136f575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6113e15760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b80600360008460078111156113f8576113f86122a8565b6007811115611409576114096122a8565b81526020810191909152604001600020805460ff19169115159190911790555050565b60008060008473ffffffffffffffffffffffffffffffffffffffff16633887d28b856040518263ffffffff1660e01b815260040161146c91815260200190565b606060405180830381865afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad919061265d565b9250925092509250925092565b60025473ffffffffffffffffffffffffffffffffffffffff1633146115475760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016101d8565b60025474010000000000000000000000000000000000000000900460ff1661159b576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff166116415760405162461bcd60e51b815260206004820152602f60248201527f4443416578656375746f72203a205b457865637574655d20537472617465677960448201527f206e6f742073756273637269626564000000000000000000000000000000000060648201526084016101d8565b61164a8161070f565b6116bc5760405162461bcd60e51b815260206004820152602b60248201527f4443416578656375746f72203a205b457865637574655d20496e74657276616c60448201527f204e6f742041637469766500000000000000000000000000000000000000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083208584529091529020546116f8908290611ce6565b61176a5760405162461bcd60e51b815260206004820152602f60248201527f4443416578656375746f72203a205b457865637574655d204e6f7420696e206560448201527f7865637574696f6e2077696e646f77000000000000000000000000000000000060648201526084016101d8565b6117748383611cfa565b50505050565b6117826117db565b73ffffffffffffffffffffffffffffffffffffffff81166117d2576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016101d8565b610dbb8161192f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d7576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016101d8565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f7d5b70f43ce014e6429a5a008d4a39b49e0d74afc4eec87d6ecf23bee44a6f5090600090a250565b600a80549060006118ad83612306565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526005602090815260408083208584529091528120805460ff191690556004908260078111156118ff576118ff6122a8565b6007811115611910576119106122a8565b8152602001908152602001600020600081548092919061095c90612306565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602081015181516040830151600092916119bd91612696565b6119c79190612696565b61ffff16612710149050919050565b8154600090819081906119ed9061ffff1685611e40565b8554909350611a069062010000900461ffff1685611e40565b8554909250611a2190640100000000900461ffff1685611e40565b90509250925092565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af1158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177491906126b8565b815173ffffffffffffffffffffffffffffffffffffffff8281169116145b92915050565b6000806007905060008184606001516007811115611b0757611b076122a8565b8551911015915073ffffffffffffffffffffffffffffffffffffffff1615801590611b4c575060208401515173ffffffffffffffffffffffffffffffffffffffff1615155b8015611b5c575060008460800151115b8015611b655750805b949350505050565b805173ffffffffffffffffffffffffffffffffffffffff16600090815260056020908152604080832060a085015184529091528120805460ff19166001179055600a805491611bbb836126d5565b91905055506004600082606001516007811115611bda57611bda6122a8565b6007811115611beb57611beb6122a8565b81526020019081526020016000206000815480929190611c0a906126d5565b9190505550600115158160a00151826000015173ffffffffffffffffffffffffffffffffffffffff167f819287b2b7cff41aee38a60c1c803e9ced77b974378cf876e7a3451c1a56a9218460600151604051611c66919061233b565b60405180910390a450565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000831515908102919091179091556040517fbdf1a3ee1d5eb15aa60ae1a81488107759732ead44999c8c807575100def058b90600090a250565b6000611cf28383611e74565b159392505050565b6007546040517fca4c8b3100000000000000000000000000000000000000000000000000000000815260048101839052660100000000000090910461ffff166024820152600090819073ffffffffffffffffffffffffffffffffffffffff85169063ca4c8b31906044016020604051808303816000875af1158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da791906126b8565b90508015611e395773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208684529091528120429055600b805491611df0836126d5565b9091555050604051839073ffffffffffffffffffffffffffffffffffffffff8616907fb89af9bc8aa44a0bb15ecf17cc88021e8a65196963bed8e33aa51c08b1eca0ef90600090a35b9392505050565b600060018361ffff161015611e5757506000611ae1565b6000612710611e6a61ffff86168561270d565b611b659190612724565b600080611e8084611eac565b611e8a908461275f565b9050804211611ea257611e9d4282612772565b611b65565b6000949350505050565b600080826007811115611ec157611ec16122a8565b03611ece5750603c919050565b6001826007811115611ee257611ee26122a8565b03611ef357611ae1603c600561270d565b6002826007811115611f0757611f076122a8565b03611f16575062015180919050565b6003826007811115611f2a57611f2a6122a8565b03611f3d57611ae162015180600261270d565b6004826007811115611f5157611f516122a8565b03611f6457611ae162015180600361270d565b6005826007811115611f7857611f786122a8565b03611f87575062093a80919050565b6006826007811115611f9b57611f9b6122a8565b03611fae57611ae162093a80600261270d565b6007826007811115611fc257611fc26122a8565b03611fd157506224ea00919050565b60405162461bcd60e51b815260206004820152601e60248201527f4443415374726174656779203a20496e76616c696420696e74657276616c000060448201526064016101d8565b803573ffffffffffffffffffffffffffffffffffffffff8116811461203d57600080fd5b919050565b60006020828403121561205457600080fd5b611e3982612019565b80356008811061203d57600080fd5b60006020828403121561207e57600080fd5b611e398261205d565b60008060006060848603121561209c57600080fd5b6120a584612019565b925060208401359150611a216040850161205d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561210d5761210d6120ba565b60405290565b803561ffff8116811461203d57600080fd5b600060e0828403121561213757600080fd5b60405160e0810181811067ffffffffffffffff8211171561215a5761215a6120ba565b60405261216683612113565b815261217460208401612113565b602082015261218560408401612113565b604082015261219660608401612113565b60608201526121a760808401612019565b60808201526121b860a08401612019565b60a08201526121c960c08401612019565b60c08201529392505050565b6000602082840312156121e757600080fd5b813567ffffffffffffffff8111156121fe57600080fd5b82016101008185031215611e3957600080fd5b8015158114610dbb57600080fd5b803561203d81612211565b60006020828403121561223c57600080fd5b8135611e3981612211565b6000806040838503121561225a57600080fd5b6122638361205d565b9150602083013561227381612211565b809150509250929050565b6000806040838503121561229157600080fd5b61229a83612019565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600081612315576123156122d7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6020810160088310612376577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60006020828403121561238e57600080fd5b5051919050565b803560ff8116811461203d57600080fd5b600067ffffffffffffffff808411156123c1576123c16120ba565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612407576124076120ba565b8160405280935085815286868601111561242057600080fd5b858560208301376000602087830101525050509392505050565b60006060828403121561244c57600080fd5b6040516060810167ffffffffffffffff8282108183111715612470576124706120ba565b8160405282935061248085612019565b835261248e60208601612395565b602084015260408501359150808211156124a757600080fd5b508301601f810185136124b957600080fd5b6124c8858235602084016123a6565b6040830152505092915050565b6000608082840312156124e757600080fd5b6040516080810167ffffffffffffffff828210818311171561250b5761250b6120ba565b81604052829350843591508082111561252357600080fd5b508301601f8101851361253557600080fd5b612544858235602084016123a6565b825250602083013561255581612211565b602082015261256660408401612395565b604082015261257760608401612019565b60608201525092915050565b6000610100823603121561259657600080fd5b61259e6120e9565b6125a783612019565b8152602083013567ffffffffffffffff808211156125c457600080fd5b6125d03683870161243a565b602084015260408501359150808211156125e957600080fd5b6125f53683870161243a565b60408401526126066060860161205d565b60608401526080850135608084015260a085013560a084015261262b60c0860161221f565b60c084015260e085013591508082111561264457600080fd5b50612651368286016124d5565b60e08301525092915050565b60008060006060848603121561267257600080fd5b8351925060208401519150604084015161268b81612211565b809150509250925092565b61ffff8181168382160190808211156126b1576126b16122d7565b5092915050565b6000602082840312156126ca57600080fd5b8151611e3981612211565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612706576127066122d7565b5060010190565b8082028115828204841417611ae157611ae16122d7565b60008261275a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820180821115611ae157611ae16122d7565b81810381811115611ae157611ae16122d756fea2646970667358221220be5b825fe7cd3e2a99f6de87bc7623faa8152be31eeb466482fd14135207182a64736f6c63430008140033",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "amountToExecutor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "amountToComputing",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "amountToAdmin",
              "type": "uint16"
            },
            { "internalType": "uint16", "name": "feeAmount", "type": "uint16" },
            {
              "internalType": "address",
              "name": "executionAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "computingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDCADataStructures.FeeDistribution",
          "name": "feeDistrobution_",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "executionEOA_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    { "inputs": [], "name": "ContractIsPaused", "type": "error" },
    {
      "inputs": [
        { "internalType": "address", "name": "owner", "type": "address" }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "active_",
          "type": "bool"
        }
      ],
      "name": "ContractActiveStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId_",
          "type": "uint256"
        }
      ],
      "name": "ExecutedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress_",
          "type": "address"
        }
      ],
      "name": "ExecutorAddressChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "FeeDataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "FeesDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "DCAAccountAddress_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IDCADataStructures.Interval",
          "name": "strategyInterval_",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "active_",
          "type": "bool"
        }
      ],
      "name": "StrategySubscription",
      "type": "event"
    },
    { "stateMutability": "payable", "type": "fallback" },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        }
      ],
      "name": "DistributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "DCAAccount_", "type": "address" },
        { "internalType": "uint256", "name": "strategyId_", "type": "uint256" },
        {
          "internalType": "enum IDCADataStructures.Interval",
          "name": "interval_",
          "type": "uint8"
        }
      ],
      "name": "Execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "DCAAccount_", "type": "address" },
        { "internalType": "uint256", "name": "strategyId_", "type": "uint256" },
        {
          "internalType": "enum IDCADataStructures.Interval",
          "name": "interval_",
          "type": "uint8"
        }
      ],
      "name": "ForceUnsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                { "internalType": "string", "name": "ticker", "type": "string" }
              ],
              "internalType": "struct IDCADataStructures.TokenData",
              "name": "baseToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                { "internalType": "string", "name": "ticker", "type": "string" }
              ],
              "internalType": "struct IDCADataStructures.TokenData",
              "name": "targetToken",
              "type": "tuple"
            },
            {
              "internalType": "enum IDCADataStructures.Interval",
              "name": "interval",
              "type": "uint8"
            },
            { "internalType": "uint256", "name": "amount", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            { "internalType": "bool", "name": "active", "type": "bool" },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "reinvestData",
                  "type": "bytes"
                },
                { "internalType": "bool", "name": "active", "type": "bool" },
                {
                  "internalType": "uint8",
                  "name": "investCode",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "dcaAccountAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct IDCADataStructures.Reinvest",
              "name": "reinvest",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDCADataStructures.Strategy",
          "name": "strategy_",
          "type": "tuple"
        }
      ],
      "name": "Subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "DCAAccountAddress_",
          "type": "address"
        },
        { "internalType": "uint256", "name": "strategyId_", "type": "uint256" },
        {
          "internalType": "enum IDCADataStructures.Interval",
          "name": "interval_",
          "type": "uint8"
        }
      ],
      "name": "Unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "newAdmin_", "type": "address" }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "executorAddress_",
          "type": "address"
        }
      ],
      "name": "changeExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressToCheck_",
          "type": "address"
        }
      ],
      "name": "checkIfAdmin",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExecutorAddress",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "amountToExecutor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "amountToComputing",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "amountToAdmin",
              "type": "uint16"
            },
            { "internalType": "uint16", "name": "feeAmount", "type": "uint16" },
            {
              "internalType": "address",
              "name": "executionAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "computingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDCADataStructures.FeeDistribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDCADataStructures.Interval",
          "name": "interval_",
          "type": "uint8"
        }
      ],
      "name": "getIntervalTotalActiveStrategys",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "account_", "type": "address" },
        { "internalType": "uint256", "name": "strategyId_", "type": "uint256" }
      ],
      "name": "getTimeTillWindow",
      "outputs": [
        { "internalType": "uint256", "name": "lastEx", "type": "uint256" },
        { "internalType": "uint256", "name": "secondsLeft", "type": "uint256" },
        { "internalType": "bool", "name": "checkReturn", "type": "bool" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalActiveStrategys",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalExecutions",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDCADataStructures.Interval",
          "name": "interval_",
          "type": "uint8"
        }
      ],
      "name": "isIntervalActive",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "oldAdmin_", "type": "address" }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bool", "name": "newFlag_", "type": "bool" }
      ],
      "name": "setActiveState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "amountToExecutor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "amountToComputing",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "amountToAdmin",
              "type": "uint16"
            },
            { "internalType": "uint16", "name": "feeAmount", "type": "uint16" },
            {
              "internalType": "address",
              "name": "executionAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "computingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDCADataStructures.FeeDistribution",
          "name": "fee_",
          "type": "tuple"
        }
      ],
      "name": "setFeeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDCADataStructures.Interval",
          "name": "interval_",
          "type": "uint8"
        },
        { "internalType": "bool", "name": "status_", "type": "bool" }
      ],
      "name": "setIntervalActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "newOwner", "type": "address" }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    { "stateMutability": "payable", "type": "receive" }
  ]
}
