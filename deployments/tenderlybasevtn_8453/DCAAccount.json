{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/base/DCAAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\n// PRODUCTION\\nimport \\\"../logic/AccountLogic.sol\\\";\\n\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\n\\ncontract DCAAccount is DCAAccountLogic {\\n    using Strategies for uint256;\\n    using Strategies for Strategy;\\n\\n    constructor(\\n        address executorAddress_,\\n        address swapRouter_,\\n        address owner_,\\n        address reinvestLibraryContract_\\n    ) Swap(swapRouter_) OnlyExecutor(owner_, executorAddress_) {\\n        _setReinvestAddress(reinvestLibraryContract_);\\n    }\\n\\n    fallback() external payable {}\\n\\n    // Receive is a variant of fallback that is triggered when msg.data is empty\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Executes the given strategy with the given fee amount.\\n     *      Can only be done by the executor.\\n     * @param strategyId_ the id of the strategy to execute\\n     * @param feeAmount_ the amount of fee to pay to the executor\\n     */\\n    function Execute(\\n        uint256 strategyId_,\\n        uint16 feeAmount_\\n    ) external override onlyExecutor inWindow(strategyId_) returns (bool) {\\n        require(\\n            _strategies[strategyId_].isActive(),\\n            \\\"DCAAccount : [Execute] Strategy is not active\\\"\\n        );\\n        require(\\n            _baseBalances[_strategies[strategyId_].baseAddress()] >=\\n                _strategies[strategyId_].amount,\\n            \\\"DCAAccount : [Execute] Base Balance too low\\\"\\n        );\\n        return _executeDCATrade(strategyId_, feeAmount_);\\n    }\\n\\n    /**\\n     * @dev Add a new strategy to the account\\n     *      Only the owner can call.\\n     * @param newStrategy_ the data for the strategy, based on the Strategy Struct\\n     * @param seedFunds_  Amount of the base token to fund with, 0 for none\\n     * @param subscribeToExecutor_ Whether to subscribe to the executor at setup\\n     */\\n    function SetupStrategy(\\n        Strategy calldata newStrategy_,\\n        uint256 seedFunds_,\\n        bool subscribeToExecutor_\\n    ) external override onlyOwner {\\n        _newStrategy(newStrategy_);\\n        if (seedFunds_ > 0) {\\n            AddFunds(newStrategy_.baseAddress(), seedFunds_);\\n        }\\n        if (subscribeToExecutor_) {\\n            _subscribeToExecutor(newStrategy_);\\n        }\\n    }\\n\\n    /**\\n     * @dev Subscribes an already created strategy to an executor\\n     * @param strategyId_ {uint256} Id of the strategy to subscribe to an executor\\n     */\\n    function SubscribeStrategy(\\n        uint256 strategyId_\\n    ) external override onlyOwner {\\n        // Add the given strategy, once checking there are funds\\n        // to the default DCAExecutor\\n\\n        Strategy memory givenStrategy = _strategies[strategyId_];\\n        require(\\n            !givenStrategy.active,\\n            \\\"DCAAccount : [SubscribeStrategy] Strategy is already Subscribed\\\"\\n        );\\n\\n        require(\\n            _baseBalances[givenStrategy.baseToken.tokenAddress] >=\\n                (givenStrategy.amount * 5),\\n            \\\"DCAAccount : [SubscribeStrategy] Need to have 5 executions funded to subscribe\\\"\\n        );\\n        _subscribeToExecutor(_strategies[strategyId_]);\\n    }\\n\\n    /**\\n     * @dev Unsubscribes the given strategy from its executor\\n     * @param strategyId_ Strategy Id of the strategy to unsubscribe\\n     */\\n    function UnsubscribeStrategy(\\n        uint256 strategyId_\\n    ) external override onlyOwner {\\n        // Remove the given strategy from its active executor\\n        require(\\n            _strategies[strategyId_].isActive(),\\n            \\\"DCAAccount : [UnsubscribeStrategy] Strategy is already Unsubscribed\\\"\\n        );\\n        _unsubscribeToExecutor(strategyId_);\\n    }\\n\\n    /**\\n     * @dev Force unsubscribe the strategy from the executor\\n     * @notice used by the Executor to remove failing strategies/out of funds strategies.\\n     * @param strategyId_ Strategy Id of the strategy to unsubscribe\\n     */\\n    function ExecutorDeactivate(\\n        uint256 strategyId_\\n    ) external override onlyExecutor {\\n        _strategies[strategyId_].active = false;\\n        _totalActiveStrategies -= 1;\\n\\n        emit StrategySubscription(strategyId_, _executor(), false);\\n    }\\n\\n    /**\\n     * @dev Fund the account with a base currency\\n     * @param token_ {address} The ERC20 token address\\n     * @param amount_ {uint256} Amount of the token to deposit\\n     */\\n    function AddFunds(\\n        address token_,\\n        uint256 amount_\\n    ) public override onlyOwner {\\n        //Transfer the given amount of the given ERC20 token to the DCAAccount\\n        IERC20(token_).transferFrom(msg.sender, address(this), amount_);\\n        _baseBalances[token_] += amount_;\\n    }\\n\\n    /**\\n     * @dev Unfund account of a base token\\n     * @param token_ {address} The ERC20 token address\\n     * @param amount_ {uint256} Amount of the token to withdraw\\n     */\\n    function WithdrawFunds(address token_, uint256 amount_) public onlyOwner {\\n        //Transfer the given amount of the given ERC20 token out of the DCAAccount\\n        require(\\n            _baseBalances[token_] >= amount_,\\n            \\\"DCAAccount : [UnFundAccount] Balance of token to low\\\"\\n        );\\n        _baseBalances[token_] -= amount_;\\n        IERC20(token_).transfer(msg.sender, amount_);\\n    }\\n\\n    /**\\n     * @dev Withdraws the given amount of the target token balance\\n     * @param token_ {address} The ERC20 token address\\n     * @param amount_ {uint256} Amount of the target token to withdraw\\n     */\\n\\n    function WithdrawSavings(\\n        address token_,\\n        uint256 amount_\\n    ) external override onlyOwner {\\n        require(\\n            _targetBalances[token_] >= amount_,\\n            \\\"DCAAccount : [WithdrawSavings] Balance of token too low\\\"\\n        );\\n        _targetBalances[token_] -= amount_;\\n        bool success;\\n        if (token_ == address(0)) {\\n            payable(msg.sender).transfer(amount_);\\n            success = true;\\n        } else success = IERC20(token_).transfer(msg.sender, amount_);\\n\\n        require(success, \\\"[DCAAccount] : [WithdrawSavings] Transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Unwinds the reinvestment for the given strategy\\n     * @notice repays the underlining token and return the target token\\n     * @param strategyId_ The id of the strategy to unwind\\n     */\\n    function UnwindReinvest(uint256 strategyId_) public onlyOwner {\\n        uint256 balance = _reinvestLiquidityTokenBalance[strategyId_];\\n        require(\\n            balance > 0,\\n            \\\"[DCAAccount] : [UnWindReinvest] -  No investment to unwind\\\"\\n        );\\n\\n        (uint256 amount, bool success) = _withdrawReinvest(\\n            strategyId_,\\n            _strategies[strategyId_].reinvest,\\n            balance\\n        );\\n        emit ReinvestUnwound(strategyId_, amount, success);\\n    }\\n\\n    /**\\n     * @dev Set or remove reinvest data for a strategy\\n     * @notice Ref to the Reinvest library for more info\\n     * @param strategyId_ Strategy Id of the strategy to amend\\n     * @param reinvest_ {Reinvest} the reinvest data to assign to the strategy.  Can set active to false to remove reinvest\\n     */\\n    function setStrategyReinvest(\\n        uint256 strategyId_,\\n        Reinvest memory reinvest_ //bool migrateOrWithdrawCurrentReinvest_\\n    ) external override onlyOwner {\\n        if (reinvest_.active) {\\n            _strategies[strategyId_].reinvest = reinvest_;\\n        } else\\n            _strategies[strategyId_].reinvest = Reinvest(\\n                new bytes(0),\\n                false,\\n                0x00,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Updates the Uniswap SwapRouter Address\\n     * @param swapRouter_  New address for the Uniswap router\\n     */\\n    function updateSwapAddress(address swapRouter_) public onlyOwner {\\n        _updateSwapAddress(swapRouter_);\\n    }\\n\\n    /**\\n     * @dev get account balance of base token\\n     * @param token_ {address} Base token address\\n     * @return {uint256} account balance of Base token\\n     */\\n    function getBaseBalance(\\n        address token_\\n    ) external view override returns (uint256) {\\n        return _baseBalances[token_];\\n    }\\n\\n    /**\\n     * @dev get account balance of target token\\n     * @param token_ {address} Base token address\\n     * @return {uint256} account balance of Base token\\n     */\\n    function getTargetBalance(\\n        address token_\\n    ) external view override returns (uint256) {\\n        return _targetBalances[token_];\\n    }\\n\\n    /**\\n     * @dev Get the reinvest token balance for a strategy\\n     * @param strategyId_ Strategy Id of the strategy to get the balance for\\n     * @return {uint256} The reinvest token balance for the strategy\\n     */\\n    function getReinvestTokenBalance(\\n        uint256 strategyId_\\n    ) external view returns (uint256) {\\n        console.log(\\n            \\\"Got Reinvest Balance\\\",\\n            _reinvestLiquidityTokenBalance[strategyId_]\\n        );\\n        return _reinvestLiquidityTokenBalance[strategyId_];\\n    }\\n\\n    /**\\n     * @dev Get the full data for the given strategy\\n     * @param strategyId_ Strategy Id of the strategy data to get\\n     * @return {Strategy} the given strategy's full data struct\\n     */\\n    function getStrategyData(\\n        uint256 strategyId_\\n    ) external view returns (Strategy memory) {\\n        return _strategies[strategyId_];\\n    }\\n\\n    /**\\n     * @dev update the onChain executor address\\n     * @param newAddress_ address of the new default executor contract\\n     */\\n    function _changeExecutor(address newAddress_) internal {\\n        require(_executor() != newAddress_, \\\"Already using this DCA executor\\\");\\n\\n        _changeExecutorAddress(newAddress_);\\n    }\\n\\n    /**\\n     * @notice Functions for Reinvest\\n     */\\n\\n    /**\\n     * @dev Updates the contract holding the reinvest logic\\n     * @param newLibraryAddress_ address of the library contract to use\\n     */\\n    function changeReinvestLibrary(\\n        address newLibraryAddress_\\n    ) public onlyOwner {\\n        _setReinvestAddress(newLibraryAddress_);\\n    }\\n\\n    /**\\n     * @dev Returns the version of the attached reinvest library\\n     * @return The version of the attached reinvest library\\n     */\\n    function getAttachedReinvestLibraryVersion()\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _getReinvestContract().getLibraryVersion();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the attached reinvest library\\n     * @return The address of the attached reinvest library\\n     */\\n    function getAttachedReinvestLibraryAddress() public view returns (address) {\\n        return address(_getReinvestContract());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/protocols/uniswap/ISwapRouterv3.sol\":{\"content\":\"pragma solidity ^0.8.20;\\n\\nimport \\\"../../tokens/IERC20.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function WETH9() external pure returns (address);\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/utils/swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ISwapRouter, IWETH9} from \\\"../protocols/uniswap/ISwapRouterv3.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *       Dollar Cost Average Contracts\\n ************************************************\\n *                  V0.6\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nabstract contract Swap {\\n    ISwapRouter public SWAP_ROUTER;\\n    uint24 private _poolFee = 3000;\\n\\n    constructor(address swapAddress) {\\n        SWAP_ROUTER = ISwapRouter(swapAddress);\\n    }\\n\\n    /**\\n     * @dev swaps from base token for set amount into any amount of target token\\n     * @param baseToken_  token address of the token to swap from\\n     * @param targetToken_  token address of the token to receive\\n     * @param amount_  amount to swap\\n     * @return amount  amount returned by the swap\\n     */\\n    function _swap(\\n        address baseToken_,\\n        address targetToken_,\\n        uint256 amount_\\n    ) internal returns (uint256 amount) {\\n        //  The call to `exactInputSingle` executes the swap.\\n        if (targetToken_ == address(0)) {\\n            // Swap tokens for WETH then convert to ETH\\n            amount = SWAP_ROUTER.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: baseToken_,\\n                    tokenOut: SWAP_ROUTER.WETH9(),\\n                    fee: _poolFee,\\n                    recipient: address(this),\\n                    amountIn: amount_,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            IWETH9(SWAP_ROUTER.WETH9()).withdraw(amount);\\n\\n            return amount;\\n        } else\\n            return\\n                SWAP_ROUTER.exactInputSingle(\\n                    ISwapRouter.ExactInputSingleParams({\\n                        tokenIn: baseToken_,\\n                        tokenOut: targetToken_,\\n                        fee: _poolFee,\\n                        recipient: address(this),\\n                        amountIn: amount_,\\n                        amountOutMinimum: 0,\\n                        sqrtPriceLimitX96: 0\\n                    })\\n                );\\n    }\\n\\n    /**\\n     * @dev logic to approve external address to spend given token\\n     * @param baseToken_ address of the base token to allow contract to spend\\n     * @param amount_ amount to limit the spend\\n     * @return success The success of the approval\\n     */\\n    function _approveSwapSpend(\\n        address baseToken_,\\n        uint256 amount_\\n    ) internal returns (bool success) {\\n        success = _checkSpendAllowance(\\n            baseToken_,\\n            address(SWAP_ROUTER),\\n            amount_\\n        );\\n        if (!success) {\\n            success = IERC20(baseToken_).approve(address(SWAP_ROUTER), amount_);\\n            require(success, \\\"Swap Allowance Set Failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the spender has enough spend to execute\\n     * @param baseToken_ Address of the base token to check allowance of\\n     * @param spender_ address of the spending contract\\n     * @param neededAllowance_ amount of the base token the allowance\\n     * @return If the allowance is enough\\n     */\\n    function _checkSpendAllowance(\\n        address baseToken_,\\n        address spender_,\\n        uint256 neededAllowance_\\n    ) internal view returns (bool) {\\n        return\\n            IERC20(baseToken_).allowance(address(this), spender_) >=\\n            neededAllowance_;\\n    }\\n\\n    /**\\n     * @dev Updates the swap router address\\n     * @param newSwapRouter_ The new swap router address\\n     */\\n    function _updateSwapAddress(address newSwapRouter_) internal {\\n        SWAP_ROUTER = ISwapRouter(newSwapRouter_);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCADataStructures.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCADataStructures {\\n    /**\\n     * @notice List of available intervals for executions\\n     * @notice Timing will be in seconds\\n     * @dev Check agenst Executor if the strategy interval is active\\n     */\\n    enum Interval {\\n        TestIntervalOneMin, //Only for development\\n        TestIntervalFiveMins, //Only for development\\n        OneDay,\\n        TwoDays,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    /**\\n     * @notice The fee distribution struct\\n     * @dev Working by a factor of 100 (100% = 10000)\\n     * @dev Executor, Computing and Admin fees should add up to 100%\\n     * @param amountToExecutor Percent of the FEE going to Executor EOA\\n     * @param amountToComputing Percent of the FEE going to Executor Computing costs\\n     * @param amountToAdmin Percent of the FEE going to admin\\n     * @param feeAmount Total amount of the pre-execution to be taken as fee\\n     * @param executionAddress The address of the executor\\n     * @param computingAddress The address of the computing\\n     * @param adminAddress The address of the admin\\n     */\\n    struct FeeDistribution {\\n        uint16 amountToExecutor; //In percent (where 10000 = 100%, 100 = 1%, etc.)\\n        uint16 amountToComputing; //In percent (where 10000 = 100%, 100 = 1%, etc.)\\n        uint16 amountToAdmin; //In percent (where 10000 = 100%, 100 = 1%, etc.)\\n        uint16 feeAmount; //In percent\\n        address executionAddress;\\n        address computingAddress; //need to look into how distributed computing payments work\\n        address adminAddress;\\n    }\\n\\n    /**\\n     * @notice The data struct defining the DCA Strategy\\n     * @param accountAddress Address of the account the strategy belongs to\\n     * @param baseToken The base token data\\n     * @param targetToken The target token data\\n     * @param interval The interval for the strategy\\n     * @param amount The amount of the base token to invest each interval\\n     * @param strategyId The ID of the strategy\\n     * @param active Whether the strategy is active\\n     * @param reinvest The reinvest data\\n     *\\n     * @dev strategyId is assigned by the account contract\\n     *\\n     */\\n    struct Strategy {\\n        address accountAddress;\\n        TokenData baseToken;\\n        TokenData targetToken; //use 0x0 for ETH\\n        Interval interval;\\n        uint256 amount;\\n        uint256 strategyId;\\n        bool active;\\n        Reinvest reinvest;\\n    }\\n\\n    /**\\n     *  @notice Token Data struct\\n     * @param tokenAddress The address of the token (i using native token use zero address address(0x0))\\n     * @param decimals The amount of decimals the token uses\\n     * @param ticker Of the token\\n     */\\n    struct TokenData {\\n        address tokenAddress;\\n        uint8 decimals;\\n        string ticker;\\n    }\\n\\n    /**\\n     * @notice Reinvest strategy struct.\\n     * If no reinvest set active to false and zero-out other fields\\n     * If using predefined reinvest strategy zero-out the bytes fields\\n     * Check code agents the Reinvest Codes library\\n     *\\n     * @notice deposit & withdraw reinvest methods only needed IF using custom reinvest strategy\\n     *\\n     * @param reinvestData Reinvest strategy specific data (encoded to bytes)\\n     * @param active If the reinvest is active\\n     * @param investCode Reinvest strategy code\\n     * @param dcaAccountAddress address of the account contract\\n     */\\n\\n    struct Reinvest {\\n        bytes reinvestData;\\n        bool active;\\n        uint8 investCode;\\n        address dcaAccountAddress;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/library/Intervals.sol\":{\"content\":\"pragma solidity ^0.8.20;\\n\\nimport {IDCADataStructures} from \\\"../interfaces/IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nlibrary Intervals {\\n    // Constants for interval block amounts\\n    uint256 constant ONEMINUTE = 1 minutes; // ONLY FOR TESTING\\n    uint256 constant ONEHOUR = 1 hours;\\n    uint256 constant ONEDAY = 1 days;\\n    uint256 constant TWODAYS = 2 * ONEDAY;\\n    uint256 constant THREEDAYS = 3 * ONEDAY;\\n    uint256 constant ONEWEEK = 1 weeks;\\n    uint256 constant ONEMONTH = 4 weeks;\\n\\n    /**\\n     * @notice Checks if the interval is in the current execution window\\n     * @param interval_ The interval to check\\n     * @param lastExecution_ The last execution block number\\n     * @return True if the interval is in the current execution window, false otherwise\\n     */\\n    function isInWindow(\\n        IDCADataStructures.Interval interval_,\\n        uint256 lastExecution_\\n    ) internal view returns (bool) {\\n        return secondsLeftTillWindow(interval_, lastExecution_) == 0;\\n    }\\n\\n    /**\\n     * @notice Function to retrieve the block amount for a given interval\\n     * @param interval_ {Interval} The interval key\\n     * @return Amount of blocks to interval\\n     */\\n    function getIntervalLength(\\n        IDCADataStructures.Interval interval_\\n    ) internal pure returns (uint256) {\\n        if (interval_ == IDCADataStructures.Interval.TestIntervalOneMin)\\n            return ONEMINUTE;\\n        if (interval_ == IDCADataStructures.Interval.TestIntervalFiveMins)\\n            return ONEMINUTE * 5;\\n        if (interval_ == IDCADataStructures.Interval.OneDay) return ONEDAY;\\n        if (interval_ == IDCADataStructures.Interval.TwoDays) return TWODAYS;\\n        if (interval_ == IDCADataStructures.Interval.ThreeDays)\\n            return THREEDAYS;\\n        if (interval_ == IDCADataStructures.Interval.OneWeek) return ONEWEEK;\\n        if (interval_ == IDCADataStructures.Interval.TwoWeeks)\\n            return ONEWEEK * 2;\\n\\n        if (interval_ == IDCADataStructures.Interval.OneMonth) return ONEMONTH;\\n        revert(\\\"DCAStrategy : Invalid interval\\\");\\n    }\\n\\n    /**\\n     * @notice check how many seconds are left till execution window\\n     * @param lastExecution_ {uint256} last block the strategy was executed on\\n     * @param interval_ {Interval} Interval key to work from\\n     * @return {uint256} time left till window is open in seconds\\n     */\\n    function secondsLeftTillWindow(\\n        IDCADataStructures.Interval interval_,\\n        uint256 lastExecution_\\n    ) internal view returns (uint256) {\\n        uint256 intervalEnd = lastExecution_ + getIntervalLength(interval_);\\n        return\\n            block.timestamp > intervalEnd ? 0 : intervalEnd - block.timestamp;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/library/Strategys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IDCADataStructures.sol\\\";\\nimport {Intervals} from \\\"./Intervals.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nlibrary Strategies {\\n    using Intervals for uint8;\\n    /**\\n     *\\n     * @param strategy the strategy object to check\\n     * @return {bool} if the Strategy data is valid\\n     */\\n    function isValid(\\n        IDCADataStructures.Strategy memory strategy\\n    ) internal pure returns (bool) {\\n        // Define the maximum valid enum value\\n        uint maxIntervalValue = uint(IDCADataStructures.Interval.OneMonth); // Assuming 'OneMonth' is the last in your enum\\n\\n        // Check interval is within the range of defined enum values\\n        bool isValidInterval = uint(strategy.interval) <= maxIntervalValue;\\n\\n        return (strategy.accountAddress != address(0) &&\\n            strategy.baseToken.tokenAddress != address(0) &&\\n            strategy.amount > 0 &&\\n            isValidInterval);\\n    }\\n\\n    function isAccountAddress(\\n        IDCADataStructures.Strategy memory strategy_,\\n        address accountAddress_\\n    ) internal pure returns (bool) {\\n        return strategy_.accountAddress == accountAddress_;\\n    }\\n\\n    function isActive(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (bool) {\\n        return strategy_.active;\\n    }\\n\\n    function baseAddress(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (address) {\\n        return strategy_.baseToken.tokenAddress;\\n    }\\n\\n    function targetAddress(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (address) {\\n        return strategy_.targetToken.tokenAddress;\\n    }\\n\\n    function getTokenAddresses(\\n        IDCADataStructures.Strategy memory strategy_\\n    ) internal pure returns (address, address) {\\n        return (\\n            strategy_.baseToken.tokenAddress,\\n            strategy_.targetToken.tokenAddress\\n        );\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"versionPragma\":\">=0.4.22 <0.9.0\"},\"contracts/library/Fees.sol\":{\"content\":\"pragma solidity ^0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {IDCADataStructures} from \\\"../interfaces/IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nlibrary Fee {\\n    /**\\n     * @notice Function to calculate fee based on total fee percentage\\n     * @param feeAmount_ Total fee percentage (100% represented as 10000)\\n     * @param amount_ Total amount from which to calculate the fee\\n     * @return {uint256} Fee amount to be deducted from the total amount\\n     */\\n    function getFee(\\n        uint16 feeAmount_,\\n        uint256 amount_\\n    ) internal pure returns (uint256) {\\n        return calculatePercentage(feeAmount_, amount_);\\n    }\\n    /**\\n     * @dev\\n     * @param total_ total amount of base token being executed\\n     * @param fee_ the fee structure\\n     * @return executorFee\\n     * @return computingFee\\n     * @return adminFee\\n     */\\n    function getFeeSplit(\\n        IDCADataStructures.FeeDistribution storage fee_,\\n        uint256 amount_\\n    )\\n        internal\\n        view\\n        returns (uint256 executorFee, uint256 computingFee, uint256 adminFee)\\n    {\\n        executorFee = calculatePercentage(fee_.amountToExecutor, amount_);\\n        computingFee = calculatePercentage(fee_.amountToComputing, amount_);\\n        adminFee = calculatePercentage(fee_.amountToAdmin, amount_);\\n    }\\n\\n    /**\\n     * @notice Function to c alculate the percentage of an amount\\n     * @param percent_ Percentage to calculate (1% represented as 100, 0.01% as 1, and 100% as 10000)\\n     * @param amount_ Total amount from which to calculate the percentage\\n     * @return {uint256} The calculated percentage of the amount\\n     */\\n    function calculatePercentage(\\n        uint16 percent_,\\n        uint256 amount_\\n    ) internal pure returns (uint256) {\\n        if (percent_ < 1) return 0;\\n        uint256 percentageAmount = (amount_ * percent_) / 10000;\\n        return percentageAmount;\\n    }\\n\\n    /**\\n     * @dev gets the percent of each fee amount in the active fee structure\\n     * @param fee_ tettheheh fee strucutre\\n     * @return totalFee\\n     * @return executorFee\\n     * @return computingFee\\n     * @return adminFee\\n     */\\n    function getFeeAmounts(\\n        IDCADataStructures.FeeDistribution calldata fee_\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint16 totalFee,\\n            uint16 executorFee,\\n            uint16 computingFee,\\n            uint16 adminFee\\n        )\\n    {\\n        return (\\n            fee_.feeAmount,\\n            fee_.amountToExecutor,\\n            fee_.amountToComputing,\\n            fee_.amountToAdmin\\n        );\\n    }\\n    /**\\n     * @dev Check that the split percentages add upto 100% (10,000)\\n     * @param fee_ fee data set to check\\n     * @return {bool}\\n     */\\n\\n    function checkPercentTotal(\\n        IDCADataStructures.FeeDistribution memory fee_\\n    ) internal pure returns (bool) {\\n        return\\n            fee_.amountToAdmin +\\n                fee_.amountToExecutor +\\n                fee_.amountToComputing ==\\n            10000;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/security/onlyExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *       Dollar Cost Average Contracts\\n ************************************************\\n *                  V0.6\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\nabstract contract OnlyExecutor is Ownable {\\n    /**\\n     * @notice The address of the executor\\n     */\\n    address private _executorAddress;\\n\\n    /**\\n     * @notice Emitted when the executor address is changed\\n     * @param newAddress_ The new executor address\\n     */\\n    event ExecutorAddressChange(address indexed newAddress_);\\n\\n    /**\\n     * @notice Modifier to check if the caller is the executor\\n     */\\n    modifier onlyExecutor() {\\n        require(\\n            _executorAddress == msg.sender,\\n            \\\"OnlyExecutor : [onlyExecutor] Address is not an executor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor for the OnlyExecutor contract\\n     * @param owner_ The owner of the contract\\n     * @param executorAddress_ The address of the executor\\n     */\\n    constructor(address owner_, address executorAddress_) Ownable(owner_) {\\n        _changeExecutorAddress(executorAddress_);\\n    }\\n\\n    /**\\n     * @notice Returns the executor address\\n     * @return The executor address\\n     */\\n    function _executor() internal view returns (address) {\\n        return _executorAddress;\\n    }\\n\\n    /**\\n     * @notice Changes the executor address\\n     * @param executorAddress_ The new executor address\\n     */\\n    function _changeExecutorAddress(address executorAddress_) internal {\\n        _executorAddress = executorAddress_;\\n        emit ExecutorAddressChange(executorAddress_);\\n    }\\n\\n    /**\\n     * @notice Removes the executor address\\n     */\\n    function removeExecutor() public onlyOwner {\\n        _changeExecutorAddress(address(0x0));\\n    }\\n\\n    function changeExecutor(address executorAddress_) public onlyOwner {\\n        _changeExecutorAddress(executorAddress_);\\n    }\\n\\n    /**\\n     * @notice Returns the executor address\\n     * @return The executor address\\n     */\\n    function getExecutorAddress() external view virtual returns (address) {\\n        return _executorAddress;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCAAccount.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\nimport \\\"./IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCAAccount is IDCADataStructures {\\n    /**\\n     * @notice Emitted when a strategy has been executed\\n     * @param strategyId_ the id for the executed strategy\\n     * @param amountIn_ amount received from the swap\\n     * @param reInvested_  wether the strategy reinvested or not\\n     */\\n    event StrategyExecuted(\\n        uint256 indexed strategyId_,\\n        uint256 indexed amountIn_,\\n        bool reInvested_\\n    );\\n    /**\\n     * @notice Emitted when the Strategy is confirmed to be subscribed to an Executor\\n     * @param strategyId_ ID of the strategy that has been subscribed\\n     * @param executor_ Address of the Executor contract subscribed to\\n     * @param subscribed_ Wether the strategy is subscribed/unsubscribed to the executor\\n     */\\n    event StrategySubscription(\\n        uint256 indexed strategyId_,\\n        address indexed executor_,\\n        bool indexed subscribed_\\n    );\\n    /**\\n     * @notice Emitted when a new strategy has been created\\n     * @param strategyId_ Id of the newly created strategy\\n     */\\n    event StrategyCreated(uint256 indexed strategyId_);\\n    /**\\n     * @notice Emits when the reinvest address has been changed\\n     * @param newLibraryAddress The address for the Library contract\\n     */\\n    event ReinvestLibraryChanged(address indexed newLibraryAddress);\\n\\n    /**\\n     * @notice Emits when a Reinvest modula has been executed\\n     * @param strategyId_ the ID of the strategy executed\\n     * @param success Wether the reinvest was successful\\n     * @param amountReturned The amount returned by the Reinvest\\n     */\\n    event ReinvestExecuted(\\n        uint256 indexed strategyId_,\\n        bool indexed success,\\n        uint256 amountReturned\\n    );\\n\\n    /**\\n     * @notice Emited when a Reinvest is unwound\\n     * @param strategyId The ID of the strategy\\n     * @param amount The amount unwond and returned to the account\\n     * @param success If the unwind was successful\\n     */\\n    event ReinvestUnwound(\\n        uint256 indexed strategyId,\\n        uint256 amount,\\n        bool indexed success\\n    );\\n\\n    /**\\n     * @notice Triggered by the assigned executor to execute the given strategy\\n     * @param strategyId_  Id for the Strategy to be executed\\n     * @param feeAmount_ amount of the strategy amount to be paid via fee (percent)\\n     * @return If the function was successful\\n     */\\n    function Execute(\\n        uint256 strategyId_,\\n        uint16 feeAmount_\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Used by the account owner to setup a new strategy\\n     * @param newStrategy_  Strategy data for the new strategy to be created from\\n     * @param seedFunds_ amount of the base token to fund the strategy with now (optional)\\n     * @dev if no seed fund set to 0.  Any seed funds will need to be approved before this function is called\\n     * @param subscribeToExecutor_  wether to auto subscribe to the default executor\\n     * @dev the Account needs to have 5 executions worth of funds to be subscribed\\n     */\\n    function SetupStrategy(\\n        IDCADataStructures.Strategy calldata newStrategy_,\\n        uint256 seedFunds_,\\n        bool subscribeToExecutor_\\n    ) external;\\n\\n    /**\\n     * @notice Used by the account owner to subscribe the strategy to the executor\\n     * @param strategyId_ The Id of the strategy to subscribe to the executor\\n     * @dev the Account needs to have 5 executions worth of funds to be subscribed\\n     */\\n    function SubscribeStrategy(uint256 strategyId_) external;\\n\\n    /**\\n     * @notice Used by the account owner to unsubscribe the strategy to the executor\\n     * @param strategyId_ ID of the strategy to unsubscribe\\n     */\\n    function UnsubscribeStrategy(uint256 strategyId_) external;\\n\\n    /**\\n     * @notice Allows the account owner to fund the account for strategy's\\n     * @dev the funds are not strategy specific\\n     * @param token_ Address for the base token being funded\\n     * @param amount_ Amount of the token to be deposited\\n     * @dev Must approve the spend before calling this function\\n     */\\n\\n    function AddFunds(address token_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Removes a given amount from the Address of the given base token\\n     * @param token_ Address of the base token to remove from the contract\\n     * @param amount_ Amount of the base token to remove from the address\\n     */\\n    function WithdrawFunds(address token_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Removes a given amount from the Address of the given target token\\n     * @param token_ Address of the target token to remove from the account\\n     * @param amount_ Amount of the target token to remove from the account\\n     */\\n    function WithdrawSavings(address token_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Ony callable by the DCAExecutor contract to remove the strategy from the executor\\n     * @dev used when a strategy runs out of funds to execute\\n     * @param strategyId_ Id of the strategy to remove\\n     */\\n    function ExecutorDeactivate(uint256 strategyId_) external;\\n\\n    /**\\n     * @notice Allows the account owner to set, remove and update a strategy reinvest\\n     * @param strategyId_ Id of the strategy\\n     * @param reinvest_ Reinvest data to amend\\n     */\\n    function setStrategyReinvest(\\n        uint256 strategyId_,\\n        Reinvest memory reinvest_\\n    ) external;\\n\\n    /**\\n     * @notice Gets Account balance of the provided base token\\n     * @param token_ Address for the token to check\\n     * @return Amount of that token in the account\\n     */\\n    function getBaseBalance(address token_) external returns (uint256);\\n\\n    /**\\n     * @notice Gets Account balance of the provided target token\\n     * @param token_ Address for the token to check\\n     * @return Amount of that token in the account\\n     */\\n    function getTargetBalance(address token_) external returns (uint256);\\n\\n    /**\\n     *\\n     * @param strategyId_ The ID of the strategy to check\\n     * @return lastEx Timestamp of the last execution of the given strategy\\n     * @return secondsLeft Seconds left till the window for the strategys next execution\\n     * @return checkReturn\\n     */\\n    function getTimeTillWindow(\\n        uint256 strategyId_\\n    )\\n        external\\n        view\\n        returns (uint256 lastEx, uint256 secondsLeft, bool checkReturn);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCAReinvest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IDCADataStructures} from \\\"./IDCADataStructures.sol\\\";\\n\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCAReinvest {\\n    /**\\n     * @dev Executes the reinvestment\\n     * @param reinvestData_ The reinvestment data\\n     * @param amount_ The amount to reinvest\\n     * @return amount The amount of the reinvestment\\n     * @return success The success of the reinvestment\\n     */\\n    function executeReinvest(\\n        IDCADataStructures.Reinvest memory reinvestData_,\\n        uint256 amount_\\n    ) external returns (uint256 amount, bool success);\\n\\n    /**\\n     * @dev Unwinds the reinvestment\\n     * @param reinvestData_ The reinvestment data\\n     * @param amount_ The amount to unwind\\n     * @return amount The amount of the unwind\\n     * @return success The success of the unwind\\n     */\\n    function unwindReinvest(\\n        IDCADataStructures.Reinvest memory reinvestData_,\\n        uint256 amount_\\n    ) external returns (uint256 amount, bool success);\\n\\n    /**\\n     * @dev Checks if the reinvestment is active\\n     * @return isActive Whether the reinvestment is active\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the version of the reinvestment\\n     * @return The version of the reinvestment\\n     */\\n    function getLibraryVersion() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the active moduals\\n     * @return The active moduals\\n     */\\n    function getActiveModuals() external view returns (uint8[] memory);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IDCAExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IDCADataStructures.sol\\\";\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\ninterface IDCAExecutor is IDCADataStructures {\\n    /**\\n     * @notice Emitted once a strategy has finished executing successfully\\n     * @param account_ Address of the DCAAccount\\n     * @param strategyId_  ID of the strategy executed\\n     */\\n    event ExecutedStrategy(\\n        address indexed account_,\\n        uint256 indexed strategyId_\\n    );\\n\\n    /**\\n     * @notice Emitted when a new strategy subscribes or unsubscribes to the executor\\n     * @param DCAAccountAddress_  address of the DCAAccount subscribing\\n     * @param strategyId_  ID of the strategy to (un-)subscribe\\n     * @param strategyInterval_  Interval state of how ofter to be executed\\n     * @param active_ wether the strategy is being subscribed (true) or unsubscribed (false)\\n     */\\n    event StrategySubscription(\\n        address indexed DCAAccountAddress_,\\n        uint256 indexed strategyId_,\\n        Interval strategyInterval_,\\n        bool indexed active_\\n    );\\n\\n    /**\\n     * @notice Emitted each time the protocol fees are distributed\\n     * @param token_ address of the token being distributed\\n     * @param amount_ amount of the total token distributed\\n     */\\n    event FeesDistributed(address indexed token_, uint256 indexed amount_);\\n\\n    event FeeDataChanged();\\n\\n    /**\\n     * @notice Called by a DCAAccount to subscribe a strategy to the DCAExecutor\\n     * @param strategy_ The full strategy data of the subscribing strategy\\n     */\\n    function Subscribe(Strategy calldata strategy_) external;\\n\\n    /**\\n     * @notice Called by the DCAAccount to remove itself from the executor\\n     * @param DCAAccountAddress_ Address of the unsubscribing DCAAccount\\n     * @param strategyId_ ID of the strategy being unsubscribed\\n     */\\n    function Unsubscribe(\\n        address DCAAccountAddress_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external;\\n\\n    /**\\n     * @notice Called by the external Executor service wallet only, triggers the specified strategy\\n     * @param DCAAccount_ {address} Address of the DCAAccount holding the strategy to execute\\n     * @param strategyId_ {uint256} ID of the strategy to execute\\n     * @param interval_ {Interval} Interval of the strategy to execute\\n     */\\n    function Execute(\\n        address DCAAccount_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external;\\n\\n    /**\\n     * @notice Distributes the acuminated fee's from the DCAExecutor\\n     * @dev will use the in-contract fee's data to split the funds and transfer to needed wallets.\\n     * @param tokenAddress {address} Address of the token in the fee's pool to be distributed\\n     */\\n    function DistributeFees(address tokenAddress) external;\\n\\n    /**\\n     * @notice Used by the Executor service to remove a strategy from the DCAExecutor\\n     * Used mostly for unfunded and failing accounts.\\n     * @param DCAAccount_ {address} Address of the DCAAccount to be unsubscribed\\n     * @param strategyId_ {uint256} ID of the strategy to be unsubscribed\\n     */\\n    function ForceUnsubscribe(\\n        address DCAAccount_,\\n        uint256 strategyId_,\\n        Interval interval_\\n    ) external;\\n\\n    function getTimeTillWindow(\\n        address account_,\\n        uint256 strategyId_\\n    )\\n        external\\n        view\\n        returns (uint256 lastEx, uint256 secondsLeft, bool checkReturn);\\n\\n    /**\\n     * @notice Allows the admin to turn Strategy timings on & off\\n     * @param interval_ The strategy interval\\n     * @param status_ if the interval is active or not\\n     */\\n    function setIntervalActive(Interval interval_, bool status_) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/logic/AccountLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../utils/swap.sol\\\";\\nimport {Strategies, Intervals} from \\\"../library/Strategys.sol\\\";\\nimport {Fee} from \\\"../library/Fees.sol\\\";\\nimport {OnlyExecutor} from \\\"../security/onlyExecutor.sol\\\";\\nimport {IDCAAccount} from \\\"../interfaces/IDCAAccount.sol\\\";\\nimport {IDCAReinvest} from \\\"../interfaces/IDCAReinvest.sol\\\";\\nimport {IDCAExecutor} from \\\"../interfaces/IDCAExecutor.sol\\\";\\n\\n/**\\n *\\n ************************************************\\n *____ooo____oooooooo_oooo____oooo____ooo____oo_*\\n *__oo___oo_____oo_____oo___oo____oo__oooo___oo_*\\n *_oo_____oo____oo_____oo__oo______oo_oo_oo__oo_*\\n *_ooooooooo____oo_____oo__oo______oo_oo__oo_oo_*\\n *_oo_____oo____oo_____oo___oo____oo__oo___oooo_*\\n *_oo_____oo____oo____oooo____oooo____oo____ooo_*\\n *______________________________________________*\\n *      Distributed Cost Average Contracts\\n ************************************************\\n *                  V0.7\\n *  x.com/0xAtion\\n *  x.com/e_labs_\\n *  e-labs.co.uk\\n *\\n */\\n\\nabstract contract DCAAccountLogic is Swap, OnlyExecutor, IDCAAccount {\\n    using Fee for uint16;\\n    using Strategies for Strategy;\\n    using Intervals for Interval;\\n    using SafeERC20 for IERC20; // Added using statement for SafeERC20\\n\\n    mapping(uint256 => Strategy) internal _strategies;\\n\\n    mapping(address => uint256) internal _baseBalances;\\n    mapping(address => uint256) internal _targetBalances;\\n    mapping(uint256 => uint256) internal _reinvestLiquidityTokenBalance; // strat Id to balance of liquidity token\\n\\n    mapping(uint256 => uint256) internal _lastExecution; // strategyId to block number\\n\\n    uint256 internal _totalActiveStrategies;\\n    uint256 internal _strategyCount;\\n\\n    IDCAReinvest private DCAREINVEST_LIBRARY;\\n\\n    /**\\n     * @dev Modifier to check if a strategy is within the allowed execution window\\n     * @param strategyId_ {uint256} Id of the strategy to check if is in window\\n     */\\n    modifier inWindow(uint256 strategyId_) {\\n        require(\\n            _strategies[strategyId_].interval.isInWindow(\\n                _lastExecution[strategyId_]\\n            ),\\n            \\\"DCAAccount : [inWindow] Strategy Interval not met\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice EXECUTE Logic\\n     */\\n\\n    /**\\n     * @dev logic to create a new strategy\\n     * @param newStrategy_ the strategy data to create\\n     * @notice Emits a StrategyCreated event on completion\\n     */\\n    function _newStrategy(Strategy memory newStrategy_) internal {\\n        require(\\n            newStrategy_.isValid(),\\n            \\\"DCAAccount : [SetupStrategy] Invalid strategy data\\\"\\n        );\\n\\n        _strategyCount++;\\n        newStrategy_.strategyId = _strategyCount;\\n        newStrategy_.accountAddress = address(this);\\n        newStrategy_.active = false;\\n\\n        _strategies[_strategyCount] = newStrategy_;\\n        emit StrategyCreated(_strategyCount);\\n    }\\n\\n    /**\\n     * @dev logic for executing a strategy\\n     * @param strategyId_ Strategy Id of the strategy data to execute\\n     * @param feePercent_ Amount to charge as fee in percent\\n     * @notice percent breakdown where 10000 = 100%, 100 = 1%, etc.\\n     * @return  if the execution was successful\\n     */\\n    function _executeDCATrade(\\n        uint256 strategyId_,\\n        uint16 feePercent_\\n    ) internal returns (bool) {\\n        _lastExecution[strategyId_] = block.timestamp;\\n        Strategy memory strategy = _strategies[strategyId_];\\n        uint256 fee = feePercent_.getFee(strategy.amount);\\n        uint256 tradeAmount = strategy.amount - fee;\\n        (address baseAddress, address targetAddress) = strategy\\n            .getTokenAddresses();\\n\\n        if (fee > 0) {\\n            _transferFee(fee, baseAddress);\\n        }\\n\\n        _approveSwapSpend(baseAddress, tradeAmount);\\n        uint256 amountIn = _swap(baseAddress, targetAddress, tradeAmount);\\n        bool success;\\n\\n        if (amountIn > 0) {\\n            uint256 reinvestAmount;\\n\\n            if (strategy.reinvest.active) {\\n                (reinvestAmount, success) = _executeReinvest(\\n                    strategy.reinvest,\\n                    amountIn\\n                );\\n\\n                emit ReinvestExecuted(strategyId_, success, reinvestAmount);\\n            }\\n\\n            if (success) {\\n                _reinvestLiquidityTokenBalance[strategyId_] += reinvestAmount;\\n            } else _targetBalances[targetAddress] += amountIn;\\n\\n            _baseBalances[baseAddress] -= strategy.amount;\\n\\n            emit StrategyExecuted(strategyId_, amountIn, success);\\n            return true;\\n        } else return false;\\n    }\\n\\n    /**\\n     * @dev logic to subscribe strategy to an executor\\n     * @param strategyData_ data struct of the strategy to subscribe\\n     */\\n    function _subscribeToExecutor(Strategy memory strategyData_) internal {\\n        IDCAExecutor(_executor()).Subscribe(strategyData_);\\n        _strategies[strategyData_.strategyId].active = true;\\n        _totalActiveStrategies += 1;\\n        emit StrategySubscription(strategyData_.strategyId, _executor(), true);\\n    }\\n\\n    /**\\n     * @dev logic to unsubscribe strategy to an executor\\n     * @param strategyId_ Id of the strategy to unsubscribe\\n     */\\n    function _unsubscribeToExecutor(uint256 strategyId_) internal {\\n        IDCAExecutor(_executor()).Unsubscribe(\\n            address(this),\\n            strategyId_,\\n            _strategies[strategyId_].interval\\n        );\\n        _strategies[strategyId_].active = false;\\n        _totalActiveStrategies--;\\n        emit StrategySubscription(strategyId_, _executor(), false);\\n    }\\n\\n    /**\\n     * @dev logic to transfer the fee to the executor contract\\n     * @param feeAmount_ amount of the token to transfer as fee\\n     * @param tokenAddress_ token address of the payable fee token\\n     */\\n    function _transferFee(uint256 feeAmount_, address tokenAddress_) private {\\n        IERC20(tokenAddress_).safeTransfer(_executor(), feeAmount_);\\n    }\\n\\n    /**\\n     * @notice REINVEST Logic\\n     */\\n    /**\\n     * @dev logic to execute a reinvest portion of the strategy\\n     * @notice Only working on call, not delegatecall\\n     * @param reinvest_ reinvest data struct of the strategy being executed\\n     * @param amount_ amount of the target token to reinvest\\n     */\\n    function _executeReinvest(\\n        Reinvest memory reinvest_,\\n        uint256 amount_\\n    ) internal returns (uint256 amount, bool success) {\\n        if (DCAREINVEST_LIBRARY.isActive()) {\\n            (bool txSuccess, bytes memory returnData) = address(\\n                DCAREINVEST_LIBRARY\\n            ).delegatecall(\\n                    abi.encodeWithSelector(\\n                        DCAREINVEST_LIBRARY.executeReinvest.selector,\\n                        reinvest_,\\n                        amount_\\n                    )\\n                );\\n            if (txSuccess) {\\n                (amount, success) = abi.decode(returnData, (uint256, bool));\\n                return (amount, success);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    /**\\n     * @dev withdraws and unwinds a given amount of the reinvest amount\\n     * @notice NOT WORKING YET\\n     * @param strategyId_ id of the strategy to be withdrawn\\n     * @param reinvest_ reinvest data struct of the strategy being withdrawn\\n     * @param amount_ amount of the target token to withdraw\\n     */\\n    function _withdrawReinvest(\\n        uint256 strategyId_,\\n        Reinvest memory reinvest_,\\n        uint256 amount_\\n    ) internal returns (uint256 amount, bool success) {\\n        (bool txSuccess, bytes memory returnData) = address(DCAREINVEST_LIBRARY)\\n            .delegatecall(\\n                abi.encodeWithSelector(\\n                    DCAREINVEST_LIBRARY.unwindReinvest.selector,\\n                    reinvest_,\\n                    amount_\\n                )\\n            );\\n        if (txSuccess) {\\n            (amount, success) = abi.decode(returnData, (uint256, bool));\\n            _reinvestLiquidityTokenBalance[strategyId_] -= amount_;\\n            _targetBalances[\\n                _strategies[strategyId_].targetToken.tokenAddress\\n            ] += amount_;\\n\\n            return (amount, success);\\n        }\\n\\n        return (amount, success);\\n    }\\n\\n    /**\\n     * @dev set a new Reinvest contract address\\n     * @param newAddress_ the address of the new reinvest contract\\n     */\\n    function _setReinvestAddress(address newAddress_) internal {\\n        // require(newAddress_ != address(0), \\\"Invalid Reinvest Library Address\\\");\\n        DCAREINVEST_LIBRARY = IDCAReinvest(newAddress_);\\n        emit ReinvestLibraryChanged(newAddress_);\\n    }\\n\\n    /**\\n     * @dev get the Reinvest Contract\\n     * @return the Reinvest Contract instance\\n     */\\n    function _getReinvestContract() internal view returns (IDCAReinvest) {\\n        return DCAREINVEST_LIBRARY;\\n    }\\n\\n    /**\\n     * @notice Helpers Logic\\n     */\\n\\n    /**\\n     * @dev returns UI data for strategy interval timing\\n     * @param strategyId_ Strategy Id of the strategy data to get\\n     * @return lastEx {uint256} time of last execution (seconds)\\n     * @return secondsLeft {uint256} seconds left till strategy is in window\\n     * @return checkReturn {bool} if the strategy is in the window\\n     */\\n    function getTimeTillWindow(\\n        uint256 strategyId_\\n    )\\n        public\\n        view\\n        returns (uint256 lastEx, uint256 secondsLeft, bool checkReturn)\\n    {\\n        lastEx = _lastExecution[strategyId_];\\n        Interval inter = _strategies[strategyId_].interval;\\n        secondsLeft = inter.secondsLeftTillWindow(lastEx);\\n        checkReturn = secondsLeft == 0;\\n        return (lastEx, secondsLeft, checkReturn);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0xcEa6f09d8cE5d4173EA2dEB416B86cCEAA36aD3B","bytecode":"","deployedBytecode":"0x60806040526004361061018d5760003560e01c806377b1e1ce116100d5578063c600589311610084578063ea26752e11610061578063ea26752e146104c4578063f2fde38b146104e4578063f424eeb514610504578063faf9e0181461052457005b8063c600589314610454578063ca4c8b3114610474578063d28cbce8146104a457005b80639665b658116100b25780639665b658146103f45780639a01911914610414578063c1ddd6391461043457005b806377b1e1ce1461039457806379c24ebb146103b45780638da5cb5b146103d657005b80632ecad33b1161013c5780633989650f116101195780633989650f1461030957806357e0fc8d1461033f5780636f2d41cb1461035f578063715018a61461037f57005b80632ecad33b1461026a578063350157a8146102ae5780633887d28b146102cc57005b80630a2f52a61161016a5780630a2f52a6146101fd5780631738e2171461021d57806321901fa81461024a57005b80630283e5fa146101965780630853ac1c146101b657806308dacd3b146101cb57005b3661019457005b005b3480156101a257600080fd5b506101946101b1366004613edf565b610544565b3480156101c257600080fd5b50610194610655565b3480156101d757600080fd5b506101e0610669565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020957600080fd5b50610194610218366004613edf565b610682565b34801561022957600080fd5b5061023d610238366004613edf565b610a52565b6040516101f49190614034565b34801561025657600080fd5b50610194610265366004614109565b610d7a565b34801561027657600080fd5b506102a0610285366004614135565b6001600160a01b031660009081526004602052604090205490565b6040519081526020016101f4565b3480156102ba57600080fd5b506002546001600160a01b03166101e0565b3480156102d857600080fd5b506102ec6102e7366004613edf565b610ecc565b6040805193845260208401929092521515908201526060016101f4565b34801561031557600080fd5b506102a0610324366004614135565b6001600160a01b031660009081526005602052604090205490565b34801561034b57600080fd5b5061019461035a366004613edf565b610f1d565b34801561036b57600080fd5b5061019461037a366004613edf565b6110da565b34801561038b57600080fd5b50610194611866565b3480156103a057600080fd5b506101946103af366004614135565b611878565b3480156103c057600080fd5b506103c9611889565b6040516101f49190614152565b3480156103e257600080fd5b506001546001600160a01b03166101e0565b34801561040057600080fd5b5061019461040f366004614135565b611902565b34801561042057600080fd5b5061019461042f366004614330565b611913565b34801561044057600080fd5b5061019461044f366004614377565b611a3f565b34801561046057600080fd5b506000546101e0906001600160a01b031681565b34801561048057600080fd5b5061049461048f3660046143d8565b611a92565b60405190151581526020016101f4565b3480156104b057600080fd5b506102a06104bf366004613edf565b61208b565b3480156104d057600080fd5b506101946104df366004614109565b6120f2565b3480156104f057600080fd5b506101946104ff366004614135565b6122fd565b34801561051057600080fd5b5061019461051f366004614109565b612351565b34801561053057600080fd5b5061019461053f366004614135565b61241b565b6002546001600160a01b031633146105c95760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084015b60405180910390fd5b6000818152600360205260408120600890810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580546001929061061390849061443e565b90915550506002546040516000916001600160a01b03169083907feaf50fdfc2dd0f0e3e225947d9b119a052749378f4cdc306b079ea00842806d8908490a450565b61065d612459565b610667600061249f565b565b600061067d600a546001600160a01b031690565b905090565b61068a612459565b60008181526003602090815260409182902082516101008101845281546001600160a01b039081168252845160608101865260018401805492831682527401000000000000000000000000000000000000000090920460ff16818601526002840180546109ae9794968701949293928401919061070690614451565b80601f016020809104026020016040519081016040528092919081815260200182805461073290614451565b801561077f5780601f106107545761010080835404028352916020019161077f565b820191906000526020600020905b81548152906001019060200180831161076257829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b038116835274010000000000000000000000000000000000000000900460ff1660208084019190915260048601805491909501949293919291840191906107e890614451565b80601f016020809104026020016040519081016040528092919081815260200182805461081490614451565b80156108615780601f1061083657610100808354040283529160200191610861565b820191906000526020600020905b81548152906001019060200180831161084457829003601f168201915b505050919092525050508152600582015460209091019060ff16600781111561088c5761088c613f7d565b600781111561089d5761089d613f7d565b815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff16151515158152602001600982016040518060800160405290816000820180546108f090614451565b80601f016020809104026020016040519081016040528092919081815260200182805461091c90614451565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526201000090046001600160a01b031660609091015290525060c0015190565b610a465760405162461bcd60e51b815260206004820152604360248201527f4443414163636f756e74203a205b556e7375627363726962655374726174656760448201527f795d20537472617465677920697320616c726561647920556e7375627363726960648201527f6265640000000000000000000000000000000000000000000000000000000000608482015260a4016105c0565b610a4f81612501565b50565b610a5a613e10565b60008281526003602090815260409182902082516101008101845281546001600160a01b039081168252845160608101865260018401805492831682527401000000000000000000000000000000000000000090920460ff168186015260028401805493969495870194919391840191610ad390614451565b80601f0160208091040260200160405190810160405280929190818152602001828054610aff90614451565b8015610b4c5780601f10610b2157610100808354040283529160200191610b4c565b820191906000526020600020905b815481529060010190602001808311610b2f57829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b038116835274010000000000000000000000000000000000000000900460ff166020808401919091526004860180549190950194929391929184019190610bb590614451565b80601f0160208091040260200160405190810160405280929190818152602001828054610be190614451565b8015610c2e5780601f10610c0357610100808354040283529160200191610c2e565b820191906000526020600020905b815481529060010190602001808311610c1157829003601f168201915b505050919092525050508152600582015460209091019060ff166007811115610c5957610c59613f7d565b6007811115610c6a57610c6a613f7d565b815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff1615151515815260200160098201604051806080016040529081600082018054610cbd90614451565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990614451565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526201000090046001600160a01b031660609091015290525092915050565b610d82612459565b6001600160a01b038216600090815260046020526040902054811115610e105760405162461bcd60e51b815260206004820152603460248201527f4443414163636f756e74203a205b556e46756e644163636f756e745d2042616c60448201527f616e6365206f6620746f6b656e20746f206c6f7700000000000000000000000060648201526084016105c0565b6001600160a01b03821660009081526004602052604081208054839290610e3890849061443e565b90915550506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec791906144a4565b505050565b6000818152600760208181526040808420546003909252832060050154909291829160ff1690610f0f9085908390811115610f0957610f09613f7d565b906125dd565b925050811590509193909250565b610f25612459565b60008181526006602052604090205480610fa75760405162461bcd60e51b815260206004820152603a60248201527f5b4443414163636f756e745d203a205b556e57696e645265696e766573745d2060448201527f2d20204e6f20696e766573746d656e7420746f20756e77696e6400000000000060648201526084016105c0565b6000828152600360205260408082208151608081019092526009018054839261109392879282908290610fd990614451565b80601f016020809104026020016040519081016040528092919081815260200182805461100590614451565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526201000090046001600160a01b031660609091015285612617565b91509150801515847f1dd27151631835dad107ba13bb502b6952532bee5624eee50073de9776aac2d4846040516110cc91815260200190565b60405180910390a350505050565b6110e2612459565b600081815260036020908152604080832081516101008101835281546001600160a01b039081168252835160608101855260018401805492831682527401000000000000000000000000000000000000000090920460ff1681870152600284018054939694959487019491939184019161115b90614451565b80601f016020809104026020016040519081016040528092919081815260200182805461118790614451565b80156111d45780601f106111a9576101008083540402835291602001916111d4565b820191906000526020600020905b8154815290600101906020018083116111b757829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b038116835274010000000000000000000000000000000000000000900460ff16602080840191909152600486018054919095019492939192918401919061123d90614451565b80601f016020809104026020016040519081016040528092919081815260200182805461126990614451565b80156112b65780601f1061128b576101008083540402835291602001916112b6565b820191906000526020600020905b81548152906001019060200180831161129957829003601f168201915b505050919092525050508152600582015460209091019060ff1660078111156112e1576112e1613f7d565b60078111156112f2576112f2613f7d565b815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581526020016009820160405180608001604052908160008201805461134590614451565b80601f016020809104026020016040519081016040528092919081815260200182805461137190614451565b80156113be5780601f10611393576101008083540402835291602001916113be565b820191906000526020600020905b8154815290600101906020018083116113a157829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526201000090046001600160a01b031660609091015290525060c0810151909150156114775760405162461bcd60e51b815260206004820152603f60248201527f4443414163636f756e74203a205b53756273637269626553747261746567795d60448201527f20537472617465677920697320616c726561647920537562736372696265640060648201526084016105c0565b60808101516114879060056144c1565b602080830151516001600160a01b031660009081526004909152604090205410156115405760405162461bcd60e51b815260206004820152604e60248201527f4443414163636f756e74203a205b53756273637269626553747261746567795d60448201527f204e65656420746f2068617665203520657865637574696f6e732066756e646560648201527f6420746f20737562736372696265000000000000000000000000000000000000608482015260a4016105c0565b60008281526003602090815260409182902082516101008101845281546001600160a01b039081168252845160608101865260018401805492831682527401000000000000000000000000000000000000000090920460ff1681860152600284018054611862979496870194929392840191906115bc90614451565b80601f01602080910402602001604051908101604052809291908181526020018280546115e890614451565b80156116355780601f1061160a57610100808354040283529160200191611635565b820191906000526020600020905b81548152906001019060200180831161161857829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b038116835274010000000000000000000000000000000000000000900460ff16602080840191909152600486018054919095019492939192918401919061169e90614451565b80601f01602080910402602001604051908101604052809291908181526020018280546116ca90614451565b80156117175780601f106116ec57610100808354040283529160200191611717565b820191906000526020600020905b8154815290600101906020018083116116fa57829003601f168201915b505050919092525050508152600582015460209091019060ff16600781111561174257611742613f7d565b600781111561175357611753613f7d565b815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff16151515158152602001600982016040518060800160405290816000820180546117a690614451565b80601f01602080910402602001604051908101604052809291908181526020018280546117d290614451565b801561181f5780601f106117f45761010080835404028352916020019161181f565b820191906000526020600020905b81548152906001019060200180831161180257829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526201000090046001600160a01b03166060909101529052506127a4565b5050565b61186e612459565b61066760006128ba565b611880612459565b610a4f81612924565b606061189d600a546001600160a01b031690565b6001600160a01b0316630ca750446040518163ffffffff1660e01b8152600401600060405180830381865afa1580156118da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067d91908101906144d8565b61190a612459565b610a4f8161249f565b61191b612459565b8060200151156119f757600082815260036020526040902081518291600901908190611947908261459d565b5060208201516001909101805460408401516060909401516001600160a01b031662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff60ff95909516610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff941515949094167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009092169190911792909217929092161790555050565b6040805160006080820181815260a08301845282526020808301829052828401829052306060840152858252600390529190912081516009909101908190611947908261459d565b611a47612459565b611a58611a5384614748565b612986565b8115611a7b57611a7b611a75611a6d85614748565b602001515190565b83612351565b8015610ec757610ec7611a8d84614748565b6127a4565b6002546000906001600160a01b03163314611b155760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016105c0565b6000838152600760208181526040808420546003909252909220600501548592611b5492909160ff1690811115611b4e57611b4e613f7d565b90612cf1565b611bc65760405162461bcd60e51b815260206004820152603160248201527f4443414163636f756e74203a205b696e57696e646f775d20537472617465677960448201527f20496e74657276616c206e6f74206d657400000000000000000000000000000060648201526084016105c0565b60008481526003602090815260409182902082516101008101845281546001600160a01b039081168252845160608101865260018401805492831682527401000000000000000000000000000000000000000090920460ff1681860152600284018054611c429794968701949293928401919061070690614451565b611cb45760405162461bcd60e51b815260206004820152602d60248201527f4443414163636f756e74203a205b457865637574655d2053747261746567792060448201527f6973206e6f74206163746976650000000000000000000000000000000000000060648201526084016105c0565b6000848152600360209081526040808320600681015482516101008101845282546001600160a01b039081168252845160608101865260018501805492831682527401000000000000000000000000000000000000000090920460ff168188015260028501805494986004989097611fe4979596918701949290840191611d3a90614451565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6690614451565b8015611db35780601f10611d8857610100808354040283529160200191611db3565b820191906000526020600020905b815481529060010190602001808311611d9657829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b038116835274010000000000000000000000000000000000000000900460ff166020808401919091526004860180549190950194929391929184019190611e1c90614451565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4890614451565b8015611e955780601f10611e6a57610100808354040283529160200191611e95565b820191906000526020600020905b815481529060010190602001808311611e7857829003601f168201915b505050919092525050508152600582015460209091019060ff166007811115611ec057611ec0613f7d565b6007811115611ed157611ed1613f7d565b815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff1615151515815260200160098201604051806080016040529081600082018054611f2490614451565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5090614451565b8015611f9d5780601f10611f7257610100808354040283529160200191611f9d565b820191906000526020600020905b815481529060010190602001808311611f8057829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526001600160a01b036201000090910416606090910152905250602001515190565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156120795760405162461bcd60e51b815260206004820152602b60248201527f4443414163636f756e74203a205b457865637574655d20426173652042616c6160448201527f6e636520746f6f206c6f7700000000000000000000000000000000000000000060648201526084016105c0565b6120838484612d05565b949350505050565b60006120df6040518060400160405280601481526020017f476f74205265696e766573742042616c616e636500000000000000000000000081525060066000858152602001908152602001600020546131f0565b5060009081526006602052604090205490565b6120fa612459565b6001600160a01b0382166000908152600560205260409020548111156121885760405162461bcd60e51b815260206004820152603760248201527f4443414163636f756e74203a205b5769746864726177536176696e67735d204260448201527f616c616e6365206f6620746f6b656e20746f6f206c6f7700000000000000000060648201526084016105c0565b6001600160a01b038216600090815260056020526040812080548392906121b090849061443e565b90915550600090506001600160a01b0383166121fd57604051339083156108fc029084906000818181858888f193505050501580156121f3573d6000803e3d6000fd5b506001905061228a565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228791906144a4565b90505b80610ec75760405162461bcd60e51b815260206004820152603060248201527f5b4443414163636f756e745d203a205b5769746864726177536176696e67735d60448201527f205472616e73666572206661696c65640000000000000000000000000000000060648201526084016105c0565b612305612459565b6001600160a01b038116612348576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016105c0565b610a4f816128ba565b612359612459565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156123c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e991906144a4565b506001600160a01b03821660009081526004602052604081208054839290612412908490614822565b90915550505050565b612423612459565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905550565b6001546001600160a01b03163314610667576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016105c0565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f7d5b70f43ce014e6429a5a008d4a39b49e0d74afc4eec87d6ecf23bee44a6f5090600090a250565b600254600082815260036020526040908190206005015490517f6745b3e10000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691636745b3e191612565913091869160ff90911690600401614835565b600060405180830381600087803b15801561257f57600080fd5b505af1158015612593573d6000803e3d6000fd5b5050506000828152600360205260408120600890810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055805492509061061383614859565b6000806125e984613263565b6125f39084614822565b905080421161260b57612606428261443e565b612083565b60009150505b92915050565b600a546040516000918291829182916001600160a01b03909116907fbcb9236e0000000000000000000000000000000000000000000000000000000090612664908990899060240161488e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516126cf91906148b0565b600060405180830381855af49150503d806000811461270a576040519150601f19603f3d011682016040523d82523d6000602084013e61270f565b606091505b50915091508115612799578080602001905181019061272e91906148cc565b60008981526006602052604081208054939750919550879261275190849061443e565b90915550506000878152600360208181526040808420909201546001600160a01b03168352600590528120805487929061278c908490614822565b9091555061279c92505050565b50505b935093915050565b6002546040517fab6319b50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063ab6319b5906127ed908490600401614034565b600060405180830381600087803b15801561280757600080fd5b505af115801561281b573d6000803e3d6000fd5b5050505060a08101516000908152600360205260408120600890810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558154909290612873908490614822565b909155505060025460a08201516040516001926001600160a01b031691907feaf50fdfc2dd0f0e3e225947d9b119a052749378f4cdc306b079ea00842806d890600090a450565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fc940884583f5b0b149156a39a5aa8a3dcc853aab9bbf64f0c88fc9fbc1a8e55e90600090a250565b61298f816133d0565b612a015760405162461bcd60e51b815260206004820152603260248201527f4443414163636f756e74203a205b536574757053747261746567795d20496e7660448201527f616c69642073747261746567792064617461000000000000000000000000000060648201526084016105c0565b60098054906000612a11836148f1565b909155505060095460a08201819052308252600060c0830181905290815260036020908152604091829020835181546001600160a01b039182167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161782558285015180516001840180549583015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009096169190931617939093178155928201518493919291906002840190612ae4908261459d565b5050506040828101518051600384018054602084015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091166001600160a01b0390931692909217919091178155918101519091906004840190612b63908261459d565b50505060608201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836007811115612ba757612ba7613f7d565b02179055506080820151600682015560a0820151600782015560c08201516008820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560e0820151805160098301908190612c0e908261459d565b506020820151600190910180546040808501516060909501516001600160a01b031662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff60ff96909616610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff951515959095167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009093169290921793909317939093169290921790915560095490519092507f019c06b860251593f8cc023cca35c7c482867df58804fd2963b3aebe5e7f8ef89150600090a250565b6000612cfd83836125dd565b159392505050565b60008281526007602090815260408083204290556003825280832081516101008101835281546001600160a01b039081168252835160608101855260018401805492831682527401000000000000000000000000000000000000000090920460ff1681870152600284018054889794969487019492939284019190612d8990614451565b80601f0160208091040260200160405190810160405280929190818152602001828054612db590614451565b8015612e025780601f10612dd757610100808354040283529160200191612e02565b820191906000526020600020905b815481529060010190602001808311612de557829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b038116835274010000000000000000000000000000000000000000900460ff166020808401919091526004860180549190950194929391929184019190612e6b90614451565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9790614451565b8015612ee45780601f10612eb957610100808354040283529160200191612ee4565b820191906000526020600020905b815481529060010190602001808311612ec757829003601f168201915b505050919092525050508152600582015460209091019060ff166007811115612f0f57612f0f613f7d565b6007811115612f2057612f20613f7d565b815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff1615151515815260200160098201604051806080016040529081600082018054612f7390614451565b80601f0160208091040260200160405190810160405280929190818152602001828054612f9f90614451565b8015612fec5780601f10612fc157610100808354040283529160200191612fec565b820191906000526020600020905b815481529060010190602001808311612fcf57829003601f168201915b50505091835250506001919091015460ff8082161515602084015261010082041660408301526201000090046001600160a01b031660609091015290525060808101519091506000906130449061ffff861690613439565b90506000818360800151613058919061443e565b905060008061307285602081015151604090910151519091565b9092509050831561308757613087848361344c565b6130918284613472565b50600061309f838386613571565b9050600081156131e05760008760e001516020015115613107576130c78860e0015184613935565b604051828152909350909150821515908c907ff62a807457f5a4e65b520a759ff4c3c3977dcafd5864191f95426e9366b793569060200160405180910390a35b81156131365760008b8152600660205260408120805483929061312b908490614822565b909155506131649050565b6001600160a01b0384166000908152600560205260408120805485929061315e908490614822565b90915550505b60808801516001600160a01b0386166000908152600460205260408120805490919061319190849061443e565b9091555050604051821515815283908c907ff062e3202b961c4181d7be50c794a184dd3d6747ba3d5c3f1a43516410f248709060200160405180910390a3600198505050505050505050612611565b6000975050505050505050612611565b6118628282604051602401613206929190614929565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052613ae5565b60008082600781111561327857613278613f7d565b036132855750603c919050565b600182600781111561329957613299613f7d565b036132aa57612611603c60056144c1565b60028260078111156132be576132be613f7d565b036132cd575062015180919050565b60038260078111156132e1576132e1613f7d565b036132f4576126116201518060026144c1565b600482600781111561330857613308613f7d565b0361331b576126116201518060036144c1565b600582600781111561332f5761332f613f7d565b0361333e575062093a80919050565b600682600781111561335257613352613f7d565b036133655761261162093a8060026144c1565b600782600781111561337957613379613f7d565b0361338857506224ea00919050565b60405162461bcd60e51b815260206004820152601e60248201527f4443415374726174656779203a20496e76616c696420696e74657276616c000060448201526064016105c0565b60008060079050600081846060015160078111156133f0576133f0613f7d565b855191101591506001600160a01b03161580159061341b57506020840151516001600160a01b031615155b801561342b575060008460800151115b801561208357509392505050565b60006134458383613aee565b9392505050565b6118626134616002546001600160a01b031690565b6001600160a01b0383169084613b22565b6000805461348b9084906001600160a01b031684613ba2565b905080612611576000546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af11580156134fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352291906144a4565b9050806126115760405162461bcd60e51b815260206004820152601960248201527f5377617020416c6c6f77616e636520536574204661696c65640000000000000060448201526064016105c0565b60006001600160a01b038316613822576000546040805160e0810182526001600160a01b03878116825282517f4aa4a4fc00000000000000000000000000000000000000000000000000000000815292519316926304e45aaf926020808401928692634aa4a4fc9260048083019391928290030181865afa1580156135fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361e919061493c565b6001600160a01b031681526000805462ffffff7401000000000000000000000000000000000000000090910416602083015230604080840191909152606083018890526080830182905260a090920152517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526137049190600401600060e0820190506001600160a01b0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a08401528060c08501511660c08401525092915050565b6020604051808303816000875af1158015613723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137479190614959565b905060008054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561379a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137be919061493c565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b81526004016137eb91815260200190565b600060405180830381600087803b15801561380557600080fd5b505af1158015613819573d6000803e3d6000fd5b50505050613445565b600080546040805160e0810182526001600160a01b0388811682528781166020830190815262ffffff74010000000000000000000000000000000000000000860481168486019081523060608601908152608086018b815260a087018a815260c088019a8b5297517f04e45aaf000000000000000000000000000000000000000000000000000000008152965186166004880152935185166024870152905190911660448501525182166064840152516084830152915160a48201529251811660c484015216906304e45aaf9060e4016020604051808303816000875af1158015613911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120839190614959565b600080600a60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561398b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139af91906144a4565b15613ad757600a5460405160009182916001600160a01b03909116907f454f002a00000000000000000000000000000000000000000000000000000000906139fd908990899060240161488e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613a6891906148b0565b600060405180830381855af49150503d8060008114613aa3576040519150601f19603f3d011682016040523d82523d6000602084013e613aa8565b606091505b50915091508115613ad45780806020019051810190613ac791906148cc565b9094509250613ade915050565b50505b5060009050805b9250929050565b610a4f81613c3a565b600060018361ffff161015613b0557506000612611565b6000612710613b1861ffff8616856144c1565b6120839190614972565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ec7908490613c5b565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015613c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c309190614959565b1015949350505050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6000613c706001600160a01b03841683613cd7565b90508051600014158015613c95575080806020019051810190613c9391906144a4565b155b15610ec7576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016105c0565b60606134458383600084600080856001600160a01b03168486604051613cfd91906148b0565b60006040518083038185875af1925050503d8060008114613d3a576040519150601f19603f3d011682016040523d82523d6000602084013e613d3f565b606091505b5091509150613d4f868383613d59565b9695505050505050565b606082613d6e57613d6982613dce565b613445565b8151158015613d8557506001600160a01b0384163b155b15613dc7576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016105c0565b5080613445565b805115613dde5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180610100016040528060006001600160a01b03168152602001613e5c604051806060016040528060006001600160a01b03168152602001600060ff168152602001606081525090565b815260408051606080820183526000808352602083810191909152928201529101908152602001600081526020016000815260200160008152602001600015158152602001613eda604051806080016040528060608152602001600015158152602001600060ff16815260200160006001600160a01b031681525090565b905290565b600060208284031215613ef157600080fd5b5035919050565b60005b83811015613f13578181015183820152602001613efb565b50506000910152565b60008151808452613f34816020860160208601613ef8565b601f01601f19169290920160200192915050565b6001600160a01b03815116825260ff602082015116602083015260006040820151606060408501526120836060850182613f1c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60088110613fe3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6000815160808452613ffc6080850182613f1c565b905060208301511515602085015260ff60408401511660408501526001600160a01b0360608401511660608501528091505092915050565b6020815261404e6020820183516001600160a01b03169052565b6000602083015161010080604085015261406c610120850183613f48565b91506040850151601f198086850301606087015261408a8483613f48565b9350606087015191506140a06080870183613fac565b608087015160a087015260a087015160c087015260c087015191506140c960e087018315159052565b60e0870151915080868503018387015250613d4f8382613fe7565b6001600160a01b0381168114610a4f57600080fd5b8035614104816140e4565b919050565b6000806040838503121561411c57600080fd5b8235614127816140e4565b946020939093013593505050565b60006020828403121561414757600080fd5b8135613445816140e4565b6020815260006134456020830184613f1c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156141b8576141b8614165565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156141e7576141e7614165565b604052919050565b600067ffffffffffffffff82111561420957614209614165565b50601f01601f191660200190565b600061422a614225846141ef565b6141be565b905082815283838301111561423e57600080fd5b828260208301376000602084830101529392505050565b8015158114610a4f57600080fd5b803561410481614255565b803560ff8116811461410457600080fd5b60006080828403121561429157600080fd5b6040516080810167ffffffffffffffff82821081831117156142b5576142b5614165565b8160405282935084359150808211156142cd57600080fd5b508301601f810185136142df57600080fd5b6142ee85823560208401614217565b82525060208301356142ff81614255565b60208201526143106040840161426e565b60408201526060830135614323816140e4565b6060919091015292915050565b6000806040838503121561434357600080fd5b82359150602083013567ffffffffffffffff81111561436157600080fd5b61436d8582860161427f565b9150509250929050565b60008060006060848603121561438c57600080fd5b833567ffffffffffffffff8111156143a357600080fd5b840161010081870312156143b657600080fd5b92506020840135915060408401356143cd81614255565b809150509250925092565b600080604083850312156143eb57600080fd5b82359150602083013561ffff8116811461440457600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156126115761261161440f565b600181811c9082168061446557607f821691505b60208210810361449e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156144b657600080fd5b815161344581614255565b80820281158282048414176126115761261161440f565b6000602082840312156144ea57600080fd5b815167ffffffffffffffff81111561450157600080fd5b8201601f8101841361451257600080fd5b8051614520614225826141ef565b81815285602083850101111561453557600080fd5b614546826020830160208601613ef8565b95945050505050565b601f821115610ec757600081815260208120601f850160051c810160208610156145765750805b601f850160051c820191505b8181101561459557828155600101614582565b505050505050565b815167ffffffffffffffff8111156145b7576145b7614165565b6145cb816145c58454614451565b8461454f565b602080601f83116001811461461e57600084156145e85750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614595565b600085815260208120601f198616915b8281101561464d5788860151825594840194600190910190840161462e565b508582101561468957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000606082840312156146ab57600080fd5b6040516060810167ffffffffffffffff82821081831117156146cf576146cf614165565b81604052829350843591506146e3826140e4565b8183526146f26020860161426e565b6020840152604085013591508082111561470b57600080fd5b508301601f8101851361471d57600080fd5b61472c85823560208401614217565b6040830152505092915050565b80356008811061410457600080fd5b6000610100823603121561475b57600080fd5b614763614194565b61476c836140f9565b8152602083013567ffffffffffffffff8082111561478957600080fd5b61479536838701614699565b602084015260408501359150808211156147ae57600080fd5b6147ba36838701614699565b60408401526147cb60608601614739565b60608401526080850135608084015260a085013560a08401526147f060c08601614263565b60c084015260e085013591508082111561480957600080fd5b506148163682860161427f565b60e08301525092915050565b808201808211156126115761261161440f565b6001600160a01b038416815260208101839052606081016120836040830184613fac565b6000816148685761486861440f565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6040815260006148a16040830185613fe7565b90508260208301529392505050565b600082516148c2818460208701613ef8565b9190910192915050565b600080604083850312156148df57600080fd5b82519150602083015161440481614255565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036149225761492261440f565b5060010190565b6040815260006148a16040830185613f1c565b60006020828403121561494e57600080fd5b8151613445816140e4565b60006020828403121561496b57600080fd5b5051919050565b6000826149a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220647e72266bfdbab866feff53a429bb3ffc7979946b669418fc88fb4071eacf8364736f6c63430008140033","abi":[{"inputs":[{"internalType":"address","name":"executorAddress_","type":"address"},{"internalType":"address","name":"swapRouter_","type":"address"},{"internalType":"address","name":"owner_","type":"address"},{"internalType":"address","name":"reinvestLibraryContract_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newAddress_","type":"address"}],"name":"ExecutorAddressChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"strategyId_","type":"uint256"},{"indexed":true,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"uint256","name":"amountReturned","type":"uint256"}],"name":"ReinvestExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newLibraryAddress","type":"address"}],"name":"ReinvestLibraryChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"strategyId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bool","name":"success","type":"bool"}],"name":"ReinvestUnwound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"StrategyCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"strategyId_","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amountIn_","type":"uint256"},{"indexed":false,"internalType":"bool","name":"reInvested_","type":"bool"}],"name":"StrategyExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"strategyId_","type":"uint256"},{"indexed":true,"internalType":"address","name":"executor_","type":"address"},{"indexed":true,"internalType":"bool","name":"subscribed_","type":"bool"}],"name":"StrategySubscription","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"AddFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"},{"internalType":"uint16","name":"feeAmount_","type":"uint16"}],"name":"Execute","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"ExecutorDeactivate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"SWAP_ROUTER","outputs":[{"internalType":"contract ISwapRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"accountAddress","type":"address"},{"components":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"ticker","type":"string"}],"internalType":"struct IDCADataStructures.TokenData","name":"baseToken","type":"tuple"},{"components":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"ticker","type":"string"}],"internalType":"struct IDCADataStructures.TokenData","name":"targetToken","type":"tuple"},{"internalType":"enum IDCADataStructures.Interval","name":"interval","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"strategyId","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"},{"components":[{"internalType":"bytes","name":"reinvestData","type":"bytes"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint8","name":"investCode","type":"uint8"},{"internalType":"address","name":"dcaAccountAddress","type":"address"}],"internalType":"struct IDCADataStructures.Reinvest","name":"reinvest","type":"tuple"}],"internalType":"struct IDCADataStructures.Strategy","name":"newStrategy_","type":"tuple"},{"internalType":"uint256","name":"seedFunds_","type":"uint256"},{"internalType":"bool","name":"subscribeToExecutor_","type":"bool"}],"name":"SetupStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"SubscribeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"UnsubscribeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"UnwindReinvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"WithdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"WithdrawSavings","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executorAddress_","type":"address"}],"name":"changeExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newLibraryAddress_","type":"address"}],"name":"changeReinvestLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAttachedReinvestLibraryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAttachedReinvestLibraryVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"}],"name":"getBaseBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getExecutorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"getReinvestTokenBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"getStrategyData","outputs":[{"components":[{"internalType":"address","name":"accountAddress","type":"address"},{"components":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"ticker","type":"string"}],"internalType":"struct IDCADataStructures.TokenData","name":"baseToken","type":"tuple"},{"components":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"ticker","type":"string"}],"internalType":"struct IDCADataStructures.TokenData","name":"targetToken","type":"tuple"},{"internalType":"enum IDCADataStructures.Interval","name":"interval","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"strategyId","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"},{"components":[{"internalType":"bytes","name":"reinvestData","type":"bytes"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint8","name":"investCode","type":"uint8"},{"internalType":"address","name":"dcaAccountAddress","type":"address"}],"internalType":"struct IDCADataStructures.Reinvest","name":"reinvest","type":"tuple"}],"internalType":"struct IDCADataStructures.Strategy","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"}],"name":"getTargetBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"}],"name":"getTimeTillWindow","outputs":[{"internalType":"uint256","name":"lastEx","type":"uint256"},{"internalType":"uint256","name":"secondsLeft","type":"uint256"},{"internalType":"bool","name":"checkReturn","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"removeExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"strategyId_","type":"uint256"},{"components":[{"internalType":"bytes","name":"reinvestData","type":"bytes"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint8","name":"investCode","type":"uint8"},{"internalType":"address","name":"dcaAccountAddress","type":"address"}],"internalType":"struct IDCADataStructures.Reinvest","name":"reinvest_","type":"tuple"}],"name":"setStrategyReinvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"swapRouter_","type":"address"}],"name":"updateSwapAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}