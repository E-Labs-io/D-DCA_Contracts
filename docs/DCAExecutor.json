{
    "methods": {
        "Active()": {
            "stateMutability": "view",
            "code": "function Active() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "CheckIfAdmin(address)": {
            "stateMutability": "view",
            "code": "function CheckIfAdmin(address addressToCheck_) external view returns (bool)",
            "inputs": {
                "addressToCheck_": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "Execute(uint8)": {
            "stateMutability": "nonpayable",
            "code": "function Execute(enum IDCADataStructures.Interval interval_) external nonpayable",
            "inputs": {
                "interval_": {
                    "type": "enum IDCADataStructures.Interval"
                }
            },
            "outputs": {}
        },
        "ForceFeeFund()": {
            "stateMutability": "nonpayable",
            "code": "function ForceFeeFund() external nonpayable",
            "inputs": {},
            "outputs": {}
        },
        "IntervalTimings(uint8)": {
            "stateMutability": "view",
            "code": "function IntervalTimings(enum IDCADataStructures.Interval) external view returns (uint256)",
            "inputs": {
                "_0": {
                    "type": "enum IDCADataStructures.Interval"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "Subscribe(tuple)": {
            "stateMutability": "nonpayable",
            "code": "function Subscribe(IDCADataStructures.Strategy strategy_) external nonpayable returns (bool sucsess)",
            "inputs": {
                "strategy_": {
                    "type": "IDCADataStructures.Strategy"
                }
            },
            "outputs": {
                "sucsess": {
                    "type": "bool"
                }
            }
        },
        "Unsubscribe(tuple)": {
            "stateMutability": "nonpayable",
            "code": "function Unsubscribe(IDCADataStructures.Strategy strategy_) external nonpayable returns (bool sucsess)",
            "inputs": {
                "strategy_": {
                    "type": "IDCADataStructures.Strategy"
                }
            },
            "outputs": {
                "sucsess": {
                    "type": "bool"
                }
            }
        },
        "addAdmin(address)": {
            "stateMutability": "nonpayable",
            "code": "function addAdmin(address newAdmin_) external nonpayable",
            "inputs": {
                "newAdmin_": {
                    "type": "address"
                }
            },
            "outputs": {}
        },
        "owner()": {
            "stateMutability": "view",
            "code": "function owner() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            },
            "details": "Returns the address of the current owner."
        },
        "removeAdmin(address)": {
            "stateMutability": "nonpayable",
            "code": "function removeAdmin(address oldAdmin_) external nonpayable",
            "inputs": {
                "oldAdmin_": {
                    "type": "address"
                }
            },
            "outputs": {}
        },
        "renounceOwnership()": {
            "stateMutability": "nonpayable",
            "code": "function renounceOwnership() external nonpayable",
            "inputs": {},
            "outputs": {},
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
            "stateMutability": "nonpayable",
            "code": "function transferOwnership(address newOwner) external nonpayable",
            "inputs": {
                "newOwner": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
    },
    "events": {
        "ExecutedDCA": {
            "code": "event ExecutedDCA(enum IDCADataStructures.Interval interval_)",
            "inputs": {
                "interval_": {
                    "type": "enum IDCADataStructures.Interval",
                    "indexed": false
                }
            }
        },
        "ExecutionEOAAddressChange": {
            "code": "event ExecutionEOAAddressChange(address newExecutionEOA_, address changer_)",
            "inputs": {
                "newExecutionEOA_": {
                    "type": "address",
                    "indexed": false
                },
                "changer_": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "OwnershipTransferred": {
            "code": "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
            "inputs": {
                "previousOwner": {
                    "type": "address",
                    "indexed": true
                },
                "newOwner": {
                    "type": "address",
                    "indexed": true
                }
            }
        }
    },
    "errors": {
        "OwnableInvalidOwner": {
            "code": "error OwnableInvalidOwner(address owner)",
            "inputs": {
                "owner": {
                    "type": "address"
                }
            },
            "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        },
        "OwnableUnauthorizedAccount": {
            "code": "error OwnableUnauthorizedAccount(address account)",
            "inputs": {
                "account": {
                    "type": "address"
                }
            },
            "details": "The caller account is not authorized to perform an operation."
        }
    },
    "path": "",
    "name": "DCAExecutor"
}