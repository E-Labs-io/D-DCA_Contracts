{
    "methods": {
        "Execute(uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function Execute(uint256 strategyId_, uint256 feeAmount_) external nonpayable",
            "inputs": {
                "strategyId_": {
                    "type": "uint256"
                },
                "feeAmount_": {
                    "type": "uint256"
                }
            },
            "outputs": {}
        },
        "ExecutorDeactivateStrategy(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function ExecutorDeactivateStrategy(uint256 strategyId_) external nonpayable",
            "inputs": {
                "strategyId_": {
                    "type": "uint256"
                }
            },
            "outputs": {}
        },
        "FundAccount(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function FundAccount(contract IERC20 token_, uint256 amount_) external nonpayable",
            "inputs": {
                "token_": {
                    "type": "contract IERC20"
                },
                "amount_": {
                    "type": "uint256"
                }
            },
            "outputs": {}
        },
        "GetBaseTokenCostPerBlock(address)": {
            "stateMutability": "view",
            "code": "function GetBaseTokenCostPerBlock(contract IERC20 baseToken_) external view returns (uint256)",
            "inputs": {
                "baseToken_": {
                    "type": "contract IERC20"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "GetBaseTokenRemainingBlocks(address)": {
            "stateMutability": "view",
            "code": "function GetBaseTokenRemainingBlocks(contract IERC20 baseToken_) external view returns (uint256)",
            "inputs": {
                "baseToken_": {
                    "type": "contract IERC20"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "IntervalTimings(uint8)": {
            "stateMutability": "view",
            "code": "function IntervalTimings(enum IDCADataStructures.Interval) external view returns (uint256)",
            "inputs": {
                "_0": {
                    "type": "enum IDCADataStructures.Interval"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "SetupStrategy(tuple,uint256,bool)": {
            "stateMutability": "nonpayable",
            "code": "function SetupStrategy(IDCADataStructures.Strategy newStrategy_, uint256 seedFunds_, bool subscribeToExecutor_) external nonpayable",
            "inputs": {
                "newStrategy_": {
                    "type": "IDCADataStructures.Strategy"
                },
                "seedFunds_": {
                    "type": "uint256"
                },
                "subscribeToExecutor_": {
                    "type": "bool"
                }
            },
            "outputs": {}
        },
        "SubscribeStrategy(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function SubscribeStrategy(uint256 strategyId_) external nonpayable returns (bool success)",
            "inputs": {
                "strategyId_": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "success": {
                    "type": "bool"
                }
            }
        },
        "UnsubscribeStrategy(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function UnsubscribeStrategy(uint256 strategyId_) external nonpayable returns (bool success)",
            "inputs": {
                "strategyId_": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "success": {
                    "type": "bool"
                }
            }
        },
        "owner()": {
            "stateMutability": "view",
            "code": "function owner() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            },
            "details": "Returns the address of the current owner."
        },
        "removeExecutor()": {
            "stateMutability": "nonpayable",
            "code": "function removeExecutor() external nonpayable",
            "inputs": {},
            "outputs": {}
        },
        "renounceOwnership()": {
            "stateMutability": "nonpayable",
            "code": "function renounceOwnership() external nonpayable",
            "inputs": {},
            "outputs": {},
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
            "stateMutability": "nonpayable",
            "code": "function transferOwnership(address newOwner) external nonpayable",
            "inputs": {
                "newOwner": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
    },
    "events": {
        "DCAExecutorChanged": {
            "code": "event DCAExecutorChanged(address newAddress_)",
            "inputs": {
                "newAddress_": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "OwnershipTransferred": {
            "code": "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
            "inputs": {
                "previousOwner": {
                    "type": "address",
                    "indexed": true
                },
                "newOwner": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "StrategySubscribed": {
            "code": "event StrategySubscribed(uint256 strategyId_, address executor_)",
            "inputs": {
                "strategyId_": {
                    "type": "uint256",
                    "indexed": false
                },
                "executor_": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "StrategyUnsubscribed": {
            "code": "event StrategyUnsubscribed(uint256 strategyId_)",
            "inputs": {
                "strategyId_": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "StratogyExecuted": {
            "code": "event StratogyExecuted(uint256 strategyId_)",
            "inputs": {
                "strategyId_": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        }
    },
    "errors": {
        "OwnableInvalidOwner": {
            "code": "error OwnableInvalidOwner(address owner)",
            "inputs": {
                "owner": {
                    "type": "address"
                }
            },
            "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        },
        "OwnableUnauthorizedAccount": {
            "code": "error OwnableUnauthorizedAccount(address account)",
            "inputs": {
                "account": {
                    "type": "address"
                }
            },
            "details": "The caller account is not authorized to perform an operation."
        }
    },
    "path": "",
    "name": "DCAAccount"
}