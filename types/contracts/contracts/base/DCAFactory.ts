/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DCAFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SWAP_ROUTER"
      | "accountsCreated"
      | "createDCAAccount"
      | "getActiveExecutorAddress"
      | "getDCAAccountsOfUser"
      | "getFactoryActiveState"
      | "getTotalDeployedAccounts"
      | "isActive"
      | "owner"
      | "reInvestLogicContract"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateExecutorAddress"
      | "updateReinvestLibraryAddress"
      | "userDCAAccounts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractActiveStateChange"
      | "DCAAccountCreated"
      | "DCAExecutorAddressChanged"
      | "DCAReinvestContractAddressChanged"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SWAP_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDCAAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveExecutorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDCAAccountsOfUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryActiveState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeployedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reInvestLogicContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutorAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinvestLibraryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDCAAccounts",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SWAP_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDCAAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDCAAccountsOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryActiveState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeployedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reInvestLogicContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReinvestLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDCAAccounts",
    data: BytesLike
  ): Result;
}

export namespace ContractActiveStateChangeEvent {
  export type InputTuple = [newState_: boolean];
  export type OutputTuple = [newState_: boolean];
  export interface OutputObject {
    newState_: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DCAAccountCreatedEvent {
  export type InputTuple = [owner: AddressLike, dcaAccount: AddressLike];
  export type OutputTuple = [owner: string, dcaAccount: string];
  export interface OutputObject {
    owner: string;
    dcaAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DCAExecutorAddressChangedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DCAReinvestContractAddressChangedEvent {
  export type InputTuple = [newLibraryAddress: AddressLike];
  export type OutputTuple = [newLibraryAddress: string];
  export interface OutputObject {
    newLibraryAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DCAFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DCAFactory;
  waitForDeployment(): Promise<this>;

  interface: DCAFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SWAP_ROUTER: TypedContractMethod<[], [string], "view">;

  accountsCreated: TypedContractMethod<[], [bigint], "view">;

  createDCAAccount: TypedContractMethod<[], [void], "nonpayable">;

  getActiveExecutorAddress: TypedContractMethod<[], [string], "view">;

  getDCAAccountsOfUser: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getFactoryActiveState: TypedContractMethod<[], [boolean], "view">;

  getTotalDeployedAccounts: TypedContractMethod<[], [bigint], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reInvestLogicContract: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateExecutorAddress: TypedContractMethod<
    [_newExecutorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReinvestLibraryAddress: TypedContractMethod<
    [newAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  userDCAAccounts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SWAP_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountsCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createDCAAccount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveExecutorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDCAAccountsOfUser"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFactoryActiveState"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getTotalDeployedAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reInvestLogicContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExecutorAddress"
  ): TypedContractMethod<
    [_newExecutorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReinvestLibraryAddress"
  ): TypedContractMethod<[newAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userDCAAccounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "ContractActiveStateChange"
  ): TypedContractEvent<
    ContractActiveStateChangeEvent.InputTuple,
    ContractActiveStateChangeEvent.OutputTuple,
    ContractActiveStateChangeEvent.OutputObject
  >;
  getEvent(
    key: "DCAAccountCreated"
  ): TypedContractEvent<
    DCAAccountCreatedEvent.InputTuple,
    DCAAccountCreatedEvent.OutputTuple,
    DCAAccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DCAExecutorAddressChanged"
  ): TypedContractEvent<
    DCAExecutorAddressChangedEvent.InputTuple,
    DCAExecutorAddressChangedEvent.OutputTuple,
    DCAExecutorAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "DCAReinvestContractAddressChanged"
  ): TypedContractEvent<
    DCAReinvestContractAddressChangedEvent.InputTuple,
    DCAReinvestContractAddressChangedEvent.OutputTuple,
    DCAReinvestContractAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ContractActiveStateChange(bool)": TypedContractEvent<
      ContractActiveStateChangeEvent.InputTuple,
      ContractActiveStateChangeEvent.OutputTuple,
      ContractActiveStateChangeEvent.OutputObject
    >;
    ContractActiveStateChange: TypedContractEvent<
      ContractActiveStateChangeEvent.InputTuple,
      ContractActiveStateChangeEvent.OutputTuple,
      ContractActiveStateChangeEvent.OutputObject
    >;

    "DCAAccountCreated(address,address)": TypedContractEvent<
      DCAAccountCreatedEvent.InputTuple,
      DCAAccountCreatedEvent.OutputTuple,
      DCAAccountCreatedEvent.OutputObject
    >;
    DCAAccountCreated: TypedContractEvent<
      DCAAccountCreatedEvent.InputTuple,
      DCAAccountCreatedEvent.OutputTuple,
      DCAAccountCreatedEvent.OutputObject
    >;

    "DCAExecutorAddressChanged(address)": TypedContractEvent<
      DCAExecutorAddressChangedEvent.InputTuple,
      DCAExecutorAddressChangedEvent.OutputTuple,
      DCAExecutorAddressChangedEvent.OutputObject
    >;
    DCAExecutorAddressChanged: TypedContractEvent<
      DCAExecutorAddressChangedEvent.InputTuple,
      DCAExecutorAddressChangedEvent.OutputTuple,
      DCAExecutorAddressChangedEvent.OutputObject
    >;

    "DCAReinvestContractAddressChanged(address)": TypedContractEvent<
      DCAReinvestContractAddressChangedEvent.InputTuple,
      DCAReinvestContractAddressChangedEvent.OutputTuple,
      DCAReinvestContractAddressChangedEvent.OutputObject
    >;
    DCAReinvestContractAddressChanged: TypedContractEvent<
      DCAReinvestContractAddressChangedEvent.InputTuple,
      DCAReinvestContractAddressChangedEvent.OutputTuple,
      DCAReinvestContractAddressChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
