/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface CallerInterface extends Interface {
  getFunction(
    nameOrSignature: "call" | "calledContract" | "updateCalledAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangedCalledAddress"
      | "CompleteCall"
      | "ReturnedData"
  ): EventFragment;

  encodeFunctionData(functionFragment: "call", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calledContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCalledAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calledContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCalledAddress",
    data: BytesLike
  ): Result;
}

export namespace ChangedCalledAddressEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompleteCallEvent {
  export type InputTuple = [number: BigNumberish, success: boolean];
  export type OutputTuple = [number: bigint, success: boolean];
  export interface OutputObject {
    number: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnedDataEvent {
  export type InputTuple = [returnData: BytesLike, txSuccess: boolean];
  export type OutputTuple = [returnData: string, txSuccess: boolean];
  export interface OutputObject {
    returnData: string;
    txSuccess: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Caller extends BaseContract {
  connect(runner?: ContractRunner | null): Caller;
  waitForDeployment(): Promise<this>;

  interface: CallerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  call: TypedContractMethod<
    [],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  calledContract: TypedContractMethod<[], [string], "view">;

  updateCalledAddress: TypedContractMethod<
    [newAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "call"
  ): TypedContractMethod<
    [],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calledContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateCalledAddress"
  ): TypedContractMethod<[newAddress_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChangedCalledAddress"
  ): TypedContractEvent<
    ChangedCalledAddressEvent.InputTuple,
    ChangedCalledAddressEvent.OutputTuple,
    ChangedCalledAddressEvent.OutputObject
  >;
  getEvent(
    key: "CompleteCall"
  ): TypedContractEvent<
    CompleteCallEvent.InputTuple,
    CompleteCallEvent.OutputTuple,
    CompleteCallEvent.OutputObject
  >;
  getEvent(
    key: "ReturnedData"
  ): TypedContractEvent<
    ReturnedDataEvent.InputTuple,
    ReturnedDataEvent.OutputTuple,
    ReturnedDataEvent.OutputObject
  >;

  filters: {
    "ChangedCalledAddress(address)": TypedContractEvent<
      ChangedCalledAddressEvent.InputTuple,
      ChangedCalledAddressEvent.OutputTuple,
      ChangedCalledAddressEvent.OutputObject
    >;
    ChangedCalledAddress: TypedContractEvent<
      ChangedCalledAddressEvent.InputTuple,
      ChangedCalledAddressEvent.OutputTuple,
      ChangedCalledAddressEvent.OutputObject
    >;

    "CompleteCall(uint256,bool)": TypedContractEvent<
      CompleteCallEvent.InputTuple,
      CompleteCallEvent.OutputTuple,
      CompleteCallEvent.OutputObject
    >;
    CompleteCall: TypedContractEvent<
      CompleteCallEvent.InputTuple,
      CompleteCallEvent.OutputTuple,
      CompleteCallEvent.OutputObject
    >;

    "ReturnedData(bytes,bool)": TypedContractEvent<
      ReturnedDataEvent.InputTuple,
      ReturnedDataEvent.OutputTuple,
      ReturnedDataEvent.OutputObject
    >;
    ReturnedData: TypedContractEvent<
      ReturnedDataEvent.InputTuple,
      ReturnedDataEvent.OutputTuple,
      ReturnedDataEvent.OutputObject
    >;
  };
}
