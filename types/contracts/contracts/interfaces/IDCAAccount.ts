/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDCADataStructures {
  export type TokeDataStruct = {
    tokenAddress: AddressLike;
    decimals: BigNumberish;
    ticker: string;
  };

  export type TokeDataStructOutput = [
    tokenAddress: string,
    decimals: bigint,
    ticker: string
  ] & { tokenAddress: string; decimals: bigint; ticker: string };

  export type StrategyStruct = {
    accountAddress: AddressLike;
    baseToken: IDCADataStructures.TokeDataStruct;
    targetToken: IDCADataStructures.TokeDataStruct;
    interval: BigNumberish;
    amount: BigNumberish;
    strategyId: BigNumberish;
    active: boolean;
    reinvest: boolean;
    reinvestCallData: BytesLike;
  };

  export type StrategyStructOutput = [
    accountAddress: string,
    baseToken: IDCADataStructures.TokeDataStructOutput,
    targetToken: IDCADataStructures.TokeDataStructOutput,
    interval: bigint,
    amount: bigint,
    strategyId: bigint,
    active: boolean,
    reinvest: boolean,
    reinvestCallData: string
  ] & {
    accountAddress: string;
    baseToken: IDCADataStructures.TokeDataStructOutput;
    targetToken: IDCADataStructures.TokeDataStructOutput;
    interval: bigint;
    amount: bigint;
    strategyId: bigint;
    active: boolean;
    reinvest: boolean;
    reinvestCallData: string;
  };
}

export interface IDCAAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Execute"
      | "FundAccount"
      | "GetBaseBalance"
      | "GetTargetBalance"
      | "SetStrategyReinvest"
      | "SetupStrategy"
      | "SubscribeStrategy"
      | "UnFundAccount"
      | "UnsubscribeStrategy"
      | "WithdrawSavings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DCAExecutorChanged"
      | "StrategyExecuted"
      | "StrategySubscribed"
      | "StrategyUnsubscribed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Execute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "FundAccount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetBaseBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetTargetBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SetStrategyReinvest",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SetupStrategy",
    values: [IDCADataStructures.StrategyStruct, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "SubscribeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UnFundAccount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UnsubscribeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "WithdrawSavings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FundAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetBaseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetTargetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetStrategyReinvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetupStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SubscribeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnFundAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnsubscribeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WithdrawSavings",
    data: BytesLike
  ): Result;
}

export namespace DCAExecutorChangedEvent {
  export type InputTuple = [newAddress_: AddressLike];
  export type OutputTuple = [newAddress_: string];
  export interface OutputObject {
    newAddress_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyExecutedEvent {
  export type InputTuple = [
    strategyId_: BigNumberish,
    amountIn_: BigNumberish,
    reInvest_: boolean
  ];
  export type OutputTuple = [
    strategyId_: bigint,
    amountIn_: bigint,
    reInvest_: boolean
  ];
  export interface OutputObject {
    strategyId_: bigint;
    amountIn_: bigint;
    reInvest_: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategySubscribedEvent {
  export type InputTuple = [strategyId_: BigNumberish, executor_: AddressLike];
  export type OutputTuple = [strategyId_: bigint, executor_: string];
  export interface OutputObject {
    strategyId_: bigint;
    executor_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyUnsubscribedEvent {
  export type InputTuple = [strategyId_: BigNumberish];
  export type OutputTuple = [strategyId_: bigint];
  export interface OutputObject {
    strategyId_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDCAAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IDCAAccount;
  waitForDeployment(): Promise<this>;

  interface: IDCAAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Execute: TypedContractMethod<
    [strategyId_: BigNumberish, feeAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  FundAccount: TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  GetBaseBalance: TypedContractMethod<
    [token_: AddressLike],
    [bigint],
    "nonpayable"
  >;

  GetTargetBalance: TypedContractMethod<
    [token_: AddressLike],
    [bigint],
    "nonpayable"
  >;

  SetStrategyReinvest: TypedContractMethod<
    [strategyId_: BigNumberish, activate_: boolean, callData_: BytesLike],
    [void],
    "nonpayable"
  >;

  SetupStrategy: TypedContractMethod<
    [
      newStrategy_: IDCADataStructures.StrategyStruct,
      seedFunds_: BigNumberish,
      subscribeToEcecutor_: boolean
    ],
    [void],
    "nonpayable"
  >;

  SubscribeStrategy: TypedContractMethod<
    [strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  UnFundAccount: TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  UnsubscribeStrategy: TypedContractMethod<
    [stratogyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  WithdrawSavings: TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Execute"
  ): TypedContractMethod<
    [strategyId_: BigNumberish, feeAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "FundAccount"
  ): TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "GetBaseBalance"
  ): TypedContractMethod<[token_: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "GetTargetBalance"
  ): TypedContractMethod<[token_: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "SetStrategyReinvest"
  ): TypedContractMethod<
    [strategyId_: BigNumberish, activate_: boolean, callData_: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SetupStrategy"
  ): TypedContractMethod<
    [
      newStrategy_: IDCADataStructures.StrategyStruct,
      seedFunds_: BigNumberish,
      subscribeToEcecutor_: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SubscribeStrategy"
  ): TypedContractMethod<[strategyId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "UnFundAccount"
  ): TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "UnsubscribeStrategy"
  ): TypedContractMethod<[stratogyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "WithdrawSavings"
  ): TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DCAExecutorChanged"
  ): TypedContractEvent<
    DCAExecutorChangedEvent.InputTuple,
    DCAExecutorChangedEvent.OutputTuple,
    DCAExecutorChangedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyExecuted"
  ): TypedContractEvent<
    StrategyExecutedEvent.InputTuple,
    StrategyExecutedEvent.OutputTuple,
    StrategyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategySubscribed"
  ): TypedContractEvent<
    StrategySubscribedEvent.InputTuple,
    StrategySubscribedEvent.OutputTuple,
    StrategySubscribedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyUnsubscribed"
  ): TypedContractEvent<
    StrategyUnsubscribedEvent.InputTuple,
    StrategyUnsubscribedEvent.OutputTuple,
    StrategyUnsubscribedEvent.OutputObject
  >;

  filters: {
    "DCAExecutorChanged(address)": TypedContractEvent<
      DCAExecutorChangedEvent.InputTuple,
      DCAExecutorChangedEvent.OutputTuple,
      DCAExecutorChangedEvent.OutputObject
    >;
    DCAExecutorChanged: TypedContractEvent<
      DCAExecutorChangedEvent.InputTuple,
      DCAExecutorChangedEvent.OutputTuple,
      DCAExecutorChangedEvent.OutputObject
    >;

    "StrategyExecuted(uint256,uint256,bool)": TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;
    StrategyExecuted: TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;

    "StrategySubscribed(uint256,address)": TypedContractEvent<
      StrategySubscribedEvent.InputTuple,
      StrategySubscribedEvent.OutputTuple,
      StrategySubscribedEvent.OutputObject
    >;
    StrategySubscribed: TypedContractEvent<
      StrategySubscribedEvent.InputTuple,
      StrategySubscribedEvent.OutputTuple,
      StrategySubscribedEvent.OutputObject
    >;

    "StrategyUnsubscribed(uint256)": TypedContractEvent<
      StrategyUnsubscribedEvent.InputTuple,
      StrategyUnsubscribedEvent.OutputTuple,
      StrategyUnsubscribedEvent.OutputObject
    >;
    StrategyUnsubscribed: TypedContractEvent<
      StrategyUnsubscribedEvent.InputTuple,
      StrategyUnsubscribedEvent.OutputTuple,
      StrategyUnsubscribedEvent.OutputObject
    >;
  };
}
