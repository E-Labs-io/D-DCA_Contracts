/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IDCADataStructures {
  export type TokeDataStruct = {
    tokenAddress: AddressLike;
    decimals: BigNumberish;
    ticker: string;
  };

  export type TokeDataStructOutput = [
    tokenAddress: string,
    decimals: bigint,
    ticker: string
  ] & { tokenAddress: string; decimals: bigint; ticker: string };

  export type StrategyStruct = {
    accountAddress: AddressLike;
    baseToken: IDCADataStructures.TokeDataStruct;
    targetToken: IDCADataStructures.TokeDataStruct;
    interval: BigNumberish;
    amount: BigNumberish;
    strategyId: BigNumberish;
    reinvest: boolean;
    active: boolean;
    revestContract: AddressLike;
  };

  export type StrategyStructOutput = [
    accountAddress: string,
    baseToken: IDCADataStructures.TokeDataStructOutput,
    targetToken: IDCADataStructures.TokeDataStructOutput,
    interval: bigint,
    amount: bigint,
    strategyId: bigint,
    reinvest: boolean,
    active: boolean,
    revestContract: string
  ] & {
    accountAddress: string;
    baseToken: IDCADataStructures.TokeDataStructOutput;
    targetToken: IDCADataStructures.TokeDataStructOutput;
    interval: bigint;
    amount: bigint;
    strategyId: bigint;
    reinvest: boolean;
    active: boolean;
    revestContract: string;
  };
}

export interface DCAAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Execute"
      | "ExecutorDeactivateStrategy"
      | "FundAccount"
      | "GetBaseTokenCostPerBlock"
      | "GetBaseTokenRemainingBlocks"
      | "IntervalTimings"
      | "SetupStrategy"
      | "SubscribeStrategy"
      | "UnsubscribeStrategy"
      | "owner"
      | "removeExecutor"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DCAExecutorChanged"
      | "OwnershipTransferred"
      | "StrategySubscribed"
      | "StrategyUnsubscribed"
      | "StratogyExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Execute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ExecutorDeactivateStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "FundAccount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetBaseTokenCostPerBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetBaseTokenRemainingBlocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "IntervalTimings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetupStrategy",
    values: [IDCADataStructures.StrategyStruct, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "SubscribeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UnsubscribeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ExecutorDeactivateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FundAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetBaseTokenCostPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetBaseTokenRemainingBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IntervalTimings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetupStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SubscribeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnsubscribeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DCAExecutorChangedEvent {
  export type InputTuple = [newAddress_: AddressLike];
  export type OutputTuple = [newAddress_: string];
  export interface OutputObject {
    newAddress_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategySubscribedEvent {
  export type InputTuple = [strategyId_: BigNumberish, executor_: AddressLike];
  export type OutputTuple = [strategyId_: bigint, executor_: string];
  export interface OutputObject {
    strategyId_: bigint;
    executor_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyUnsubscribedEvent {
  export type InputTuple = [strategyId_: BigNumberish];
  export type OutputTuple = [strategyId_: bigint];
  export interface OutputObject {
    strategyId_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StratogyExecutedEvent {
  export type InputTuple = [strategyId_: BigNumberish];
  export type OutputTuple = [strategyId_: bigint];
  export interface OutputObject {
    strategyId_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DCAAccount extends BaseContract {
  connect(runner?: ContractRunner | null): DCAAccount;
  waitForDeployment(): Promise<this>;

  interface: DCAAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Execute: TypedContractMethod<
    [strategyId_: BigNumberish, feeAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  ExecutorDeactivateStrategy: TypedContractMethod<
    [strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  FundAccount: TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  GetBaseTokenCostPerBlock: TypedContractMethod<
    [baseToken_: AddressLike],
    [bigint],
    "view"
  >;

  GetBaseTokenRemainingBlocks: TypedContractMethod<
    [baseToken_: AddressLike],
    [bigint],
    "view"
  >;

  IntervalTimings: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  SetupStrategy: TypedContractMethod<
    [
      newStrategy_: IDCADataStructures.StrategyStruct,
      seedFunds_: BigNumberish,
      subscribeToExecutor_: boolean
    ],
    [void],
    "nonpayable"
  >;

  SubscribeStrategy: TypedContractMethod<
    [strategyId_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  UnsubscribeStrategy: TypedContractMethod<
    [strategyId_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeExecutor: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Execute"
  ): TypedContractMethod<
    [strategyId_: BigNumberish, feeAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ExecutorDeactivateStrategy"
  ): TypedContractMethod<[strategyId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "FundAccount"
  ): TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "GetBaseTokenCostPerBlock"
  ): TypedContractMethod<[baseToken_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "GetBaseTokenRemainingBlocks"
  ): TypedContractMethod<[baseToken_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "IntervalTimings"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "SetupStrategy"
  ): TypedContractMethod<
    [
      newStrategy_: IDCADataStructures.StrategyStruct,
      seedFunds_: BigNumberish,
      subscribeToExecutor_: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SubscribeStrategy"
  ): TypedContractMethod<[strategyId_: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "UnsubscribeStrategy"
  ): TypedContractMethod<[strategyId_: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeExecutor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DCAExecutorChanged"
  ): TypedContractEvent<
    DCAExecutorChangedEvent.InputTuple,
    DCAExecutorChangedEvent.OutputTuple,
    DCAExecutorChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StrategySubscribed"
  ): TypedContractEvent<
    StrategySubscribedEvent.InputTuple,
    StrategySubscribedEvent.OutputTuple,
    StrategySubscribedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyUnsubscribed"
  ): TypedContractEvent<
    StrategyUnsubscribedEvent.InputTuple,
    StrategyUnsubscribedEvent.OutputTuple,
    StrategyUnsubscribedEvent.OutputObject
  >;
  getEvent(
    key: "StratogyExecuted"
  ): TypedContractEvent<
    StratogyExecutedEvent.InputTuple,
    StratogyExecutedEvent.OutputTuple,
    StratogyExecutedEvent.OutputObject
  >;

  filters: {
    "DCAExecutorChanged(address)": TypedContractEvent<
      DCAExecutorChangedEvent.InputTuple,
      DCAExecutorChangedEvent.OutputTuple,
      DCAExecutorChangedEvent.OutputObject
    >;
    DCAExecutorChanged: TypedContractEvent<
      DCAExecutorChangedEvent.InputTuple,
      DCAExecutorChangedEvent.OutputTuple,
      DCAExecutorChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StrategySubscribed(uint256,address)": TypedContractEvent<
      StrategySubscribedEvent.InputTuple,
      StrategySubscribedEvent.OutputTuple,
      StrategySubscribedEvent.OutputObject
    >;
    StrategySubscribed: TypedContractEvent<
      StrategySubscribedEvent.InputTuple,
      StrategySubscribedEvent.OutputTuple,
      StrategySubscribedEvent.OutputObject
    >;

    "StrategyUnsubscribed(uint256)": TypedContractEvent<
      StrategyUnsubscribedEvent.InputTuple,
      StrategyUnsubscribedEvent.OutputTuple,
      StrategyUnsubscribedEvent.OutputObject
    >;
    StrategyUnsubscribed: TypedContractEvent<
      StrategyUnsubscribedEvent.InputTuple,
      StrategyUnsubscribedEvent.OutputTuple,
      StrategyUnsubscribedEvent.OutputObject
    >;

    "StratogyExecuted(uint256)": TypedContractEvent<
      StratogyExecutedEvent.InputTuple,
      StratogyExecutedEvent.OutputTuple,
      StratogyExecutedEvent.OutputObject
    >;
    StratogyExecuted: TypedContractEvent<
      StratogyExecutedEvent.InputTuple,
      StratogyExecutedEvent.OutputTuple,
      StratogyExecutedEvent.OutputObject
    >;
  };
}
