/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDCADataStructures {
  export type TokeDataStruct = {
    tokenAddress: AddressLike;
    decimals: BigNumberish;
    ticker: string;
  };

  export type TokeDataStructOutput = [
    tokenAddress: string,
    decimals: bigint,
    ticker: string
  ] & { tokenAddress: string; decimals: bigint; ticker: string };

  export type StrategyStruct = {
    accountAddress: AddressLike;
    baseToken: IDCADataStructures.TokeDataStruct;
    targetToken: IDCADataStructures.TokeDataStruct;
    interval: BigNumberish;
    amount: BigNumberish;
    strategyId: BigNumberish;
    reinvest: boolean;
    active: boolean;
    revestContract: AddressLike;
  };

  export type StrategyStructOutput = [
    accountAddress: string,
    baseToken: IDCADataStructures.TokeDataStructOutput,
    targetToken: IDCADataStructures.TokeDataStructOutput,
    interval: bigint,
    amount: bigint,
    strategyId: bigint,
    reinvest: boolean,
    active: boolean,
    revestContract: string
  ] & {
    accountAddress: string;
    baseToken: IDCADataStructures.TokeDataStructOutput;
    targetToken: IDCADataStructures.TokeDataStructOutput;
    interval: bigint;
    amount: bigint;
    strategyId: bigint;
    reinvest: boolean;
    active: boolean;
    revestContract: string;
  };
}

export interface IDCAExecutorInterface extends Interface {
  getFunction(
    nameOrSignature: "Execute" | "ForceFeeFund" | "Subscribe" | "Unsubscribe"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DCAAccontSubscription"
      | "ExecutedDCA"
      | "ExecutionEOAAddressChange"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ForceFeeFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Subscribe",
    values: [IDCADataStructures.StrategyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "Unsubscribe",
    values: [IDCADataStructures.StrategyStruct]
  ): string;

  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ForceFeeFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "Unsubscribe",
    data: BytesLike
  ): Result;
}

export namespace DCAAccontSubscriptionEvent {
  export type InputTuple = [
    interval_: IDCADataStructures.StrategyStruct,
    active_: boolean
  ];
  export type OutputTuple = [
    interval_: IDCADataStructures.StrategyStructOutput,
    active_: boolean
  ];
  export interface OutputObject {
    interval_: IDCADataStructures.StrategyStructOutput;
    active_: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedDCAEvent {
  export type InputTuple = [interval_: BigNumberish];
  export type OutputTuple = [interval_: bigint];
  export interface OutputObject {
    interval_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionEOAAddressChangeEvent {
  export type InputTuple = [
    newExecutionEOA_: AddressLike,
    changer_: AddressLike
  ];
  export type OutputTuple = [newExecutionEOA_: string, changer_: string];
  export interface OutputObject {
    newExecutionEOA_: string;
    changer_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDCAExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): IDCAExecutor;
  waitForDeployment(): Promise<this>;

  interface: IDCAExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Execute: TypedContractMethod<[interval_: BigNumberish], [void], "nonpayable">;

  ForceFeeFund: TypedContractMethod<[], [void], "nonpayable">;

  Subscribe: TypedContractMethod<
    [strategy_: IDCADataStructures.StrategyStruct],
    [boolean],
    "nonpayable"
  >;

  Unsubscribe: TypedContractMethod<
    [strategy_: IDCADataStructures.StrategyStruct],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Execute"
  ): TypedContractMethod<[interval_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ForceFeeFund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "Subscribe"
  ): TypedContractMethod<
    [strategy_: IDCADataStructures.StrategyStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Unsubscribe"
  ): TypedContractMethod<
    [strategy_: IDCADataStructures.StrategyStruct],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "DCAAccontSubscription"
  ): TypedContractEvent<
    DCAAccontSubscriptionEvent.InputTuple,
    DCAAccontSubscriptionEvent.OutputTuple,
    DCAAccontSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "ExecutedDCA"
  ): TypedContractEvent<
    ExecutedDCAEvent.InputTuple,
    ExecutedDCAEvent.OutputTuple,
    ExecutedDCAEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionEOAAddressChange"
  ): TypedContractEvent<
    ExecutionEOAAddressChangeEvent.InputTuple,
    ExecutionEOAAddressChangeEvent.OutputTuple,
    ExecutionEOAAddressChangeEvent.OutputObject
  >;

  filters: {
    "DCAAccontSubscription(tuple,bool)": TypedContractEvent<
      DCAAccontSubscriptionEvent.InputTuple,
      DCAAccontSubscriptionEvent.OutputTuple,
      DCAAccontSubscriptionEvent.OutputObject
    >;
    DCAAccontSubscription: TypedContractEvent<
      DCAAccontSubscriptionEvent.InputTuple,
      DCAAccontSubscriptionEvent.OutputTuple,
      DCAAccontSubscriptionEvent.OutputObject
    >;

    "ExecutedDCA(uint8)": TypedContractEvent<
      ExecutedDCAEvent.InputTuple,
      ExecutedDCAEvent.OutputTuple,
      ExecutedDCAEvent.OutputObject
    >;
    ExecutedDCA: TypedContractEvent<
      ExecutedDCAEvent.InputTuple,
      ExecutedDCAEvent.OutputTuple,
      ExecutedDCAEvent.OutputObject
    >;

    "ExecutionEOAAddressChange(address,address)": TypedContractEvent<
      ExecutionEOAAddressChangeEvent.InputTuple,
      ExecutionEOAAddressChangeEvent.OutputTuple,
      ExecutionEOAAddressChangeEvent.OutputObject
    >;
    ExecutionEOAAddressChange: TypedContractEvent<
      ExecutionEOAAddressChangeEvent.InputTuple,
      ExecutionEOAAddressChangeEvent.OutputTuple,
      ExecutionEOAAddressChangeEvent.OutputObject
    >;
  };
}
