/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DCAReinvest,
  DCAReinvestInterface,
} from "../../../contracts/base/DCAReinvest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "activeLibrary",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ACTIVE_REINVESTS",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REINVEST_ACTIVE",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REINVEST_CHAIN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REINVEST_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "reinvestData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "investCode",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "dcaAccountAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.Reinvest",
        name: "reinvestData_",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "executeReinvest",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLibraryVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "reinvestData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "investCode",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "dcaAccountAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.Reinvest",
        name: "oldReinvestData_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "reinvestData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "investCode",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "dcaAccountAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.Reinvest",
        name: "newReinvestData_",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "withdrawFunds_",
        type: "bool",
      },
    ],
    name: "migrateReinvest",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setActiveState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "reinvestData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "investCode",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "dcaAccountAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.Reinvest",
        name: "reinvestData_",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "unwindReinvest",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610f73380380610f7383398101604081905261002f916100cc565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610073565b506000805460ff1916821515179055506100f5565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6000602082840312156100de57600080fd5b815180151581146100ee57600080fd5b9392505050565b610e6f806101046000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063f2fde38b1161005b578063f2fde38b14610274578063f58a593614610287578063fe58a112146102a057600080fd5b80638da5cb5b146101b7578063bcb9236e146101fa578063c9f6d48f1461020d57600080fd5b8063715018a6116100b2578063715018a614610156578063738800b71461015e5780637c4bb0b11461019a57600080fd5b80630ca75044146100d957806340438aea14610124578063454f002a1461012e575b600080fd5b60408051808201909152600981527f544553542056302e34000000000000000000000000000000000000000000000060208201525b60405161011b9190610a45565b60405180910390f35b61012c6102b7565b005b61014161013c366004610c5b565b6102f3565b6040805192835290151560208301520161011b565b61012c61030c565b61010e6040518060400160405280600981526020017f544553542056302e34000000000000000000000000000000000000000000000081525081565b6000546101a79060ff1681565b604051901515815260200161011b565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011b565b610141610208366004610c5b565b61031e565b61010e6040517f010000000000000000000000000000000000000000000000000000000000000060208201527f1200000000000000000000000000000000000000000000000000000000000000602182015260220160405160208183030381529060405281565b61012c610282366004610ca0565b61032b565b610141610295366004610cbd565b600080935093915050565b6102a96101a481565b60405190815260200161011b565b6102bf610394565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b565b60008061030084846103ed565b915091505b9250929050565b610314610394565b6102f1600061048c565b6000806103008484610509565b610333610394565b73ffffffffffffffffffffffffffffffffffffffff8116610388576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6103918161048c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff6101009091041633146102f1576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161037f565b6040820151600090819061040460ff821683610548565b1561040f5750610305565b61041d60ff82166001610548565b1561043a57610430848660000151610558565b9250925050610305565b61044860ff82166011610548565b610484577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee60ff82160161048457610430848660000151610614565b509250929050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600080601160ff16846040015160ff16111561030557601260ff16846040015160ff16036103055761053f8385600001516108dd565b91509150610305565b60ff828116908216145b92915050565b6000806000610566846109b2565b604081810151602083015191517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101899052929350169063a9059cbb906044016020604051808303816000875af11580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610d35565b94959350505050565b6000806000610622846109b2565b60408082015190517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190610d52565b60208301516040517f095ea7b30000000000000000000000000000000000000000000000000000000081527387870bca3f3fd6335c3f4ce8392d69350b4fa4e260048201526024810189905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063095ea7b3906044016020604051808303816000875af115801561074f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107739190610d35565b905080156108d35760208301516040517f617ba03700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101889052306044820152600060648201527387870bca3f3fd6335c3f4ce8392d69350b4fa4e29063617ba03790608401600060405180830381600087803b15801561081057600080fd5b505af1158015610824573d6000803e3d6000fd5b5050505060408381015190517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190610d52565b90506108c98382610d6b565b9550600086119450505b5050509250929050565b60008060006108eb846109b2565b60208101516040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018790523060448201529091507387870bca3f3fd6335c3f4ce8392d69350b4fa4e2906369328dec906064016020604051808303816000875af1158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190610d52565b9586151595509350505050565b604080516060810182526000808252602080830182905292820152825190916105529184018101908401610e1d565b6000815180845260005b81811015610a07576020818501810151868301820152016109eb565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610a5860208301846109e1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610ab157610ab1610a5f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610afe57610afe610a5f565b604052919050565b801515811461039157600080fd5b8035610b1f81610b06565b919050565b60ff8116811461039157600080fd5b8035610b1f81610b24565b73ffffffffffffffffffffffffffffffffffffffff8116811461039157600080fd5b8035610b1f81610b3e565b600060808284031215610b7d57600080fd5b610b85610a8e565b9050813567ffffffffffffffff80821115610b9f57600080fd5b818401915084601f830112610bb357600080fd5b8135602082821115610bc757610bc7610a5f565b610bf7817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610ab7565b92508183528681838601011115610c0d57600080fd5b81818501828501376000818385010152828552610c2b818701610b14565b8186015250505050610c3f60408301610b33565b6040820152610c5060608301610b60565b606082015292915050565b60008060408385031215610c6e57600080fd5b823567ffffffffffffffff811115610c8557600080fd5b610c9185828601610b6b565b95602094909401359450505050565b600060208284031215610cb257600080fd5b8135610a5881610b3e565b600080600060608486031215610cd257600080fd5b833567ffffffffffffffff80821115610cea57600080fd5b610cf687838801610b6b565b94506020860135915080821115610d0c57600080fd5b50610d1986828701610b6b565b9250506040840135610d2a81610b06565b809150509250925092565b600060208284031215610d4757600080fd5b8151610a5881610b06565b600060208284031215610d6457600080fd5b5051919050565b81810381811115610552577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060608284031215610db757600080fd5b6040516060810181811067ffffffffffffffff82111715610dda57610dda610a5f565b80604052508091508251610ded81610b24565b81526020830151610dfd81610b3e565b60208201526040830151610e1081610b3e565b6040919091015292915050565b600060608284031215610e2f57600080fd5b610a588383610da556fea2646970667358221220e02f8fe64182d9a2692022fdea639f40dcdf9375b14a06fb85207dcc892c8a7e64736f6c63430008140033";

type DCAReinvestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DCAReinvestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DCAReinvest__factory extends ContractFactory {
  constructor(...args: DCAReinvestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    activeLibrary: boolean,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(activeLibrary, overrides || {});
  }
  override deploy(
    activeLibrary: boolean,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(activeLibrary, overrides || {}) as Promise<
      DCAReinvest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DCAReinvest__factory {
    return super.connect(runner) as DCAReinvest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DCAReinvestInterface {
    return new Interface(_abi) as DCAReinvestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DCAReinvest {
    return new Contract(address, _abi, runner) as unknown as DCAReinvest;
  }
}
