/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DCAExecutor,
  DCAExecutorInterface,
  IDCADataStructures,
} from "../../../contracts/base/DCAExecutor";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "amountToExecutor",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToComputing",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToAdmin",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "feeAmount",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "executionAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "computingAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "adminAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.FeeDistribution",
        name: "feeDistrobution_",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "executionEOA_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ContractIsPaused",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bool",
        name: "active_",
        type: "bool",
      },
    ],
    name: "ContractActiveStateChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
    ],
    name: "ExecutedStrategy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newAddress_",
        type: "address",
      },
    ],
    name: "ExecutorAddressChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "FeeDataChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "FeesDistributed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "DCAAccountAddress_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IDCADataStructures.Interval",
        name: "strategyInterval_",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "active_",
        type: "bool",
      },
    ],
    name: "StrategySubscription",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress_",
        type: "address",
      },
    ],
    name: "DistributeFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "DCAAccount_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
      {
        internalType: "enum IDCADataStructures.Interval",
        name: "interval_",
        type: "uint8",
      },
    ],
    name: "Execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "DCAAccount_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
      {
        internalType: "enum IDCADataStructures.Interval",
        name: "interval_",
        type: "uint8",
      },
    ],
    name: "ForceUnsubscribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "accountAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokenData",
            name: "baseToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokenData",
            name: "targetToken",
            type: "tuple",
          },
          {
            internalType: "enum IDCADataStructures.Interval",
            name: "interval",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strategyId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "reinvestData",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "active",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "investCode",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "dcaAccountAddress",
                type: "address",
              },
            ],
            internalType: "struct IDCADataStructures.Reinvest",
            name: "reinvest",
            type: "tuple",
          },
        ],
        internalType: "struct IDCADataStructures.Strategy",
        name: "strategy_",
        type: "tuple",
      },
    ],
    name: "Subscribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "DCAAccountAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
      {
        internalType: "enum IDCADataStructures.Interval",
        name: "interval_",
        type: "uint8",
      },
    ],
    name: "Unsubscribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin_",
        type: "address",
      },
    ],
    name: "addAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "executorAddress_",
        type: "address",
      },
    ],
    name: "changeExecutor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addressToCheck_",
        type: "address",
      },
    ],
    name: "checkIfAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getExecutorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeData",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "amountToExecutor",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToComputing",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToAdmin",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "feeAmount",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "executionAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "computingAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "adminAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.FeeDistribution",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IDCADataStructures.Interval",
        name: "interval_",
        type: "uint8",
      },
    ],
    name: "getIntervalTotalActiveStrategys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
    ],
    name: "getTimeTillWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "lastEx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "secondsLeft",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "checkReturn",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalActiveStrategys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalExecutions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IDCADataStructures.Interval",
        name: "interval_",
        type: "uint8",
      },
    ],
    name: "isIntervalActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldAdmin_",
        type: "address",
      },
    ],
    name: "removeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeExecutor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newFlag_",
        type: "bool",
      },
    ],
    name: "setActiveState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "amountToExecutor",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToComputing",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToAdmin",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "feeAmount",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "executionAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "computingAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "adminAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.FeeDistribution",
        name: "fee_",
        type: "tuple",
      },
    ],
    name: "setFeeData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IDCADataStructures.Interval",
        name: "interval_",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "status_",
        type: "bool",
      },
    ],
    name: "setIntervalActive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526002805460ff60a01b1916600160a01b1790553480156200002457600080fd5b5060405162002c3938038062002c3983398101604081905262000047916200034b565b338181806200007157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200007c816200009e565b506200008881620000ee565b506200009690508262000138565b50506200046e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f7d5b70f43ce014e6429a5a008d4a39b49e0d74afc4eec87d6ecf23bee44a6f5090600090a250565b62000142620002b4565b6200014d81620002e5565b620001c3576040805162461bcd60e51b81526020600482015260248101919091527f4443414578656375746f72203a205b736574466565446174615d20546f74616c60448201527f2073706c69742070657263656e747320646f6e277420657175616c2031303025606482015260840162000068565b80516007805460208401516040808601516060870151608088015161ffff97881663ffffffff199096169590951762010000948816949094029390931763ffffffff60201b19166401000000009187169190910261ffff60301b1916176601000000000000959092169490940217600160401b600160e01b031916680100000000000000006001600160a01b03928316021790915560a0830151600880546001600160a01b031990811692841692909217905560c0840151600980549092169216919091179055517f79191c2cedeb094d0c40d3af7d049180bc97b30d8d9b937628db6632e013251b90600090a150565b6000546001600160a01b03163314620002e35760405163118cdaa760e01b815233600482015260240162000068565b565b6020810151815160408301516000929162000300916200043d565b6200030c91906200043d565b61ffff16612710149050919050565b805161ffff811681146200032e57600080fd5b919050565b80516001600160a01b03811681146200032e57600080fd5b6000808284036101008112156200036157600080fd5b60e08112156200037057600080fd5b5060405160e081016001600160401b0381118282101715620003a257634e487b7160e01b600052604160045260246000fd5b604052620003b0846200031b565b8152620003c0602085016200031b565b6020820152620003d3604085016200031b565b6040820152620003e6606085016200031b565b6060820152620003f96080850162000333565b60808201526200040c60a0850162000333565b60a08201526200041f60c0850162000333565b60c082015291506200043460e0840162000333565b90509250929050565b61ffff8181168382160190808211156200046757634e487b7160e01b600052601160045260246000fd5b5092915050565b6127bb806200047e6000396000f3fe60806040526004361061018f5760003560e01c80637b260087116100d6578063bfe22a011161007f578063c7ba6a0011610059578063c7ba6a001461063f578063d9fa9c1a1461065f578063f2fde38b146106a5576101e1565b8063bfe22a01146105c2578063c4cf87f0146105e2578063c55cfc7414610602576101e1565b80639665b658116100b05780639665b65814610562578063a8c2ec0314610582578063ab6319b5146105a2576101e1565b80637b260087146104f757806389c8c5c9146105175780638da5cb5b14610537576101e1565b80633adee794116101385780636745b3e1116101125780636745b3e1146104a257806370480275146104c2578063715018a6146104e2576101e1565b80633adee7941461044e5780633c7c46dc1461046d5780634357274714610482576101e1565b806322f3e2d41161016957806322f3e2d414610295578063256a4935146102c5578063350157a814610414576101e1565b80630853ac1c146102295780631785f53c146102405780631b29b4fc14610260576101e1565b366101e15760405162461bcd60e51b815260206004820152601760248201527f4443414578656375746f72203a205b726563656976655d00000000000000000060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601860248201527f4443414578656375746f72203a205b66616c6c6261636b5d000000000000000060448201526064016101d8565b34801561023557600080fd5b5061023e6106c5565b005b34801561024c57600080fd5b5061023e61025b366004612042565b6106d9565b34801561026c57600080fd5b5061028061027b36600461206c565b61070f565b60405190151581526020015b60405180910390f35b3480156102a157600080fd5b5060025474010000000000000000000000000000000000000000900460ff16610280565b3480156102d157600080fd5b506103946040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260075461ffff80821683526201000082048116602084015264010000000082048116938301939093526601000000000000810490921660608201526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166080830152600854811660a08301526009541660c082015290565b60405161028c9190600060e08201905061ffff80845116835280602085015116602084015280604085015116604084015280606085015116606084015250608083015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b34801561042057600080fd5b50610429610752565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028c565b34801561045a57600080fd5b50600b545b60405190815260200161028c565b34801561047957600080fd5b50600a5461045f565b34801561048e57600080fd5b5061023e61049d366004612087565b610778565b3480156104ae57600080fd5b5061023e6104bd366004612087565b6109b9565b3480156104ce57600080fd5b5061023e6104dd366004612042565b610b20565b3480156104ee57600080fd5b5061023e610b5c565b34801561050357600080fd5b5061023e610512366004612125565b610b6e565b34801561052357600080fd5b5061045f61053236600461206c565b610d6b565b34801561054357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610429565b34801561056e57600080fd5b5061023e61057d366004612042565b610daa565b34801561058e57600080fd5b5061023e61059d366004612042565b610dbe565b3480156105ae57600080fd5b5061023e6105bd3660046121d5565b610fda565b3480156105ce57600080fd5b5061023e6105dd36600461222a565b61128a565b3480156105ee57600080fd5b5061023e6105fd366004612247565b61133a565b34801561060e57600080fd5b5061062261061d36600461227e565b61142c565b60408051938452602084019290925215159082015260600161028c565b34801561064b57600080fd5b5061023e61065a366004612087565b6114ba565b34801561066b57600080fd5b5061028061067a366004612042565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b3480156106b157600080fd5b5061023e6106c0366004612042565b61177a565b6106cd6117db565b6106d7600061182e565b565b6106e16117db565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020805460ff19169055565b600060036000836007811115610727576107276122a8565b6007811115610738576107386122a8565b815260208101919091526040016000205460ff1692915050565b600061077360025473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60025473ffffffffffffffffffffffffffffffffffffffff1633146108055760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff166108ab5760405162461bcd60e51b815260206004820152603c60248201527f4443414578656375746f723a205b466f726365556e7375627363726962655d2060448201527f4163636f756e7420616c726561647920756e737562736372696265640000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260056020908152604080832086845290915290819020805460ff19169055517f0283e5fa00000000000000000000000000000000000000000000000000000000815260048101849052630283e5fa90602401600060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b5050600a805492509050600061095c83612306565b919050555060001515828473ffffffffffffffffffffffffffffffffffffffff167f819287b2b7cff41aee38a60c1c803e9ced77b974378cf876e7a3451c1a56a921846040516109ac919061233b565b60405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff841614610a6a5760405162461bcd60e51b815260206004820152604160248201527f4443416578656375746f72203a205b556e7375627363726962655d204f6e6c7960448201527f204163636f756e7420436f6e74726163742063616e20756e737562736372696260648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016101d8565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff16610b105760405162461bcd60e51b815260206004820152603760248201527f4443416578656375746f72203a205b5375627363726962655d2053747261746560448201527f677920616c726561647920756e7375627363726962656400000000000000000060648201526084016101d8565b610b1b83838361189d565b505050565b610b286117db565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208190526040909120805460ff19169091179055565b610b646117db565b6106d7600061192f565b610b766117db565b610b7f816119a4565b610bf3576040805162461bcd60e51b81526020600482015260248101919091527f4443414578656375746f72203a205b736574466565446174615d20546f74616c60448201527f2073706c69742070657263656e747320646f6e277420657175616c203130302560648201526084016101d8565b80516007805460208401516040808601516060870151608088015161ffff9788167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909616959095176201000094881694909402939093177fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff16640100000000918716919091027fffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffff161766010000000000009590921694909402177fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff928316021790915560a0830151600880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811692841692909217905560c0840151600980549092169216919091179055517f79191c2cedeb094d0c40d3af7d049180bc97b30d8d9b937628db6632e013251b90600090a150565b600060046000836007811115610d8357610d836122a8565b6007811115610d9457610d946122a8565b8152602001908152602001600020549050919050565b610db26117db565b610dbb8161182e565b50565b3360009081526001602052604090205460ff1680610df3575060005473ffffffffffffffffffffffffffffffffffffffff1633145b610e655760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef8919061237c565b90508015610b1b5760008080610f0f6007856119d6565b6007549295509093509150610f479068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff168487611a2a565b600854610f6b9073ffffffffffffffffffffffffffffffffffffffff168387611a2a565b600954610f8f9073ffffffffffffffffffffffffffffffffffffffff168287611a2a565b604051849073ffffffffffffffffffffffffffffffffffffffff8816907f63be20cc905d5ba0cf65db405c4999f99f2575e521875f13a8009d6eed7a09d990600090a3505050505050565b60025474010000000000000000000000000000000000000000900460ff1661102e576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61104061103a82612583565b33611ac3565b6110b25760405162461bcd60e51b815260206004820152603f60248201527f4443416578656375746f72203a205b5375627363726962655d204f6e6c79204160448201527f63636f756e7420436f6e74726163742063616e20756e7375627363726962650060648201526084016101d8565b6110c36110be82612583565b611ae7565b6111355760405162461bcd60e51b815260206004820152602a60248201527f4443416578656375746f72203a205b5375627363726962655d20496e76616c6960448201527f642073747261746567790000000000000000000000000000000000000000000060648201526084016101d8565b61114861027b608083016060840161206c565b6111ba5760405162461bcd60e51b815260206004820152602d60248201527f4443416578656375746f72203a205b5375627363726962655d20496e7465727660448201527f616c204e6f74204163746976650000000000000000000000000000000000000060648201526084016101d8565b600560006111cb6020840184612042565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812060a0850135825290925290205460ff16156112795760405162461bcd60e51b815260206004820152603560248201527f4443416578656375746f72203a205b5375627363726962655d2053747261746560448201527f677920616c72656164792073756273637269626564000000000000000000000060648201526084016101d8565b610dbb61128582612583565b611b6d565b3360009081526001602052604090205460ff16806112bf575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6113315760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b610dbb81611c71565b3360009081526001602052604090205460ff168061136f575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6113e15760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e203a205b6f6e6c7941646d696e735d204164647265737360448201527f206973206e6f7420616e2061646d696e0000000000000000000000000000000060648201526084016101d8565b80600360008460078111156113f8576113f86122a8565b6007811115611409576114096122a8565b81526020810191909152604001600020805460ff19169115159190911790555050565b60008060008473ffffffffffffffffffffffffffffffffffffffff16633887d28b856040518263ffffffff1660e01b815260040161146c91815260200190565b606060405180830381865afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad919061265d565b9250925092509250925092565b60025473ffffffffffffffffffffffffffffffffffffffff1633146115475760405162461bcd60e51b815260206004820152603860248201527f4f6e6c794578656375746f72203a205b6f6e6c794578656375746f725d20416460448201527f6472657373206973206e6f7420616e206578656375746f72000000000000000060648201526084016101d8565b60025474010000000000000000000000000000000000000000900460ff1661159b576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832085845290915290205460ff166116415760405162461bcd60e51b815260206004820152602f60248201527f4443416578656375746f72203a205b457865637574655d20537472617465677960448201527f206e6f742073756273637269626564000000000000000000000000000000000060648201526084016101d8565b61164a8161070f565b6116bc5760405162461bcd60e51b815260206004820152602b60248201527f4443416578656375746f72203a205b457865637574655d20496e74657276616c60448201527f204e6f742041637469766500000000000000000000000000000000000000000060648201526084016101d8565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083208584529091529020546116f8908290611ce6565b61176a5760405162461bcd60e51b815260206004820152602f60248201527f4443416578656375746f72203a205b457865637574655d204e6f7420696e206560448201527f7865637574696f6e2077696e646f77000000000000000000000000000000000060648201526084016101d8565b6117748383611cfa565b50505050565b6117826117db565b73ffffffffffffffffffffffffffffffffffffffff81166117d2576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016101d8565b610dbb8161192f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d7576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016101d8565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f7d5b70f43ce014e6429a5a008d4a39b49e0d74afc4eec87d6ecf23bee44a6f5090600090a250565b600a80549060006118ad83612306565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526005602090815260408083208584529091528120805460ff191690556004908260078111156118ff576118ff6122a8565b6007811115611910576119106122a8565b8152602001908152602001600020600081548092919061095c90612306565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602081015181516040830151600092916119bd91612696565b6119c79190612696565b61ffff16612710149050919050565b8154600090819081906119ed9061ffff1685611e40565b8554909350611a069062010000900461ffff1685611e40565b8554909250611a2190640100000000900461ffff1685611e40565b90509250925092565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af1158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177491906126b8565b815173ffffffffffffffffffffffffffffffffffffffff8281169116145b92915050565b6000806007905060008184606001516007811115611b0757611b076122a8565b8551911015915073ffffffffffffffffffffffffffffffffffffffff1615801590611b4c575060208401515173ffffffffffffffffffffffffffffffffffffffff1615155b8015611b5c575060008460800151115b8015611b655750805b949350505050565b805173ffffffffffffffffffffffffffffffffffffffff16600090815260056020908152604080832060a085015184529091528120805460ff19166001179055600a805491611bbb836126d5565b91905055506004600082606001516007811115611bda57611bda6122a8565b6007811115611beb57611beb6122a8565b81526020019081526020016000206000815480929190611c0a906126d5565b9190505550600115158160a00151826000015173ffffffffffffffffffffffffffffffffffffffff167f819287b2b7cff41aee38a60c1c803e9ced77b974378cf876e7a3451c1a56a9218460600151604051611c66919061233b565b60405180910390a450565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000831515908102919091179091556040517fbdf1a3ee1d5eb15aa60ae1a81488107759732ead44999c8c807575100def058b90600090a250565b6000611cf28383611e74565b159392505050565b6007546040517fca4c8b3100000000000000000000000000000000000000000000000000000000815260048101839052660100000000000090910461ffff166024820152600090819073ffffffffffffffffffffffffffffffffffffffff85169063ca4c8b31906044016020604051808303816000875af1158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da791906126b8565b90508015611e395773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208684529091528120429055600b805491611df0836126d5565b9091555050604051839073ffffffffffffffffffffffffffffffffffffffff8616907fb89af9bc8aa44a0bb15ecf17cc88021e8a65196963bed8e33aa51c08b1eca0ef90600090a35b9392505050565b600060018361ffff161015611e5757506000611ae1565b6000612710611e6a61ffff86168561270d565b611b659190612724565b600080611e8084611eac565b611e8a908461275f565b9050804211611ea257611e9d4282612772565b611b65565b6000949350505050565b600080826007811115611ec157611ec16122a8565b03611ece5750603c919050565b6001826007811115611ee257611ee26122a8565b03611ef357611ae1603c600561270d565b6002826007811115611f0757611f076122a8565b03611f16575062015180919050565b6003826007811115611f2a57611f2a6122a8565b03611f3d57611ae162015180600261270d565b6004826007811115611f5157611f516122a8565b03611f6457611ae162015180600361270d565b6005826007811115611f7857611f786122a8565b03611f87575062093a80919050565b6006826007811115611f9b57611f9b6122a8565b03611fae57611ae162093a80600261270d565b6007826007811115611fc257611fc26122a8565b03611fd157506224ea00919050565b60405162461bcd60e51b815260206004820152601e60248201527f4443415374726174656779203a20496e76616c696420696e74657276616c000060448201526064016101d8565b803573ffffffffffffffffffffffffffffffffffffffff8116811461203d57600080fd5b919050565b60006020828403121561205457600080fd5b611e3982612019565b80356008811061203d57600080fd5b60006020828403121561207e57600080fd5b611e398261205d565b60008060006060848603121561209c57600080fd5b6120a584612019565b925060208401359150611a216040850161205d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561210d5761210d6120ba565b60405290565b803561ffff8116811461203d57600080fd5b600060e0828403121561213757600080fd5b60405160e0810181811067ffffffffffffffff8211171561215a5761215a6120ba565b60405261216683612113565b815261217460208401612113565b602082015261218560408401612113565b604082015261219660608401612113565b60608201526121a760808401612019565b60808201526121b860a08401612019565b60a08201526121c960c08401612019565b60c08201529392505050565b6000602082840312156121e757600080fd5b813567ffffffffffffffff8111156121fe57600080fd5b82016101008185031215611e3957600080fd5b8015158114610dbb57600080fd5b803561203d81612211565b60006020828403121561223c57600080fd5b8135611e3981612211565b6000806040838503121561225a57600080fd5b6122638361205d565b9150602083013561227381612211565b809150509250929050565b6000806040838503121561229157600080fd5b61229a83612019565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600081612315576123156122d7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6020810160088310612376577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60006020828403121561238e57600080fd5b5051919050565b803560ff8116811461203d57600080fd5b600067ffffffffffffffff808411156123c1576123c16120ba565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612407576124076120ba565b8160405280935085815286868601111561242057600080fd5b858560208301376000602087830101525050509392505050565b60006060828403121561244c57600080fd5b6040516060810167ffffffffffffffff8282108183111715612470576124706120ba565b8160405282935061248085612019565b835261248e60208601612395565b602084015260408501359150808211156124a757600080fd5b508301601f810185136124b957600080fd5b6124c8858235602084016123a6565b6040830152505092915050565b6000608082840312156124e757600080fd5b6040516080810167ffffffffffffffff828210818311171561250b5761250b6120ba565b81604052829350843591508082111561252357600080fd5b508301601f8101851361253557600080fd5b612544858235602084016123a6565b825250602083013561255581612211565b602082015261256660408401612395565b604082015261257760608401612019565b60608201525092915050565b6000610100823603121561259657600080fd5b61259e6120e9565b6125a783612019565b8152602083013567ffffffffffffffff808211156125c457600080fd5b6125d03683870161243a565b602084015260408501359150808211156125e957600080fd5b6125f53683870161243a565b60408401526126066060860161205d565b60608401526080850135608084015260a085013560a084015261262b60c0860161221f565b60c084015260e085013591508082111561264457600080fd5b50612651368286016124d5565b60e08301525092915050565b60008060006060848603121561267257600080fd5b8351925060208401519150604084015161268b81612211565b809150509250925092565b61ffff8181168382160190808211156126b1576126b16122d7565b5092915050565b6000602082840312156126ca57600080fd5b8151611e3981612211565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612706576127066122d7565b5060010190565b8082028115828204841417611ae157611ae16122d7565b60008261275a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820180821115611ae157611ae16122d7565b81810381811115611ae157611ae16122d756fea2646970667358221220be5b825fe7cd3e2a99f6de87bc7623faa8152be31eeb466482fd14135207182a64736f6c63430008140033";

type DCAExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DCAExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DCAExecutor__factory extends ContractFactory {
  constructor(...args: DCAExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    feeDistrobution_: IDCADataStructures.FeeDistributionStruct,
    executionEOA_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      feeDistrobution_,
      executionEOA_,
      overrides || {}
    );
  }
  override deploy(
    feeDistrobution_: IDCADataStructures.FeeDistributionStruct,
    executionEOA_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      feeDistrobution_,
      executionEOA_,
      overrides || {}
    ) as Promise<
      DCAExecutor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DCAExecutor__factory {
    return super.connect(runner) as DCAExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DCAExecutorInterface {
    return new Interface(_abi) as DCAExecutorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DCAExecutor {
    return new Contract(address, _abi, runner) as unknown as DCAExecutor;
  }
}
