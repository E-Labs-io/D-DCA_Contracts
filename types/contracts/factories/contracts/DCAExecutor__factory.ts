/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DCAExecutor,
  DCAExecutorInterface,
  IDCADataStructures,
} from "../../contracts/DCAExecutor";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "amountToExecutor",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToComputing",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "amountToAdmin",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "feeAmount",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "executionAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "computingAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "adminAddress",
            type: "address",
          },
        ],
        internalType: "struct IDCADataStructures.FeeDistribution",
        name: "feeDistrobution_",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "executionEOA_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "DCAAccountAddress_",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "active_",
        type: "bool",
      },
    ],
    name: "DCAAccountSubscription",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
    ],
    name: "ExecutedDCA",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newExecutionEOA_",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "changer_",
        type: "address",
      },
    ],
    name: "ExecutionEOAAddressChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "FeesDistributed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addressToCheck_",
        type: "address",
      },
    ],
    name: "CheckIfAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "DCAAccount_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "strategyId_",
        type: "uint256",
      },
    ],
    name: "Execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "DCAAccount_",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "strategyId_",
        type: "uint256[]",
      },
    ],
    name: "ExecuteBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress_",
        type: "address",
      },
    ],
    name: "ForceFeeFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dcaAccountAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "accountStrategyId_",
        type: "uint256",
      },
    ],
    name: "GetSpesificStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "accountAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokeData",
            name: "baseToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokeData",
            name: "targetToken",
            type: "tuple",
          },
          {
            internalType: "enum IDCADataStructures.Interval",
            name: "interval",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strategyId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "reinvest",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "reinvestCallData",
            type: "bytes",
          },
        ],
        internalType: "struct IDCADataStructures.Strategy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GetTotalActiveStrategys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "accountAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokeData",
            name: "baseToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokeData",
            name: "targetToken",
            type: "tuple",
          },
          {
            internalType: "enum IDCADataStructures.Interval",
            name: "interval",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strategyId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "reinvest",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "reinvestCallData",
            type: "bytes",
          },
        ],
        internalType: "struct IDCADataStructures.Strategy",
        name: "strategy_",
        type: "tuple",
      },
    ],
    name: "Subscribe",
    outputs: [
      {
        internalType: "bool",
        name: "sucsess",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "accountAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokeData",
            name: "baseToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
              {
                internalType: "string",
                name: "ticker",
                type: "string",
              },
            ],
            internalType: "struct IDCADataStructures.TokeData",
            name: "targetToken",
            type: "tuple",
          },
          {
            internalType: "enum IDCADataStructures.Interval",
            name: "interval",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strategyId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "reinvest",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "reinvestCallData",
            type: "bytes",
          },
        ],
        internalType: "struct IDCADataStructures.Strategy",
        name: "strategy_",
        type: "tuple",
      },
    ],
    name: "Unsubscribe",
    outputs: [
      {
        internalType: "bool",
        name: "sucsess",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin_",
        type: "address",
      },
    ],
    name: "addAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldAdmin_",
        type: "address",
      },
    ],
    name: "removeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526008805460ff191660011790553480156200001e57600080fd5b5060405162001fcb38038062001fcb833981016040819052620000419162000367565b33806200006957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000074816200028b565b503360009081526001602052604090205460ff16806200009e57506000546001600160a01b031633145b620000ec5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e2061646d696e000000000000000000604482015260640162000060565b81516005805460208501516040860151606087015160808801516001600160a01b039081166801000000000000000002600160401b600160e01b031961ffff93841666010000000000000261ffff60301b19958516640100000000029590951663ffffffff60201b19968516620100000263ffffffff199098169490991693909317959095179390931695909517179390931617905560a0830151600680549183166001600160a01b031992831617905560c084015160078054919093169116179055620001ba81620002db565b620002836004602081905260147f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec556116807fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0555612d007f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a755619d807f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0556000526202a3007f1a1e6821cde7d0159c0d293177871e09677b4e42307c7db3ba94f8648a5a050f55565b505062000459565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60088054610100600160a81b0319166101006001600160a01b038416908102919091179091556040513381527f3b0bf299f0737f59e2100945943806da75fe3460c252af26cd54645f565b22999060200160405180910390a250565b805161ffff811681146200034a57600080fd5b919050565b80516001600160a01b03811681146200034a57600080fd5b6000808284036101008112156200037d57600080fd5b60e08112156200038c57600080fd5b5060405160e081016001600160401b0381118282101715620003be57634e487b7160e01b600052604160045260246000fd5b604052620003cc8462000337565b8152620003dc6020850162000337565b6020820152620003ef6040850162000337565b6040820152620004026060850162000337565b606082015262000415608085016200034f565b60808201526200042860a085016200034f565b60a08201526200043b60c085016200034f565b60c082015291506200045060e084016200034f565b90509250929050565b611b6280620004696000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063892cd8f51161008c578063a44e13e011610066578063a44e13e0146101a1578063b661cfcc146101cd578063ede11d37146101e0578063f2fde38b1461020057600080fd5b8063892cd8f5146101505780638da5cb5b146101635780639ab188781461017e57600080fd5b80635864badb116100bd5780635864badb146101225780637048027514610135578063715018a61461014857600080fd5b80631785f53c146100e457806343771d6d146100f95780634eaf17601461010f575b600080fd5b6100f76100f23660046112fe565b610213565b005b6009546040519081526020015b60405180910390f35b6100f761011d3660046112fe565b61023c565b6100f7610130366004611420565b6103e9565b6100f76101433660046112fe565b61075c565b6100f761078b565b6100f761015e3660046114e0565b61079f565b6000546040516001600160a01b039091168152602001610106565b61019161018c36600461150a565b61097a565b6040519015158152602001610106565b6101916101af3660046112fe565b6001600160a01b031660009081526001602052604090205460ff1690565b6101916101db36600461150a565b6109a1565b6101f36101ee3660046114e0565b610a18565b6040516101069190611601565b6100f761020e3660046112fe565b610ceb565b61021b610d42565b6001600160a01b03166000908152600160205260409020805460ff19169055565b3360009081526001602052604090205460ff168061026457506000546001600160a01b031633145b6102b55760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e2061646d696e00000000000000000060448201526064015b60405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906116d0565b905080156103e457600080600061035184610d88565b600554929550909350915061037c906801000000000000000090046001600160a01b03168487610e08565b600654610393906001600160a01b03168387610e08565b6007546103aa906001600160a01b03168287610e08565b60405184906001600160a01b038816907f63be20cc905d5ba0cf65db405c4999f99f2575e521875f13a8009d6eed7a09d990600090a35050505b505050565b3360009081526001602052604090205460ff168061041157506000546001600160a01b031633145b61045d5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e2061646d696e00000000000000000060448201526064016102ac565b60085460ff166104a15760405162461bcd60e51b815260206004820152600f60248201526e444341206973206f6e20706175736560881b60448201526064016102ac565b600a825111156104f35760405162461bcd60e51b815260206004820152601d60248201527f4d6178696d756d20313020657865637574696f6e7320616c6c6f77656400000060448201526064016102ac565b805182511461056a5760405162461bcd60e51b815260206004820152602560248201527f4163636f756e7473202620537472617465677920636f756e7420646f6e27742060448201527f6d6174636800000000000000000000000000000000000000000000000000000060648201526084016102ac565b60005b82518110156103e457426004600060026000878681518110610591576105916116e9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008686815181106105cd576105cd6116e9565b60209081029190910181015182528101919091526040016000206005015460ff1660048111156105ff576105ff6115c9565b6004811115610610576106106115c9565b81526020019081526020016000205460036000868581518110610635576106356116e9565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858581518110610671576106716116e9565b60200260200101518152602001908152602001600020546106929190611715565b101561074a5760006106d68483815181106106af576106af6116e9565b60200260200101518484815181106106c9576106c96116e9565b6020026020010151610e9a565b90508015610748578282815181106106f0576106f06116e9565b602002602001015184838151811061070a5761070a6116e9565b60200260200101516001600160a01b03167f647e094a2b06f56215fbf82c903045a0a7192871b85d64cbd2596039597fd0e060405160405180910390a35b505b8061075481611728565b91505061056d565b610764610d42565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b610793610d42565b61079d6000610f5a565b565b3360009081526001602052604090205460ff16806107c757506000546001600160a01b031633145b6108135760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e2061646d696e00000000000000000060448201526064016102ac565b60085460ff166108575760405162461bcd60e51b815260206004820152600f60248201526e444341206973206f6e20706175736560881b60448201526064016102ac565b6001600160a01b038216600090815260026020908152604080832084845290915281206005015483918391429160049160ff168281111561089a5761089a6115c9565b60048111156108ab576108ab6115c9565b815260208082019290925260409081016000908120546001600160a01b03871682526003845282822086835290935220546108e69190611715565b106109335760405162461bcd60e51b815260206004820152601460248201527f44434120496e74657276616c206e6f74206d657400000000000000000000000060448201526064016102ac565b61093d8484610e9a565b5060405183906001600160a01b038616907f647e094a2b06f56215fbf82c903045a0a7192871b85d64cbd2596039597fd0e090600090a350505050565b600980546000918261098b83611741565b919050555061099982610fb7565b506001919050565b60085460009060ff166109e85760405162461bcd60e51b815260206004820152600f60248201526e444341206973206f6e20706175736560881b60448201526064016102ac565b6109f96109f48361189e565b611062565b60098054906000610a0983611728565b9190505550600190505b919050565b610a20611245565b6001600160a01b03838116600090815260026020818152604080842087855282529283902083516101208101855281548616815284516060810186526001830180549788168252600160a01b90970460ff16818501529382018054919692959387019493840191610a909061198e565b80601f0160208091040260200160405190810160405280929190818152602001828054610abc9061198e565b8015610b095780601f10610ade57610100808354040283529160200191610b09565b820191906000526020600020905b815481529060010190602001808311610aec57829003601f168201915b505050919092525050508152604080516060810182526003840180546001600160a01b0381168352600160a01b900460ff166020808401919091526004860180549190950194929391929184019190610b619061198e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8d9061198e565b8015610bda5780601f10610baf57610100808354040283529160200191610bda565b820191906000526020600020905b815481529060010190602001808311610bbd57829003601f168201915b505050919092525050508152600582015460209091019060ff166004811115610c0557610c056115c9565b6004811115610c1657610c166115c9565b81526006820154602082015260078201546040820152600882015460ff80821615156060840152610100909104161515608082015260098201805460a090920191610c609061198e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8c9061198e565b8015610cd95780601f10610cae57610100808354040283529160200191610cd9565b820191906000526020600020905b815481529060010190602001808311610cbc57829003601f168201915b50505050508152505090505b92915050565b610cf3610d42565b6001600160a01b038116610d36576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016102ac565b610d3f81610f5a565b50565b6000546001600160a01b0316331461079d576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016102ac565b6005546000908190819061271090610da49061ffff16866119c8565b610dae91906119df565b60055490935061271090610dcc9062010000900461ffff16866119c8565b610dd691906119df565b60055490925061271090610df690640100000000900461ffff16866119c8565b610e0091906119df565b929491935050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af1158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190611a01565b50505050565b6005546040517fca4c8b3100000000000000000000000000000000000000000000000000000000815260048101839052660100000000000090910461ffff1660248201526000906001600160a01b0384169063ca4c8b3190604401600060405180830381600087803b158015610f0f57600080fd5b505af1925050508015610f20575060015b610f2c57506000610ce5565b506001600160a01b038216600090815260036020908152604080832084845290915290204290556001610ce5565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000600281610fc960208501856112fe565b6001600160a01b031681526020808201929092526040908101600090812060a08601358252835220600801805460ff1916921515929092179091557fad7dd7e2de9f2d3aefaff3e109661881c1bc8601af418584618b855f1741ee7b90611032908301836112fe565b604080516001600160a01b03909216825260a084013560208301526000908201526060015b60405180910390a150565b600160c0820181905281516001600160a01b03908116600090815260026020818152604080842060a088015185528252928390208651815490861673ffffffffffffffffffffffffffffffffffffffff1990911617815581870151805196820180549382015160ff16600160a01b0274ffffffffffffffffffffffffffffffffffffffffff19909416979096169690961791909117845591840151859492939184019061110f9082611a6c565b5050506040828101518051600384018054602084015160ff16600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199091166001600160a01b03909316929092179190911781559181015190919060048401906111739082611a6c565b505050606082015160058201805460ff19166001836004811115611199576111996115c9565b02179055506080820151600682015560a0820151600782015560c082015160088201805460e085015161ffff1990911692151561ff00191692909217610100921515830217905582015160098201906111f29082611a6c565b5050815160a0830151604080516001600160a01b03909316835260208301919091526001908201527fad7dd7e2de9f2d3aefaff3e109661881c1bc8601af418584618b855f1741ee7b9150606001611057565b60405180610120016040528060006001600160a01b03168152602001611291604051806060016040528060006001600160a01b03168152602001600060ff168152602001606081525090565b815260408051606080820183526000808352602083810191909152928201529101908152602001600081526020016000815260200160008152602001600015158152602001600015158152602001606081525090565b80356001600160a01b0381168114610a1357600080fd5b60006020828403121561131057600080fd5b611319826112e7565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561135a5761135a611320565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561138957611389611320565b604052919050565b600067ffffffffffffffff8211156113ab576113ab611320565b5060051b60200190565b600082601f8301126113c657600080fd5b813560206113db6113d683611391565b611360565b82815260059290921b840181019181810190868411156113fa57600080fd5b8286015b8481101561141557803583529183019183016113fe565b509695505050505050565b6000806040838503121561143357600080fd5b823567ffffffffffffffff8082111561144b57600080fd5b818501915085601f83011261145f57600080fd5b8135602061146f6113d683611391565b82815260059290921b8401810191818101908984111561148e57600080fd5b948201945b838610156114b3576114a4866112e7565b82529482019490820190611493565b965050860135925050808211156114c957600080fd5b506114d6858286016113b5565b9150509250929050565b600080604083850312156114f357600080fd5b6114fc836112e7565b946020939093013593505050565b60006020828403121561151c57600080fd5b813567ffffffffffffffff81111561153357600080fd5b8201610120818503121561131957600080fd5b6000815180845260005b8181101561156c57602081850181015186830182015201611550565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03815116825260ff602082015116602083015260006040820151606060408501526115c16060850182611546565b949350505050565b634e487b7160e01b600052602160045260246000fd5b600581106115fd57634e487b7160e01b600052602160045260246000fd5b9052565b6020815261161b6020820183516001600160a01b03169052565b6000602083015161012080604085015261163961014085018361158c565b91506040850151601f1980868503016060870152611657848361158c565b93506060870151915061166d60808701836115df565b608087015160a087015260a087015160c087015260c0870151915061169660e087018315159052565b60e087015191506101006116ad8188018415159052565b8701518685039091018387015290506116c68382611546565b9695505050505050565b6000602082840312156116e257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610ce557610ce56116ff565b60006001820161173a5761173a6116ff565b5060010190565b600081611750576117506116ff565b506000190190565b600067ffffffffffffffff83111561177257611772611320565b611785601f8401601f1916602001611360565b905082815283838301111561179957600080fd5b828260208301376000602084830101529392505050565b6000606082840312156117c257600080fd5b6040516060810167ffffffffffffffff82821081831117156117e6576117e6611320565b816040528293506117f6856112e7565b83526020850135915060ff8216821461180e57600080fd5b816020840152604085013591508082111561182857600080fd5b508301601f8101851361183a57600080fd5b61184985823560208401611758565b6040830152505092915050565b803560058110610a1357600080fd5b8015158114610d3f57600080fd5b8035610a1381611865565b600082601f83011261188f57600080fd5b61131983833560208501611758565b600061012082360312156118b157600080fd5b6118b9611336565b6118c2836112e7565b8152602083013567ffffffffffffffff808211156118df57600080fd5b6118eb368387016117b0565b6020840152604085013591508082111561190457600080fd5b611910368387016117b0565b604084015261192160608601611856565b60608401526080850135608084015260a085013560a084015261194660c08601611873565b60c084015261195760e08601611873565b60e08401526101009150818501358181111561197257600080fd5b61197e3682880161187e565b8385015250505080915050919050565b600181811c908216806119a257607f821691505b6020821081036119c257634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417610ce557610ce56116ff565b6000826119fc57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611a1357600080fd5b815161131981611865565b601f8211156103e457600081815260208120601f850160051c81016020861015611a455750805b601f850160051c820191505b81811015611a6457828155600101611a51565b505050505050565b815167ffffffffffffffff811115611a8657611a86611320565b611a9a81611a94845461198e565b84611a1e565b602080601f831160018114611acf5760008415611ab75750858301515b600019600386901b1c1916600185901b178555611a64565b600085815260208120601f198616915b82811015611afe57888601518255948401946001909101908401611adf565b5085821015611b1c5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212201375e775675746eeee2cf490ab19f1292c73972d79dc8bb26adb7b0e30e3a07764736f6c63430008140033";

type DCAExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DCAExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DCAExecutor__factory extends ContractFactory {
  constructor(...args: DCAExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    feeDistrobution_: IDCADataStructures.FeeDistributionStruct,
    executionEOA_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      feeDistrobution_,
      executionEOA_,
      overrides || {}
    );
  }
  override deploy(
    feeDistrobution_: IDCADataStructures.FeeDistributionStruct,
    executionEOA_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      feeDistrobution_,
      executionEOA_,
      overrides || {}
    ) as Promise<
      DCAExecutor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DCAExecutor__factory {
    return super.connect(runner) as DCAExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DCAExecutorInterface {
    return new Interface(_abi) as DCAExecutorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DCAExecutor {
    return new Contract(address, _abi, runner) as unknown as DCAExecutor;
  }
}
