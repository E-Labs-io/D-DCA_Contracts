/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  DCAReinvestProxy,
  DCAReinvestProxyInterface,
} from "../../../../contracts/proxys/DCAReinvestProxy.sol/DCAReinvestProxy";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "REINVEST_ACTIVE",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REINVEST_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "investCode",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "depositReinvestMethod",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "withdrawReinvestMethod",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "reinvestSpender",
            type: "address",
          },
        ],
        internalType: "struct DCAReinvestProxy.Reinvest",
        name: "reinvestData_",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "tokenAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "executeReinvest",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLibraryVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "activate_",
        type: "bool",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setActiveState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "investCode",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "depositReinvestMethod",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "withdrawReinvestMethod",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "reinvestSpender",
            type: "address",
          },
        ],
        internalType: "struct DCAReinvestProxy.Reinvest",
        name: "reinvestData_",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "tokenAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "unwindReinvest",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805461ff001916905534801561001b57600080fd5b50610a368061002b6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80637c4bb0b111610076578063a4fbe3b71161005b578063a4fbe3b7146101db578063d53a822f146101ee578063f2fde38b1461020157600080fd5b80637c4bb0b1146101845780638da5cb5b146101a157600080fd5b8063611e2c3f116100a7578063611e2c3f14610118578063715018a614610140578063738800b71461014857600080fd5b80630ca75044146100c357806340438aea1461010e575b600080fd5b60408051808201909152600f81527f4554485f474f45524c492056302e31000000000000000000000000000000000060208201525b604051610105919061077c565b60405180910390f35b610116610214565b005b61012b6101263660046108c0565b610230565b60408051928352901515602083015201610105565b61011661024b565b6100f86040518060400160405280600f81526020017f4554485f474f45524c492056302e31000000000000000000000000000000000081525081565b6000546101919060ff1681565b6040519015158152602001610105565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b039091168152602001610105565b61012b6101e93660046108c0565b61025f565b6101166101fc3660046109a7565b61026d565b61011661020f3660046109c9565b6103b8565b61021c610414565b6000805460ff19811660ff90911615179055565b60008061023e858585610488565b915091505b935093915050565b610253610414565b61025d60006104cc565b565b60008061023e858585610555565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156102b85750825b905060008267ffffffffffffffff1660011480156102d55750303b155b9050811580156102e3575080155b1561031a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561034e57845468ff00000000000000001916680100000000000000001785555b6000805460ff19168715151790556103653361058e565b83156103b057845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6103c0610414565b6001600160a01b038116610408576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610411816104cc565b50565b336104467f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03161461025d576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016103ff565b6020830151600090819060ff161561024357600360ff16856020015160ff16036104b157600091505b8115610243576104c284833361059f565b9050935093915050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080547fffffffffffffffffffffffff000000000000000000000000000000000000000081166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600080600360ff16856020015160ff16036105735760009150610243565b601160ff16856020015160ff16111561024357935093915050565b6105966106e9565b61041181610750565b6040516001600160a01b038216602482015260448101839052600090819060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052519091506001600160a01b038616906106329083906109e4565b6000604051808303816000865af19150503d806000811461066f576040519150601f19603f3d011682016040523d82523d6000602084013e610674565b606091505b505080925050816106e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207472616e73666572206661696c6564000000000000000000000060448201526064016103ff565b509392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff1661025d576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103c06106e9565b60005b8381101561077357818101518382015260200161075b565b50506000910152565b602081526000825180602084015261079b816040850160208701610758565b601f01601f19169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610801576108016107af565b60405290565b8035801515811461081757600080fd5b919050565b600082601f83011261082d57600080fd5b813567ffffffffffffffff80821115610848576108486107af565b604051601f8301601f19908116603f01168101908282118183101715610870576108706107af565b8160405283815286602085880101111561088957600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b038116811461081757600080fd5b6000806000606084860312156108d557600080fd5b833567ffffffffffffffff808211156108ed57600080fd5b9085019060a0828803121561090157600080fd5b6109096107de565b61091283610807565b8152602083013560ff8116811461092857600080fd5b602082015260408301358281111561093f57600080fd5b61094b8982860161081c565b60408301525060608301358281111561096357600080fd5b61096f8982860161081c565b606083015250610981608084016108a9565b60808201529450610997915050602085016108a9565b9150604084013590509250925092565b6000602082840312156109b957600080fd5b6109c282610807565b9392505050565b6000602082840312156109db57600080fd5b6109c2826108a9565b600082516109f6818460208701610758565b919091019291505056fea2646970667358221220aba3b556031cd4efc68a478c5ca0e30061f539eeaf92659a4c1287b361bc897364736f6c63430008140033";

type DCAReinvestProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DCAReinvestProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DCAReinvestProxy__factory extends ContractFactory {
  constructor(...args: DCAReinvestProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DCAReinvestProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DCAReinvestProxy__factory {
    return super.connect(runner) as DCAReinvestProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DCAReinvestProxyInterface {
    return new Interface(_abi) as DCAReinvestProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DCAReinvestProxy {
    return new Contract(address, _abi, runner) as unknown as DCAReinvestProxy;
  }
}
